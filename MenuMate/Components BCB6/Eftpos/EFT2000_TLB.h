// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 5/11/2010 12:33:15 p.m. from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\PROGRA~2\Syncro\EFT2000.exe (1)
// LIBID: {AC17F141-6A16-11D3-ABEA-00105A6CA437}
// LCID: 0
// Helpfile: 
// HelpString: EFT2000 1.3 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   EFT2000_TLBH
#define   EFT2000_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Eft2000_tlb
{

// *********************************************************************//
// HelpString: EFT2000 1.3 Type Library
// Version:    1.3
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_EFT2000;
extern __declspec (package) const GUID DIID_IPOSEvent;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0210_0001;
extern __declspec (package) const GUID GUID_EFTPOSStatusEnum;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0210_0002;
extern __declspec (package) const GUID GUID_ReceiptTypeEnum;
extern __declspec (package) const GUID IID_IPOSProductData;
extern __declspec (package) const GUID IID_IPOS;
extern __declspec (package) const GUID IID_IPOS2;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0209_0006;
extern __declspec (package) const GUID GUID_ResultCodeEnum;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0209_0001;
extern __declspec (package) const GUID GUID_AccountTypeEnum;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0209_0002;
extern __declspec (package) const GUID GUID_AdminTypeEnum;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0209_0004;
extern __declspec (package) const GUID GUID_FinancialTypeEnum;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0209_0005;
extern __declspec (package) const GUID GUID_UtilityTypeEnum;
extern __declspec (package) const GUID IID_IPOS3;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0209_0007;
extern __declspec (package) const GUID GUID_MotoTransTypeEnum;
extern __declspec (package) const GUID IID_IPOS4;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0211_0005;
extern __declspec (package) const GUID GUID_AcquirerTypeEnum;
extern __declspec (package) const GUID CLSID_POSInterface;
extern __declspec (package) const GUID DIID_IEFTEvent;
extern __declspec (package) const GUID IID_IDialogData;
extern __declspec (package) const GUID IID_IEFTProductData;
extern __declspec (package) const GUID IID_IEFT;
extern __declspec (package) const GUID IID_IEFT2;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0211_0003;
extern __declspec (package) const GUID GUID_EFTResultCodeEnum;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0211_0002;
extern __declspec (package) const GUID GUID_DialogReturnCodeEnum;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0211_0001;
extern __declspec (package) const GUID GUID_DialogFlagEnum;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_EFT2000_0211_0004;
extern __declspec (package) const GUID GUID_DialogUtilityTypeEnum;
extern __declspec (package) const GUID IID_IEFTIF;
extern __declspec (package) const GUID CLSID_EFTInterface;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    __MIDL___MIDL_itf_EFT2000_0210_0001;
enum class    __MIDL___MIDL_itf_EFT2000_0210_0002;
enum class    __MIDL___MIDL_itf_EFT2000_0209_0006;
enum class    __MIDL___MIDL_itf_EFT2000_0209_0001;
enum class    __MIDL___MIDL_itf_EFT2000_0209_0002;
enum class    __MIDL___MIDL_itf_EFT2000_0209_0004;
enum class    __MIDL___MIDL_itf_EFT2000_0209_0005;
enum class    __MIDL___MIDL_itf_EFT2000_0209_0007;
enum class    __MIDL___MIDL_itf_EFT2000_0211_0005;
enum class    __MIDL___MIDL_itf_EFT2000_0211_0003;
enum class    __MIDL___MIDL_itf_EFT2000_0211_0002;
enum class    __MIDL___MIDL_itf_EFT2000_0211_0001;
enum class    __MIDL___MIDL_itf_EFT2000_0211_0004;
interface DECLSPEC_UUID("{AC17F14F-6A16-11D3-ABEA-00105A6CA437}") IPOSEvent;
typedef TComInterface<IPOSEvent, &DIID_IPOSEvent> IPOSEventPtr;

interface DECLSPEC_UUID("{E97AEB91-9B3C-11D5-85A9-00C04F078CAD}") IPOSProductData;
typedef TComInterface<IPOSProductData, &IID_IPOSProductData> IPOSProductDataPtr;

interface DECLSPEC_UUID("{AC17F14D-6A16-11D3-ABEA-00105A6CA437}") IPOS;
typedef TComInterface<IPOS, &IID_IPOS> IPOSPtr;

interface DECLSPEC_UUID("{4D32AEA0-B997-11D4-B5C3-00C04F078DAE}") IPOS2;
typedef TComInterface<IPOS2, &IID_IPOS2> IPOS2Ptr;

interface DECLSPEC_UUID("{30CB4D32-3C6B-470A-93E2-4C99CE561846}") IPOS3;
typedef TComInterface<IPOS3, &IID_IPOS3> IPOS3Ptr;

interface DECLSPEC_UUID("{D7E5A7E2-E648-4F26-B664-FFFE3AD447AB}") IPOS4;
typedef TComInterface<IPOS4, &IID_IPOS4> IPOS4Ptr;

interface DECLSPEC_UUID("{AC17F152-6A16-11D3-ABEA-00105A6CA437}") IEFTEvent;
typedef TComInterface<IEFTEvent, &DIID_IEFTEvent> IEFTEventPtr;

interface DECLSPEC_UUID("{7850B3D4-F92F-4AF0-B2AB-6BFDFBF52648}") IDialogData;
typedef TComInterface<IDialogData, &IID_IDialogData> IDialogDataPtr;

interface DECLSPEC_UUID("{1A9FB261-9A92-11D5-85A8-00C04F078CAD}") IEFTProductData;
typedef TComInterface<IEFTProductData, &IID_IEFTProductData> IEFTProductDataPtr;

interface DECLSPEC_UUID("{AC17F150-6A16-11D3-ABEA-00105A6CA437}") IEFT;
typedef TComInterface<IEFT, &IID_IEFT> IEFTPtr;

interface DECLSPEC_UUID("{9C801080-B906-11D4-B5C3-00C04F078DAE}") IEFT2;
typedef TComInterface<IEFT2, &IID_IEFT2> IEFT2Ptr;

interface DECLSPEC_UUID("{E35B8937-66C9-11D3-A06A-0008C7BC6FEA}") IEFTIF;
typedef TComInterface<IEFTIF, &IID_IEFTIF> IEFTIFPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IPOS4 POSInterface;
typedef IPOS4Ptr POSInterfacePtr;
typedef IEFT2 EFTInterface;
typedef IEFT2Ptr EFTInterfacePtr;

#define LIBID_OF_POSInterface (&LIBID_EFT2000)
#define LIBID_OF_EFTInterface (&LIBID_EFT2000)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0210_0001 EFTPOSStatusEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0210_0002 ReceiptTypeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0209_0006 ResultCodeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0209_0001 AccountTypeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0209_0002 AdminTypeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0209_0004 FinancialTypeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0209_0005 UtilityTypeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0209_0007 MotoTransTypeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0211_0005 AcquirerTypeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0211_0003 EFTResultCodeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0211_0002 DialogReturnCodeEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0211_0001 DialogFlagEnum;
typedef Eft2000_tlb::__MIDL___MIDL_itf_EFT2000_0211_0004 DialogUtilityTypeEnum;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class __MIDL___MIDL_itf_EFT2000_0210_0001
{
  EFTPOS_UNKNOWN = 0, 
  EFTPOS_CONNECTING = 1, 
  EFTPOS_OFFLINE = 2, 
  EFTPOS_PROCESSING = 3, 
  EFTPOS_AVAILABLE_SECONDARY_ONLINE = 4, 
  EFTPOS_AVAILABLE_PRIMARY_ONLINE = 5
};

enum class __MIDL___MIDL_itf_EFT2000_0210_0002
{
  RECEIPT_FINANCIAL = 0, 
  RECEIPT_FINANCIAL_EXCEPTION = 1, 
  RECEIPT_LOGON = 2, 
  RECEIPT_LOGON_EXCEPTION = 3, 
  RECEIPT_PENDING_REVERSAL = 4, 
  RECEIPT_SETTLEMENT = 5, 
  RECEIPT_SETTLEMENT_EXCEPTION = 6, 
  RECEIPT_SIGNATURE_ACCEPT = 7, 
  RECEIPT_SIGNATURE_DECLINED = 8, 
  RECEIPT_TERMINAL_TOTALS = 9, 
  RECEIPT_OFFLINE_PROCESSED = 10, 
  RECEIPT_OFFLINE_SIG_DECLINED = 11, 
  RECEIPT_OFFLINE_DECLINED = 12, 
  RECEIPT_STORED_TRANSACTION_TOTALS = 13, 
  RECEIPT_STORED_TRANSACTION = 14, 
  RECEIPT_SIGNATURE_REQUIRED = 15, 
  RECEIPT_PLAIN_TEXT = 16, 
  RECEIPT_POS_PRINT = 17, 
  RECEIPT_MISC = 99
};

enum class __MIDL___MIDL_itf_EFT2000_0209_0006
{
  ACCEPTED = 0, 
  DECLINED = 1, 
  IN_PROGRESS = 2, 
  FAILED = 3, 
  EFTPOS_UNAVAILABLE = 4, 
  SPECIAL = 5
};

enum class __MIDL___MIDL_itf_EFT2000_0209_0001
{
  ACCOUNT_NONE = 0, 
  ACCOUNT_CHEQUE = 1, 
  ACCOUNT_CREDIT = 2, 
  ACCOUNT_SAVINGS = 3
};

enum class __MIDL___MIDL_itf_EFT2000_0209_0002
{
  ADMIN_NONE = 0, 
  ADMIN_LOGON = 1, 
  ADMIN_SETTLEMENT_CUTOVER = 2, 
  ADMIN_SETTLEMENT_INQUIRY = 3, 
  ADMIN_PRINT_LOCAL_TERMINAL_TOTALS = 4, 
  ADMIN_RESET_LOCAL_TERMINAL_TOTALS = 5, 
  ADMIN_AUTO_REGISTRATION = 6
};

enum class __MIDL___MIDL_itf_EFT2000_0209_0004
{
  FINANCIAL_NONE = 0, 
  FINANCIAL_PURCHASE = 1, 
  FINANCIAL_CASH_ADVANCE = 2, 
  FINANCIAL_PURCHASE_PLUS_CASH = 3, 
  FINANCIAL_REFUND = 4, 
  FINANCIAL_INQUIRY = 5, 
  FINANCIAL_PAYMENT_OR_DEPOSIT = 6, 
  FINANCIAL_CASH_ADVANCE_FOR_PAYMENT = 7
};

enum class __MIDL___MIDL_itf_EFT2000_0209_0005
{
  UTILITY_NONE = 0, 
  UTILITY_SELECT_FROM_MENU = 1, 
  UTILITY_DIAGNOSTIC_INQUIRY = 2, 
  UTILITY_DISPLAY_KVC = 3, 
  UTILITY_RESET_TERMINAL = 4, 
  UTILITY_DISPLAY_TERMINAL_SOFTWARE_VERSION = 5, 
  UTILITY_DISPLAY_PINPAD_SOFTWARE_VERSION = 6, 
  UTILITY_DISPLAY_PINPAD_SERIAL_NUMBER = 7, 
  UTILITY_REPRINT_RECEIPT = 8, 
  UTILITY_PRINT_PENDING_RECEIPTS = 9, 
  UTILITY_VIEW_JOURNAL = 10, 
  UTILITY_VIEW_REPORT = 11, 
  UTILITY_ARCHIVE_JOURNAL = 12, 
  UTILITY_DOWNLOAD_TERMINAL_SETTINGS = 13, 
  UTILITY_DOWNLOAD_CARD_TABLE = 14, 
  UTILITY_CHANGE_CONFIGURATION = 15, 
  UTILITY_PRINT_REGISTRATION_INFO = 16, 
  UTILITY_ENTER_REGISTRATION_KEY = 17, 
  UTILITY_PRINT_STORED_TRANSACTION_TOTALS = 18, 
  UTILITY_TRANSMIT_EOV = 19, 
  UTILITY_TRANSMIT_AUTOREG = 20, 
  UTILITY_PRINT_EMV_PUBLIC_KEY_CHECKSUMS = 21, 
  UTILITY_PRINT_CURRENTLY_ENABLED_EMV_APPLICATIONS = 22
};

enum class __MIDL___MIDL_itf_EFT2000_0209_0007
{
  MOTO_NONE = 0, 
  MOTO_SINGLE_MAIL_ORDER = 1, 
  MOTO_RECURRING_MAIL_ORDER = 2, 
  MOTO_INSTALLMENT_MAIL_ORDER = 4, 
  MOTO_UNKNOWN_MAIL_ORDER = 8, 
  MOTO_ECOMMERCE = 16
};

enum class __MIDL___MIDL_itf_EFT2000_0211_0005
{
  ACQUIRER_NONE = 0, 
  ACQUIRER_ETSL = 1, 
  ACQUIRER_TRANSACTION_EXCHANGE = 2
};

enum class __MIDL___MIDL_itf_EFT2000_0211_0003
{
  EFTRC_OK = 0, 
  EFTRC_INTERNAL_ERROR = 1
};

enum class __MIDL___MIDL_itf_EFT2000_0211_0002
{
  DRC_OK = 0, 
  DRC_CANCEL = 1, 
  DRC_CLOSE = 2, 
  DRC_YES = 3, 
  DRC_NO = 4, 
  DRC_REPRINT = 5, 
  DRC_DESTROYED = 6, 
  DRC_ERROR = 7
};

enum class __MIDL___MIDL_itf_EFT2000_0211_0001
{
  DIALOG_OK = 1, 
  DIALOG_OK_CANCEL = 2, 
  DIALOG_CLOSE = 4, 
  DIALOG_YES_NO = 8, 
  DIALOG_CANCEL = 16, 
  DIALOG_YES_NO_REPRINT = 32, 
  DIALOG_ICON_INFORMATION = 64, 
  DIALOG_ICON_EXCLAMATION = 128, 
  DIALOG_ICON_QUESTION = 256, 
  DIALOG_ICON_TICK = 512, 
  DIALOG_ICON_CROSS = 1024, 
  DIALOG_TEXT_LEFT = 2048, 
  DIALOG_TEXT_CENTER = 4096, 
  DIALOG_TEXT_RIGHT = 8192
};

enum class __MIDL___MIDL_itf_EFT2000_0211_0004
{
  UT_NONE = 0, 
  UT_ARCHIVE_JOURNAL = 1, 
  UT_CHANGE_CONFIGURATION = 2, 
  UT_DIAGNOSTIC_INQUIRY = 3, 
  UT_DISPLAY_KVC = 4, 
  UT_DISPLAY_PINPAD_SERIAL_NUMBER = 5, 
  UT_DISPLAY_PINPAD_SOFTWARE_VERSION = 6, 
  UT_DISPLAY_TERMINAL_SOFTWARE_VERSION = 7, 
  UT_DOWNLOAD_CARD_TABLE = 8, 
  UT_DOWNLOAD_TERMINAL_SETTINGS = 9, 
  UT_PRINT_PENDING_RECEIPTS = 10, 
  UT_REPRINT_RECEIPT = 11, 
  UT_RESET_TERMINAL = 12, 
  UT_VIEW_JOURNAL = 13, 
  UT_VIEW_REPORT = 14, 
  UT_PRINT_REGISTRATION_INFO = 15, 
  UT_ENTER_REGISTRATION_KEY = 16, 
  UT_PRINT_STORED_TRANSACTION_TOTALS = 17, 
  UT_TRANSMIT_EOV = 18, 
  UT_TRANSMIT_AUTOREG = 19, 
  UT_PRINT_EMV_PUBLIC_KEY_CHECKSUMS = 20, 
  UT_PRINT_CURRENTLY_ENABLED_EMV_APPLICATIONS = 21
};

// *********************************************************************//
// Interface: IPOSEvent
// Flags:     (4096) Dispatchable
// GUID:      {AC17F14F-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
interface IPOSEvent : public TDispWrapper<IDispatch>
{
  void __fastcall EFTPOSStatusChange(Eft2000_tlb::EFTPOSStatusEnum eNewStatus/*[in]*/)
  {
    _TDispID _dispid(/* EFTPOSStatusChange */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (int)eNewStatus /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall EndPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType/*[in]*/)
  {
    _TDispID _dispid(/* EndPrintBanner */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (int)eReceiptType /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall StartPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType/*[in]*/)
  {
    _TDispID _dispid(/* StartPrintBanner */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = (int)eReceiptType /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall TransactionComplete(long lUniqueID/*[in]*/, long lResult/*[in]*/)
  {
    _TDispID _dispid(/* TransactionComplete */ DISPID(4));
    TAutoArgs<2> _args;
    _args[1] = lUniqueID /*[VT_I4:0]*/;
    _args[2] = lResult /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IPOSProductData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E97AEB91-9B3C-11D5-85A9-00C04F078CAD}
// *********************************************************************//
interface IPOSProductData  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerReferenceNumber(BSTR* pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_InputCustomerReferenceNumber(BSTR pVal/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerIdentityNumber(BSTR* pVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_InputCustomerIdentityNumber(BSTR pVal/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE AddProductData(BSTR bstrProductCode/*[in]*/, 
                                                   long lQuantity/*[in]*/, long lAmount/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE ClearAllProductData(void) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_InputCustomerReferenceNumber(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputCustomerReferenceNumber((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputCustomerIdentityNumber(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputCustomerIdentityNumber((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            InputCustomerReferenceNumber = {read = get_InputCustomerReferenceNumber, write = set_InputCustomerReferenceNumber};
  __property   BSTR            InputCustomerIdentityNumber = {read = get_InputCustomerIdentityNumber, write = set_InputCustomerIdentityNumber};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPOS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AC17F14D-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
interface IPOS  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ModuleDescription(BSTR* pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleName(BSTR* pVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleVersion(BSTR* pVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ResultText(BSTR* pVal/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_CardPANData(BSTR* pVal/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_CardType(BSTR* pVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayDialogLeft(long* pVal/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayDialogLeft(long pVal/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayDialogTop(long* pVal/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayDialogTop(long pVal/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_ExpiryDate(BSTR* pVal/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_InputCustomerTrack2Data(BSTR pVal/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_InputCustomerManualPAN(BSTR pVal/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_InputMerchantTrack2Data(BSTR pVal/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialResult(long* pVal/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE ContinuePrinting(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE GetUniqueID(long* lUniqueID/*[in,out]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                                       long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/, 
                                                              long lUniqueID/*[in]*/, 
                                                              long bRunInBackground/*[in]*/, 
                                                              long lAmount1/*[in]*/, 
                                                              long lAmount2/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, 
                                                 long lUniqueID/*[in]*/, 
                                                 long bRunInBackground/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_InputCustomerTrack1Data(BSTR pVal/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_InputCustomerTrack3Data(BSTR pVal/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_InputMerchantTrack1Data(BSTR pVal/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_InputMerchantTrack3Data(BSTR pVal/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_WantProgressBar(long* pVal/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_WantProgressBar(long pVal/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_POSHardware(BSTR Param1/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_POSSoftwareName(BSTR Param1/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_POSSoftwareNumber(BSTR Param1/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_EnablePrintMerchantDetails(long Param1/*[in]*/) = 0; // [31]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ModuleDescription(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleDescription((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ModuleName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ModuleVersion(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleVersion((BSTR*)&pVal));
    return pVal;
  }

  Eft2000_tlb::ResultCodeEnum __fastcall get_ResultCode(void)
  {
    Eft2000_tlb::ResultCodeEnum pVal;
    OLECHECK(this->get_ResultCode((Eft2000_tlb::ResultCodeEnum*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ResultText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ResultText((BSTR*)&pVal));
    return pVal;
  }

  Eft2000_tlb::AccountTypeEnum __fastcall get_AccountType(void)
  {
    Eft2000_tlb::AccountTypeEnum pVal;
    OLECHECK(this->get_AccountType((Eft2000_tlb::AccountTypeEnum*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CardPANData(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CardPANData((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CardType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CardType((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_DisplayDialogLeft(void)
  {
    long pVal;
    OLECHECK(this->get_DisplayDialogLeft((long*)&pVal));
    return pVal;
  }

  long __fastcall get_DisplayDialogTop(void)
  {
    long pVal;
    OLECHECK(this->get_DisplayDialogTop((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExpiryDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExpiryDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputCustomerTrack2Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputCustomerTrack2Data((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputCustomerManualPAN(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputCustomerManualPAN((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputCustomerExpiryDateMonth(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputCustomerExpiryDateMonth((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputCustomerExpiryDateYear(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputCustomerExpiryDateYear((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputMerchantTrack2Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputMerchantTrack2Data((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_SpecialResult(void)
  {
    long pVal;
    OLECHECK(this->get_SpecialResult((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputCustomerTrack1Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputCustomerTrack1Data((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputCustomerTrack3Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputCustomerTrack3Data((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputMerchantTrack1Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputMerchantTrack1Data((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InputMerchantTrack3Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InputMerchantTrack3Data((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_WantProgressBar(void)
  {
    long pVal;
    OLECHECK(this->get_WantProgressBar((long*)&pVal));
    return pVal;
  }


  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   Eft2000_tlb::ResultCodeEnum ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   Eft2000_tlb::AccountTypeEnum AccountType = {read = get_AccountType};
  __property   BSTR            CardPANData = {read = get_CardPANData};
  __property   BSTR            CardType = {read = get_CardType};
  __property   long            DisplayDialogLeft = {read = get_DisplayDialogLeft, write = set_DisplayDialogLeft};
  __property   long            DisplayDialogTop = {read = get_DisplayDialogTop, write = set_DisplayDialogTop};
  __property   BSTR            ExpiryDate = {read = get_ExpiryDate};
  __property   BSTR            InputCustomerTrack2Data = {read = get_InputCustomerTrack2Data, write = set_InputCustomerTrack2Data};
  __property   BSTR            InputCustomerManualPAN = {read = get_InputCustomerManualPAN, write = set_InputCustomerManualPAN};
  __property   BSTR            InputCustomerExpiryDateMonth = {read = get_InputCustomerExpiryDateMonth, write = set_InputCustomerExpiryDateMonth};
  __property   BSTR            InputCustomerExpiryDateYear = {read = get_InputCustomerExpiryDateYear, write = set_InputCustomerExpiryDateYear};
  __property   BSTR            InputMerchantTrack2Data = {read = get_InputMerchantTrack2Data, write = set_InputMerchantTrack2Data};
  __property   long            SpecialResult = {read = get_SpecialResult};
  __property   BSTR            InputCustomerTrack1Data = {read = get_InputCustomerTrack1Data, write = set_InputCustomerTrack1Data};
  __property   BSTR            InputCustomerTrack3Data = {read = get_InputCustomerTrack3Data, write = set_InputCustomerTrack3Data};
  __property   BSTR            InputMerchantTrack1Data = {read = get_InputMerchantTrack1Data, write = set_InputMerchantTrack1Data};
  __property   BSTR            InputMerchantTrack3Data = {read = get_InputMerchantTrack3Data, write = set_InputMerchantTrack3Data};
  __property   long            WantProgressBar = {read = get_WantProgressBar, write = set_WantProgressBar};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPOS2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D32AEA0-B997-11D4-B5C3-00C04F078DAE}
// *********************************************************************//
interface IPOS2  : public Eft2000_tlb::IPOS
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_InputMotoType(Eft2000_tlb::MotoTransTypeEnum Param1/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                             BSTR bstrChequeBankBranch/*[in]*/, 
                                                             BSTR bstrChequeAccount/*[in]*/, 
                                                             long bRunInBackground/*[in]*/, 
                                                             long lAmount/*[in]*/) = 0; // [33]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)


  __property   Eft2000_tlb::MotoTransTypeEnum InputMotoType = {write = set_InputMotoType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPOS3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30CB4D32-3C6B-470A-93E2-4C99CE561846}
// *********************************************************************//
interface IPOS3  : public Eft2000_tlb::IPOS2
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ReceiptData(BSTR* pVal/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_AcquirerType(Eft2000_tlb::AcquirerTypeEnum Param1/*[in]*/) = 0; // [35]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ReceiptData(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ReceiptData((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            ReceiptData = {read = get_ReceiptData};
  __property   Eft2000_tlb::AcquirerTypeEnum AcquirerType = {write = set_AcquirerType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPOS4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D7E5A7E2-E648-4F26-B664-FFFE3AD447AB}
// *********************************************************************//
interface IPOS4  : public Eft2000_tlb::IPOS3
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Stan(long* pVal/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_Status(long* pVal/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE SyncroPrint(BSTR PrintData/*[in]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE EnquireTransaction(long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/) = 0; // [39]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Stan(void)
  {
    long pVal;
    OLECHECK(this->get_Stan((long*)&pVal));
    return pVal;
  }

  long __fastcall get_Status(void)
  {
    long pVal;
    OLECHECK(this->get_Status((long*)&pVal));
    return pVal;
  }


  __property   long            Stan = {read = get_Stan};
  __property   long            Status = {read = get_Status};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IEFTEvent
// Flags:     (4096) Dispatchable
// GUID:      {AC17F152-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
interface IEFTEvent : public TDispWrapper<IDispatch>
{
  void __fastcall DialogDismissed()
  {
    _TDispID _dispid(/* DialogDismissed */ DISPID(1));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: IDialogData
// Flags:     (0)
// GUID:      {7850B3D4-F92F-4AF0-B2AB-6BFDFBF52648}
// *********************************************************************//
interface IDialogData  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayDialogLeft(long* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayDialogTop(long* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_WantProgressBar(long* pVal/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IEFTProductData
// Flags:     (0)
// GUID:      {1A9FB261-9A92-11D5-85A8-00C04F078CAD}
// *********************************************************************//
interface IEFTProductData  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerIdentityNumber(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerReferenceNumber(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputProductAmount(long* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputProductCode(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputProductQuantity(long* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ClearAllProductData(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetFirstInputProductData(long* IsSuccessful/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetNextInputProductData(long* IsSuccessful/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsProductDataPresent(long* IsPresemt/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IEFT
// Flags:     (0)
// GUID:      {AC17F150-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
interface IEFT  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ModuleDescription(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleName(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleVersion(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ResultCode(Eft2000_tlb::EFTResultCodeEnum* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ResultText(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AccountType(Eft2000_tlb::AccountTypeEnum pVal/*[in]*/) = 0; // [1610678277]
  virtual HRESULT STDMETHODCALLTYPE get_CardPANData(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_CardPANData(BSTR pVal/*[in]*/) = 0; // [1610678279]
  virtual HRESULT STDMETHODCALLTYPE get_CardType(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_CardType(BSTR pVal/*[in]*/) = 0; // [1610678281]
  virtual HRESULT STDMETHODCALLTYPE get_DialogDateDay(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogDateMonth(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogDateYear(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogExpiryDateMonth(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogExpiryDateYear(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogInput(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogManualPAN(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogReturnCode(Eft2000_tlb::DialogReturnCodeEnum* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ExpiryDate(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ExpiryDate(BSTR pVal/*[in]*/) = 0; // [1610678292]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialResult(long* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialResult(long pVal/*[in]*/) = 0; // [1610678298]
  virtual HRESULT STDMETHODCALLTYPE DestroyActiveDialog(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SendEFTPOSStatusChangeEvent(Eft2000_tlb::EFTPOSStatusEnum eNewStatus/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SendEndPrintBannerEvent(Eft2000_tlb::ReceiptTypeEnum eReceiptType/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SendStartPrintBannerEvent(Eft2000_tlb::ReceiptTypeEnum eReceiptType/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SendTransactionCompleteEvent(long lUniqueID/*[in]*/, 
                                                                 long lResult/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetResultText(BSTR bstrResultText/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowCardSwipeDialog(BSTR bstrTitle/*[in]*/, 
                                                        BSTR bstrPOSPromptText/*[in]*/, 
                                                        Eft2000_tlb::DialogFlagEnum eDialogFlags/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowStatusDialog(BSTR bstrTitle/*[in]*/, 
                                                     BSTR bstrPOSPromptText/*[in]*/, 
                                                     Eft2000_tlb::DialogFlagEnum eDialogFlags/*[in]*/, 
                                                     long bShowProgressBar/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowUtilityDialog(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowDateDialog(BSTR bstrTitle/*[in]*/, 
                                                   BSTR bstrPOSPromptText/*[in]*/, 
                                                   BSTR bstrDefaultDate/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowInputDialog(BSTR bstrTitle/*[in]*/, 
                                                    BSTR bstrPOSPromptText/*[in]*/, 
                                                    long bAllowBlank/*[in]*/, long maxLen/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogUtilityType(Eft2000_tlb::DialogUtilityTypeEnum* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetUniqueID(long* lUniqueID/*[in,out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_POSConnected(long* pVal/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IEFT2
// Flags:     (0)
// GUID:      {9C801080-B906-11D4-B5C3-00C04F078DAE}
// *********************************************************************//
interface IEFT2  : public Eft2000_tlb::IEFT
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DialogMOTOType(Eft2000_tlb::MotoTransTypeEnum* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowMOTODialog(Eft2000_tlb::MotoTransTypeEnum eMOTOTypesAllowed/*[in]*/, 
                                                   Eft2000_tlb::MotoTransTypeEnum eDefaultType/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InputMotoType(Eft2000_tlb::MotoTransTypeEnum* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowAcquirerSelectionDialog(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AcquirerType(Eft2000_tlb::AcquirerTypeEnum* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogAcquirerType(Eft2000_tlb::AcquirerTypeEnum* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowChequeDialog(BSTR bstrTitle/*[in]*/, 
                                                     BSTR bstrPOSPromptText/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogChequeBankBranch(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogChequeAccount(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DialogChequeSerialNumber(BSTR* pVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ReceiptData(BSTR Param1/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Stan(long Param1/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Status(long Param1/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IEFTIF
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E35B8937-66C9-11D3-A06A-0008C7BC6FEA}
// *********************************************************************//
interface IEFTIF  : public IDispatch
{
public:
  // [1] A textual description of the module
  virtual HRESULT STDMETHODCALLTYPE get_ModuleDescription(BSTR* pbstrModuleDescription/*[out,retval]*/) = 0;
  // [2] This property identifies the module
  virtual HRESULT STDMETHODCALLTYPE get_ModuleName(BSTR* pbstrModuleName/*[out,retval]*/) = 0;
  // [3] A textual representation of the version number and final modification date for this module.  Note that the build number from the version has been omitted, also the textual date should be used to remove ambiguity between international date formats
  virtual HRESULT STDMETHODCALLTYPE get_ModuleVersion(BSTR* pbstrModuleVersion/*[out,retval]*/) = 0;
  // [4] The result of the last method performed
  virtual HRESULT STDMETHODCALLTYPE get_ResultCode(long* plResultCode/*[out,retval]*/) = 0;
  // [5] The result of the last method performed by this module in a string format
  virtual HRESULT STDMETHODCALLTYPE get_ResultText(BSTR* pbstrResultText/*[out,retval]*/) = 0;
  // [6] This function allows the EFT Interface module to start this module on Start-up
  virtual HRESULT STDMETHODCALLTYPE Startup(void) = 0;
  // [7] This function initiates an administration function transaction, e.g. Logon, Settlement Inquiry, etc. 
  virtual HRESULT STDMETHODCALLTYPE StartAdminFunction(long lAdminType/*[in]*/, 
                                                       long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/) = 0;
  // [8] This function is used by POSIF to initiate a financial transaction in the EFTPOS Engine, e.g. Purchase, Refund, etc.
  virtual HRESULT STDMETHODCALLTYPE StartFinancialTransaction(long lTransactionType/*[in]*/, 
                                                              long lUniqueID/*[in]*/, 
                                                              long bRunInBackground/*[in]*/, 
                                                              long lAmount1/*[in]*/, 
                                                              long lAmount2/*[in]*/) = 0;
  // [9] This function initiates a utility transaction, e.g. Diagnostic Inquiry, Display KVC , etc.
  virtual HRESULT STDMETHODCALLTYPE StartUtility(long lUtilityType/*[in]*/, long lUniqueID/*[in]*/, 
                                                 long bRunInBackground/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE set_POSHardware(BSTR Param1/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_POSSoftwareName(BSTR Param1/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_POSSoftwareNumber(BSTR Param1/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_EnablePrintMerchantDetails(long Param1/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE POSConnecting(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                             BSTR bstrChequeBankBranch/*[in]*/, 
                                                             BSTR bstrChequeAccount/*[in]*/, 
                                                             long bRunInBackground/*[in]*/, 
                                                             long lAmount/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE SyncroPrint(BSTR bstrPrintData/*[in]*/) = 0; // [16]
  // [17] This function is used by POSIF to enquire a financial transaction in the EFTPOS Engine, e.g. Purchase, Refund, etc.
  virtual HRESULT STDMETHODCALLTYPE EnquireTransaction(long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ModuleDescription(void)
  {
    BSTR pbstrModuleDescription = 0;
    OLECHECK(this->get_ModuleDescription((BSTR*)&pbstrModuleDescription));
    return pbstrModuleDescription;
  }

  BSTR __fastcall get_ModuleName(void)
  {
    BSTR pbstrModuleName = 0;
    OLECHECK(this->get_ModuleName((BSTR*)&pbstrModuleName));
    return pbstrModuleName;
  }

  BSTR __fastcall get_ModuleVersion(void)
  {
    BSTR pbstrModuleVersion = 0;
    OLECHECK(this->get_ModuleVersion((BSTR*)&pbstrModuleVersion));
    return pbstrModuleVersion;
  }

  long __fastcall get_ResultCode(void)
  {
    long plResultCode;
    OLECHECK(this->get_ResultCode((long*)&plResultCode));
    return plResultCode;
  }

  BSTR __fastcall get_ResultText(void)
  {
    BSTR pbstrResultText = 0;
    OLECHECK(this->get_ResultText((BSTR*)&pbstrResultText));
    return pbstrResultText;
  }


  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  IPOSEvent
// Flags:     (4096) Dispatchable
// GUID:      {AC17F14F-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
template <class T>
class IPOSEventDispT : public TAutoDriver<IPOSEvent>
{
public:
  IPOSEventDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall EFTPOSStatusChange(Eft2000_tlb::EFTPOSStatusEnum eNewStatus/*[in]*/);
  void            __fastcall EndPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType/*[in]*/);
  void            __fastcall StartPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType/*[in]*/);
  void            __fastcall TransactionComplete(long lUniqueID/*[in]*/, long lResult/*[in]*/);

};
typedef IPOSEventDispT<IPOSEvent> IPOSEventDisp;

typedef TComInterface<IPOSProductData>  TCOMIPOSProductData;

// *********************************************************************//
// DispIntf:  IPOSProductData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E97AEB91-9B3C-11D5-85A9-00C04F078CAD}
// *********************************************************************//
template<class T>
class IPOSProductDataDispT : public TAutoDriver<IPOSProductData>
{
public:
  IPOSProductDataDispT(){}

  IPOSProductDataDispT(IPOSProductData *pintf)
  {
    TAutoDriver<IPOSProductData>::Bind(pintf, false);
  }

  IPOSProductDataDispT(IPOSProductDataPtr pintf)
  {
    TAutoDriver<IPOSProductData>::Bind(pintf, true);
  }

  IPOSProductDataDispT& operator=(IPOSProductData *pintf)
  {
    TAutoDriver<IPOSProductData>::Bind(pintf, false);
    return *this;
  }

  IPOSProductDataDispT& operator=(IPOSProductDataPtr pintf)
  {
    TAutoDriver<IPOSProductData>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_InputCustomerReferenceNumber(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerReferenceNumber(void);
  HRESULT         __fastcall set_InputCustomerReferenceNumber(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerIdentityNumber(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerIdentityNumber(void);
  HRESULT         __fastcall set_InputCustomerIdentityNumber(BSTR pVal/*[in]*/);
  HRESULT         __fastcall AddProductData(BSTR bstrProductCode/*[in]*/, long lQuantity/*[in]*/, 
                                            long lAmount/*[in]*/);
  HRESULT         __fastcall ClearAllProductData();

  __property   BSTR            InputCustomerReferenceNumber = {read = get_InputCustomerReferenceNumber, write = set_InputCustomerReferenceNumber};
  __property   BSTR            InputCustomerIdentityNumber = {read = get_InputCustomerIdentityNumber, write = set_InputCustomerIdentityNumber};
};
typedef IPOSProductDataDispT<IPOSProductData> IPOSProductDataDisp;

typedef TComInterface<IPOS>  TCOMIPOS;

// *********************************************************************//
// DispIntf:  IPOS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AC17F14D-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
template<class T>
class IPOSDispT : public TAutoDriver<IPOS>
{
public:
  IPOSDispT(){}

  IPOSDispT(IPOS *pintf)
  {
    TAutoDriver<IPOS>::Bind(pintf, false);
  }

  IPOSDispT(IPOSPtr pintf)
  {
    TAutoDriver<IPOS>::Bind(pintf, true);
  }

  IPOSDispT& operator=(IPOS *pintf)
  {
    TAutoDriver<IPOS>::Bind(pintf, false);
    return *this;
  }

  IPOSDispT& operator=(IPOSPtr pintf)
  {
    TAutoDriver<IPOS>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::ResultCodeEnum __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::AccountTypeEnum __fastcall get_AccountType(void);
  HRESULT         __fastcall get_CardPANData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CardPANData(void);
  HRESULT         __fastcall get_CardType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CardType(void);
  HRESULT         __fastcall get_DisplayDialogLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_DisplayDialogLeft(void);
  HRESULT         __fastcall set_DisplayDialogLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_DisplayDialogTop(long* pVal/*[out,retval]*/);
  long            __fastcall get_DisplayDialogTop(void);
  HRESULT         __fastcall set_DisplayDialogTop(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExpiryDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpiryDate(void);
  HRESULT         __fastcall get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack2Data(void);
  HRESULT         __fastcall set_InputCustomerTrack2Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerManualPAN(void);
  HRESULT         __fastcall set_InputCustomerManualPAN(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerExpiryDateMonth(void);
  HRESULT         __fastcall set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerExpiryDateYear(void);
  HRESULT         __fastcall set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack2Data(void);
  HRESULT         __fastcall set_InputMerchantTrack2Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SpecialResult(long* pVal/*[out,retval]*/);
  long            __fastcall get_SpecialResult(void);
  HRESULT         __fastcall ContinuePrinting();
  HRESULT         __fastcall GetUniqueID(long* lUniqueID/*[in,out]*/);
  HRESULT         __fastcall StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                                long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);
  HRESULT         __fastcall StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/
                                                       , long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/, 
                                                       long lAmount1/*[in]*/, long lAmount2/*[in]*/);
  HRESULT         __fastcall StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, 
                                          long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/);
  HRESULT         __fastcall get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack1Data(void);
  HRESULT         __fastcall set_InputCustomerTrack1Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack3Data(void);
  HRESULT         __fastcall set_InputCustomerTrack3Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack1Data(void);
  HRESULT         __fastcall set_InputMerchantTrack1Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack3Data(void);
  HRESULT         __fastcall set_InputMerchantTrack3Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_WantProgressBar(long* pVal/*[out,retval]*/);
  long            __fastcall get_WantProgressBar(void);
  HRESULT         __fastcall set_WantProgressBar(long pVal/*[in]*/);
  HRESULT         __fastcall set_POSHardware(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareNumber(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_EnablePrintMerchantDetails(long Param1/*[in]*/);

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   Eft2000_tlb::ResultCodeEnum ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   Eft2000_tlb::AccountTypeEnum AccountType = {read = get_AccountType};
  __property   BSTR            CardPANData = {read = get_CardPANData};
  __property   BSTR            CardType = {read = get_CardType};
  __property   long            DisplayDialogLeft = {read = get_DisplayDialogLeft, write = set_DisplayDialogLeft};
  __property   long            DisplayDialogTop = {read = get_DisplayDialogTop, write = set_DisplayDialogTop};
  __property   BSTR            ExpiryDate = {read = get_ExpiryDate};
  __property   BSTR            InputCustomerTrack2Data = {read = get_InputCustomerTrack2Data, write = set_InputCustomerTrack2Data};
  __property   BSTR            InputCustomerManualPAN = {read = get_InputCustomerManualPAN, write = set_InputCustomerManualPAN};
  __property   BSTR            InputCustomerExpiryDateMonth = {read = get_InputCustomerExpiryDateMonth, write = set_InputCustomerExpiryDateMonth};
  __property   BSTR            InputCustomerExpiryDateYear = {read = get_InputCustomerExpiryDateYear, write = set_InputCustomerExpiryDateYear};
  __property   BSTR            InputMerchantTrack2Data = {read = get_InputMerchantTrack2Data, write = set_InputMerchantTrack2Data};
  __property   long            SpecialResult = {read = get_SpecialResult};
  __property   BSTR            InputCustomerTrack1Data = {read = get_InputCustomerTrack1Data, write = set_InputCustomerTrack1Data};
  __property   BSTR            InputCustomerTrack3Data = {read = get_InputCustomerTrack3Data, write = set_InputCustomerTrack3Data};
  __property   BSTR            InputMerchantTrack1Data = {read = get_InputMerchantTrack1Data, write = set_InputMerchantTrack1Data};
  __property   BSTR            InputMerchantTrack3Data = {read = get_InputMerchantTrack3Data, write = set_InputMerchantTrack3Data};
  __property   long            WantProgressBar = {read = get_WantProgressBar, write = set_WantProgressBar};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};
};
typedef IPOSDispT<IPOS> IPOSDisp;

typedef TComInterface<IPOS2>  TCOMIPOS2;

// *********************************************************************//
// DispIntf:  IPOS2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D32AEA0-B997-11D4-B5C3-00C04F078DAE}
// *********************************************************************//
template<class T>
class IPOS2DispT : public TAutoDriver<IPOS2>
{
public:
  IPOS2DispT(){}

  IPOS2DispT(IPOS2 *pintf)
  {
    TAutoDriver<IPOS2>::Bind(pintf, false);
  }

  IPOS2DispT(IPOS2Ptr pintf)
  {
    TAutoDriver<IPOS2>::Bind(pintf, true);
  }

  IPOS2DispT& operator=(IPOS2 *pintf)
  {
    TAutoDriver<IPOS2>::Bind(pintf, false);
    return *this;
  }

  IPOS2DispT& operator=(IPOS2Ptr pintf)
  {
    TAutoDriver<IPOS2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_InputMotoType(Eft2000_tlb::MotoTransTypeEnum Param1/*[in]*/);
  HRESULT         __fastcall StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                      BSTR bstrChequeBankBranch/*[in]*/, 
                                                      BSTR bstrChequeAccount/*[in]*/, 
                                                      long bRunInBackground/*[in]*/, 
                                                      long lAmount/*[in]*/);
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::ResultCodeEnum __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::AccountTypeEnum __fastcall get_AccountType(void);
  HRESULT         __fastcall get_CardPANData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CardPANData(void);
  HRESULT         __fastcall get_CardType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CardType(void);
  HRESULT         __fastcall get_DisplayDialogLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_DisplayDialogLeft(void);
  HRESULT         __fastcall set_DisplayDialogLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_DisplayDialogTop(long* pVal/*[out,retval]*/);
  long            __fastcall get_DisplayDialogTop(void);
  HRESULT         __fastcall set_DisplayDialogTop(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExpiryDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpiryDate(void);
  HRESULT         __fastcall get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack2Data(void);
  HRESULT         __fastcall set_InputCustomerTrack2Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerManualPAN(void);
  HRESULT         __fastcall set_InputCustomerManualPAN(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerExpiryDateMonth(void);
  HRESULT         __fastcall set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerExpiryDateYear(void);
  HRESULT         __fastcall set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack2Data(void);
  HRESULT         __fastcall set_InputMerchantTrack2Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SpecialResult(long* pVal/*[out,retval]*/);
  long            __fastcall get_SpecialResult(void);
  HRESULT         __fastcall ContinuePrinting();
  HRESULT         __fastcall GetUniqueID(long* lUniqueID/*[in,out]*/);
  HRESULT         __fastcall StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                                long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);
  HRESULT         __fastcall StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/
                                                       , long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/, 
                                                       long lAmount1/*[in]*/, long lAmount2/*[in]*/);
  HRESULT         __fastcall StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, 
                                          long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/);
  HRESULT         __fastcall get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack1Data(void);
  HRESULT         __fastcall set_InputCustomerTrack1Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack3Data(void);
  HRESULT         __fastcall set_InputCustomerTrack3Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack1Data(void);
  HRESULT         __fastcall set_InputMerchantTrack1Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack3Data(void);
  HRESULT         __fastcall set_InputMerchantTrack3Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_WantProgressBar(long* pVal/*[out,retval]*/);
  long            __fastcall get_WantProgressBar(void);
  HRESULT         __fastcall set_WantProgressBar(long pVal/*[in]*/);
  HRESULT         __fastcall set_POSHardware(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareNumber(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_EnablePrintMerchantDetails(long Param1/*[in]*/);

  __property   Eft2000_tlb::MotoTransTypeEnum InputMotoType = {write = set_InputMotoType};

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   Eft2000_tlb::ResultCodeEnum ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   Eft2000_tlb::AccountTypeEnum AccountType = {read = get_AccountType};
  __property   BSTR            CardPANData = {read = get_CardPANData};
  __property   BSTR            CardType = {read = get_CardType};
  __property   long            DisplayDialogLeft = {read = get_DisplayDialogLeft, write = set_DisplayDialogLeft};
  __property   long            DisplayDialogTop = {read = get_DisplayDialogTop, write = set_DisplayDialogTop};
  __property   BSTR            ExpiryDate = {read = get_ExpiryDate};
  __property   BSTR            InputCustomerTrack2Data = {read = get_InputCustomerTrack2Data, write = set_InputCustomerTrack2Data};
  __property   BSTR            InputCustomerManualPAN = {read = get_InputCustomerManualPAN, write = set_InputCustomerManualPAN};
  __property   BSTR            InputCustomerExpiryDateMonth = {read = get_InputCustomerExpiryDateMonth, write = set_InputCustomerExpiryDateMonth};
  __property   BSTR            InputCustomerExpiryDateYear = {read = get_InputCustomerExpiryDateYear, write = set_InputCustomerExpiryDateYear};
  __property   BSTR            InputMerchantTrack2Data = {read = get_InputMerchantTrack2Data, write = set_InputMerchantTrack2Data};
  __property   long            SpecialResult = {read = get_SpecialResult};
  __property   BSTR            InputCustomerTrack1Data = {read = get_InputCustomerTrack1Data, write = set_InputCustomerTrack1Data};
  __property   BSTR            InputCustomerTrack3Data = {read = get_InputCustomerTrack3Data, write = set_InputCustomerTrack3Data};
  __property   BSTR            InputMerchantTrack1Data = {read = get_InputMerchantTrack1Data, write = set_InputMerchantTrack1Data};
  __property   BSTR            InputMerchantTrack3Data = {read = get_InputMerchantTrack3Data, write = set_InputMerchantTrack3Data};
  __property   long            WantProgressBar = {read = get_WantProgressBar, write = set_WantProgressBar};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};
};
typedef IPOS2DispT<IPOS2> IPOS2Disp;

typedef TComInterface<IPOS3>  TCOMIPOS3;

// *********************************************************************//
// DispIntf:  IPOS3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30CB4D32-3C6B-470A-93E2-4C99CE561846}
// *********************************************************************//
template<class T>
class IPOS3DispT : public TAutoDriver<IPOS3>
{
public:
  IPOS3DispT(){}

  IPOS3DispT(IPOS3 *pintf)
  {
    TAutoDriver<IPOS3>::Bind(pintf, false);
  }

  IPOS3DispT(IPOS3Ptr pintf)
  {
    TAutoDriver<IPOS3>::Bind(pintf, true);
  }

  IPOS3DispT& operator=(IPOS3 *pintf)
  {
    TAutoDriver<IPOS3>::Bind(pintf, false);
    return *this;
  }

  IPOS3DispT& operator=(IPOS3Ptr pintf)
  {
    TAutoDriver<IPOS3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ReceiptData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ReceiptData(void);
  HRESULT         __fastcall set_AcquirerType(Eft2000_tlb::AcquirerTypeEnum Param1/*[in]*/);
  HRESULT         __fastcall set_InputMotoType(Eft2000_tlb::MotoTransTypeEnum Param1/*[in]*/);
  HRESULT         __fastcall StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                      BSTR bstrChequeBankBranch/*[in]*/, 
                                                      BSTR bstrChequeAccount/*[in]*/, 
                                                      long bRunInBackground/*[in]*/, 
                                                      long lAmount/*[in]*/);
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::ResultCodeEnum __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::AccountTypeEnum __fastcall get_AccountType(void);
  HRESULT         __fastcall get_CardPANData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CardPANData(void);
  HRESULT         __fastcall get_CardType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CardType(void);
  HRESULT         __fastcall get_DisplayDialogLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_DisplayDialogLeft(void);
  HRESULT         __fastcall set_DisplayDialogLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_DisplayDialogTop(long* pVal/*[out,retval]*/);
  long            __fastcall get_DisplayDialogTop(void);
  HRESULT         __fastcall set_DisplayDialogTop(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExpiryDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpiryDate(void);
  HRESULT         __fastcall get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack2Data(void);
  HRESULT         __fastcall set_InputCustomerTrack2Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerManualPAN(void);
  HRESULT         __fastcall set_InputCustomerManualPAN(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerExpiryDateMonth(void);
  HRESULT         __fastcall set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerExpiryDateYear(void);
  HRESULT         __fastcall set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack2Data(void);
  HRESULT         __fastcall set_InputMerchantTrack2Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SpecialResult(long* pVal/*[out,retval]*/);
  long            __fastcall get_SpecialResult(void);
  HRESULT         __fastcall ContinuePrinting();
  HRESULT         __fastcall GetUniqueID(long* lUniqueID/*[in,out]*/);
  HRESULT         __fastcall StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                                long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);
  HRESULT         __fastcall StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/
                                                       , long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/, 
                                                       long lAmount1/*[in]*/, long lAmount2/*[in]*/);
  HRESULT         __fastcall StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, 
                                          long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/);
  HRESULT         __fastcall get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack1Data(void);
  HRESULT         __fastcall set_InputCustomerTrack1Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack3Data(void);
  HRESULT         __fastcall set_InputCustomerTrack3Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack1Data(void);
  HRESULT         __fastcall set_InputMerchantTrack1Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack3Data(void);
  HRESULT         __fastcall set_InputMerchantTrack3Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_WantProgressBar(long* pVal/*[out,retval]*/);
  long            __fastcall get_WantProgressBar(void);
  HRESULT         __fastcall set_WantProgressBar(long pVal/*[in]*/);
  HRESULT         __fastcall set_POSHardware(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareNumber(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_EnablePrintMerchantDetails(long Param1/*[in]*/);

  __property   BSTR            ReceiptData = {read = get_ReceiptData};
  __property   Eft2000_tlb::AcquirerTypeEnum AcquirerType = {write = set_AcquirerType};

  __property   Eft2000_tlb::MotoTransTypeEnum InputMotoType = {write = set_InputMotoType};

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   Eft2000_tlb::ResultCodeEnum ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   Eft2000_tlb::AccountTypeEnum AccountType = {read = get_AccountType};
  __property   BSTR            CardPANData = {read = get_CardPANData};
  __property   BSTR            CardType = {read = get_CardType};
  __property   long            DisplayDialogLeft = {read = get_DisplayDialogLeft, write = set_DisplayDialogLeft};
  __property   long            DisplayDialogTop = {read = get_DisplayDialogTop, write = set_DisplayDialogTop};
  __property   BSTR            ExpiryDate = {read = get_ExpiryDate};
  __property   BSTR            InputCustomerTrack2Data = {read = get_InputCustomerTrack2Data, write = set_InputCustomerTrack2Data};
  __property   BSTR            InputCustomerManualPAN = {read = get_InputCustomerManualPAN, write = set_InputCustomerManualPAN};
  __property   BSTR            InputCustomerExpiryDateMonth = {read = get_InputCustomerExpiryDateMonth, write = set_InputCustomerExpiryDateMonth};
  __property   BSTR            InputCustomerExpiryDateYear = {read = get_InputCustomerExpiryDateYear, write = set_InputCustomerExpiryDateYear};
  __property   BSTR            InputMerchantTrack2Data = {read = get_InputMerchantTrack2Data, write = set_InputMerchantTrack2Data};
  __property   long            SpecialResult = {read = get_SpecialResult};
  __property   BSTR            InputCustomerTrack1Data = {read = get_InputCustomerTrack1Data, write = set_InputCustomerTrack1Data};
  __property   BSTR            InputCustomerTrack3Data = {read = get_InputCustomerTrack3Data, write = set_InputCustomerTrack3Data};
  __property   BSTR            InputMerchantTrack1Data = {read = get_InputMerchantTrack1Data, write = set_InputMerchantTrack1Data};
  __property   BSTR            InputMerchantTrack3Data = {read = get_InputMerchantTrack3Data, write = set_InputMerchantTrack3Data};
  __property   long            WantProgressBar = {read = get_WantProgressBar, write = set_WantProgressBar};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};
};
typedef IPOS3DispT<IPOS3> IPOS3Disp;

// *********************************************************************//
// SmartIntf: TCOMIPOS4
// Interface: IPOS4
// *********************************************************************//
template <class T /* IPOS4 */ >
class TCOMIPOS4T : public TComInterface<IPOS4>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPOS4T() {}
  TCOMIPOS4T(IPOS4 *intf, bool addRef = false) : TComInterface<IPOS4>(intf, addRef) {}
  TCOMIPOS4T(const TCOMIPOS4T& src) : TComInterface<IPOS4>(src) {}
  TCOMIPOS4T& operator=(const TCOMIPOS4T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Stan(long* pVal/*[out,retval]*/);
  long            __fastcall get_Stan(void);
  HRESULT         __fastcall get_Status(long* pVal/*[out,retval]*/);
  long            __fastcall get_Status(void);
  HRESULT         __fastcall SyncroPrint(BSTR PrintData/*[in]*/);
  HRESULT         __fastcall EnquireTransaction(long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);

  __property   long            Stan = {read = get_Stan};
  __property   long            Status = {read = get_Status};
};
typedef TCOMIPOS4T<IPOS4> TCOMIPOS4;

// *********************************************************************//
// DispIntf:  IPOS4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D7E5A7E2-E648-4F26-B664-FFFE3AD447AB}
// *********************************************************************//
template<class T>
class IPOS4DispT : public TAutoDriver<IPOS4>
{
public:
  IPOS4DispT(){}

  IPOS4DispT(IPOS4 *pintf)
  {
    TAutoDriver<IPOS4>::Bind(pintf, false);
  }

  IPOS4DispT(IPOS4Ptr pintf)
  {
    TAutoDriver<IPOS4>::Bind(pintf, true);
  }

  IPOS4DispT& operator=(IPOS4 *pintf)
  {
    TAutoDriver<IPOS4>::Bind(pintf, false);
    return *this;
  }

  IPOS4DispT& operator=(IPOS4Ptr pintf)
  {
    TAutoDriver<IPOS4>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_POSInterface));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_POSInterface);
  }

  HRESULT         __fastcall get_Stan(long* pVal/*[out,retval]*/);
  long            __fastcall get_Stan(void);
  HRESULT         __fastcall get_Status(long* pVal/*[out,retval]*/);
  long            __fastcall get_Status(void);
  HRESULT         __fastcall SyncroPrint(BSTR PrintData/*[in]*/);
  HRESULT         __fastcall EnquireTransaction(long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);
  HRESULT         __fastcall get_ReceiptData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ReceiptData(void);
  HRESULT         __fastcall set_AcquirerType(Eft2000_tlb::AcquirerTypeEnum Param1/*[in]*/);
  HRESULT         __fastcall set_InputMotoType(Eft2000_tlb::MotoTransTypeEnum Param1/*[in]*/);
  HRESULT         __fastcall StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                      BSTR bstrChequeBankBranch/*[in]*/, 
                                                      BSTR bstrChequeAccount/*[in]*/, 
                                                      long bRunInBackground/*[in]*/, 
                                                      long lAmount/*[in]*/);
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::ResultCodeEnum __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::AccountTypeEnum __fastcall get_AccountType(void);
  HRESULT         __fastcall get_CardPANData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CardPANData(void);
  HRESULT         __fastcall get_CardType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CardType(void);
  HRESULT         __fastcall get_DisplayDialogLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_DisplayDialogLeft(void);
  HRESULT         __fastcall set_DisplayDialogLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_DisplayDialogTop(long* pVal/*[out,retval]*/);
  long            __fastcall get_DisplayDialogTop(void);
  HRESULT         __fastcall set_DisplayDialogTop(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExpiryDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpiryDate(void);
  HRESULT         __fastcall get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack2Data(void);
  HRESULT         __fastcall set_InputCustomerTrack2Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerManualPAN(void);
  HRESULT         __fastcall set_InputCustomerManualPAN(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerExpiryDateMonth(void);
  HRESULT         __fastcall set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerExpiryDateYear(void);
  HRESULT         __fastcall set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack2Data(void);
  HRESULT         __fastcall set_InputMerchantTrack2Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SpecialResult(long* pVal/*[out,retval]*/);
  long            __fastcall get_SpecialResult(void);
  HRESULT         __fastcall ContinuePrinting();
  HRESULT         __fastcall GetUniqueID(long* lUniqueID/*[in,out]*/);
  HRESULT         __fastcall StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                                long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);
  HRESULT         __fastcall StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/
                                                       , long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/, 
                                                       long lAmount1/*[in]*/, long lAmount2/*[in]*/);
  HRESULT         __fastcall StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, 
                                          long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/);
  HRESULT         __fastcall get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack1Data(void);
  HRESULT         __fastcall set_InputCustomerTrack1Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputCustomerTrack3Data(void);
  HRESULT         __fastcall set_InputCustomerTrack3Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack1Data(void);
  HRESULT         __fastcall set_InputMerchantTrack1Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InputMerchantTrack3Data(void);
  HRESULT         __fastcall set_InputMerchantTrack3Data(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_WantProgressBar(long* pVal/*[out,retval]*/);
  long            __fastcall get_WantProgressBar(void);
  HRESULT         __fastcall set_WantProgressBar(long pVal/*[in]*/);
  HRESULT         __fastcall set_POSHardware(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareNumber(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_EnablePrintMerchantDetails(long Param1/*[in]*/);

  __property   long            Stan = {read = get_Stan};
  __property   long            Status = {read = get_Status};

  __property   BSTR            ReceiptData = {read = get_ReceiptData};
  __property   Eft2000_tlb::AcquirerTypeEnum AcquirerType = {write = set_AcquirerType};

  __property   Eft2000_tlb::MotoTransTypeEnum InputMotoType = {write = set_InputMotoType};

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   Eft2000_tlb::ResultCodeEnum ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   Eft2000_tlb::AccountTypeEnum AccountType = {read = get_AccountType};
  __property   BSTR            CardPANData = {read = get_CardPANData};
  __property   BSTR            CardType = {read = get_CardType};
  __property   long            DisplayDialogLeft = {read = get_DisplayDialogLeft, write = set_DisplayDialogLeft};
  __property   long            DisplayDialogTop = {read = get_DisplayDialogTop, write = set_DisplayDialogTop};
  __property   BSTR            ExpiryDate = {read = get_ExpiryDate};
  __property   BSTR            InputCustomerTrack2Data = {read = get_InputCustomerTrack2Data, write = set_InputCustomerTrack2Data};
  __property   BSTR            InputCustomerManualPAN = {read = get_InputCustomerManualPAN, write = set_InputCustomerManualPAN};
  __property   BSTR            InputCustomerExpiryDateMonth = {read = get_InputCustomerExpiryDateMonth, write = set_InputCustomerExpiryDateMonth};
  __property   BSTR            InputCustomerExpiryDateYear = {read = get_InputCustomerExpiryDateYear, write = set_InputCustomerExpiryDateYear};
  __property   BSTR            InputMerchantTrack2Data = {read = get_InputMerchantTrack2Data, write = set_InputMerchantTrack2Data};
  __property   long            SpecialResult = {read = get_SpecialResult};
  __property   BSTR            InputCustomerTrack1Data = {read = get_InputCustomerTrack1Data, write = set_InputCustomerTrack1Data};
  __property   BSTR            InputCustomerTrack3Data = {read = get_InputCustomerTrack3Data, write = set_InputCustomerTrack3Data};
  __property   BSTR            InputMerchantTrack1Data = {read = get_InputMerchantTrack1Data, write = set_InputMerchantTrack1Data};
  __property   BSTR            InputMerchantTrack3Data = {read = get_InputMerchantTrack3Data, write = set_InputMerchantTrack3Data};
  __property   long            WantProgressBar = {read = get_WantProgressBar, write = set_WantProgressBar};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};
};
typedef IPOS4DispT<IPOS4> IPOS4Disp;

// *********************************************************************//
// DispIntf:  IEFTEvent
// Flags:     (4096) Dispatchable
// GUID:      {AC17F152-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
template <class T>
class IEFTEventDispT : public TAutoDriver<IEFTEvent>
{
public:
  IEFTEventDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall DialogDismissed();

};
typedef IEFTEventDispT<IEFTEvent> IEFTEventDisp;

typedef TComInterface<IDialogData>  TCOMIDialogData;

typedef TComInterface<IEFTProductData>  TCOMIEFTProductData;

typedef TComInterface<IEFT>  TCOMIEFT;

// *********************************************************************//
// SmartIntf: TCOMIEFT2
// Interface: IEFT2
// *********************************************************************//
template <class T /* IEFT2 */ >
class TCOMIEFT2T : public TComInterface<IEFT2>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIEFT2T() {}
  TCOMIEFT2T(IEFT2 *intf, bool addRef = false) : TComInterface<IEFT2>(intf, addRef) {}
  TCOMIEFT2T(const TCOMIEFT2T& src) : TComInterface<IEFT2>(src) {}
  TCOMIEFT2T& operator=(const TCOMIEFT2T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DialogMOTOType(Eft2000_tlb::MotoTransTypeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::MotoTransTypeEnum __fastcall get_DialogMOTOType(void);
  HRESULT         __fastcall ShowMOTODialog(Eft2000_tlb::MotoTransTypeEnum eMOTOTypesAllowed/*[in]*/, 
                                            Eft2000_tlb::MotoTransTypeEnum eDefaultType/*[in]*/);
  HRESULT         __fastcall get_InputMotoType(Eft2000_tlb::MotoTransTypeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::MotoTransTypeEnum __fastcall get_InputMotoType(void);
  HRESULT         __fastcall ShowAcquirerSelectionDialog(void);
  HRESULT         __fastcall get_AcquirerType(Eft2000_tlb::AcquirerTypeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::AcquirerTypeEnum __fastcall get_AcquirerType(void);
  HRESULT         __fastcall get_DialogAcquirerType(Eft2000_tlb::AcquirerTypeEnum* pVal/*[out,retval]*/);
  Eft2000_tlb::AcquirerTypeEnum __fastcall get_DialogAcquirerType(void);
  HRESULT         __fastcall ShowChequeDialog(BSTR bstrTitle/*[in]*/, BSTR bstrPOSPromptText/*[in]*/);
  HRESULT         __fastcall get_DialogChequeBankBranch(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DialogChequeBankBranch(void);
  HRESULT         __fastcall get_DialogChequeAccount(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DialogChequeAccount(void);
  HRESULT         __fastcall get_DialogChequeSerialNumber(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DialogChequeSerialNumber(void);
  HRESULT         __fastcall set_ReceiptData(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_Stan(long Param1/*[in]*/);
  HRESULT         __fastcall set_Status(long Param1/*[in]*/);

  __property   Eft2000_tlb::MotoTransTypeEnum DialogMOTOType = {read = get_DialogMOTOType};
  __property   Eft2000_tlb::MotoTransTypeEnum InputMotoType = {read = get_InputMotoType};
  __property   Eft2000_tlb::AcquirerTypeEnum AcquirerType = {read = get_AcquirerType};
  __property   Eft2000_tlb::AcquirerTypeEnum DialogAcquirerType = {read = get_DialogAcquirerType};
  __property   BSTR            DialogChequeBankBranch = {read = get_DialogChequeBankBranch};
  __property   BSTR            DialogChequeAccount = {read = get_DialogChequeAccount};
  __property   BSTR            DialogChequeSerialNumber = {read = get_DialogChequeSerialNumber};
  __property   BSTR            ReceiptData = {write = set_ReceiptData};
  __property   long            Stan = {write = set_Stan};
  __property   long            Status = {write = set_Status};
};
typedef TCOMIEFT2T<IEFT2> TCOMIEFT2;

typedef TComInterface<IEFTIF>  TCOMIEFTIF;

// *********************************************************************//
// DispIntf:  IEFTIF
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E35B8937-66C9-11D3-A06A-0008C7BC6FEA}
// *********************************************************************//
template<class T>
class IEFTIFDispT : public TAutoDriver<IEFTIF>
{
public:
  IEFTIFDispT(){}

  IEFTIFDispT(IEFTIF *pintf)
  {
    TAutoDriver<IEFTIF>::Bind(pintf, false);
  }

  IEFTIFDispT(IEFTIFPtr pintf)
  {
    TAutoDriver<IEFTIF>::Bind(pintf, true);
  }

  IEFTIFDispT& operator=(IEFTIF *pintf)
  {
    TAutoDriver<IEFTIF>::Bind(pintf, false);
    return *this;
  }

  IEFTIFDispT& operator=(IEFTIFPtr pintf)
  {
    TAutoDriver<IEFTIF>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ModuleDescription(BSTR* pbstrModuleDescription/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pbstrModuleName/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pbstrModuleVersion/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* plResultCode/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pbstrResultText/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall Startup();
  HRESULT         __fastcall StartAdminFunction(long lAdminType/*[in]*/, long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);
  HRESULT         __fastcall StartFinancialTransaction(long lTransactionType/*[in]*/, 
                                                       long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/, 
                                                       long lAmount1/*[in]*/, long lAmount2/*[in]*/);
  HRESULT         __fastcall StartUtility(long lUtilityType/*[in]*/, long lUniqueID/*[in]*/, 
                                          long bRunInBackground/*[in]*/);
  HRESULT         __fastcall set_POSHardware(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareNumber(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_EnablePrintMerchantDetails(long Param1/*[in]*/);
  HRESULT         __fastcall POSConnecting();
  HRESULT         __fastcall StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                      BSTR bstrChequeBankBranch/*[in]*/, 
                                                      BSTR bstrChequeAccount/*[in]*/, 
                                                      long bRunInBackground/*[in]*/, 
                                                      long lAmount/*[in]*/);
  HRESULT         __fastcall SyncroPrint(BSTR bstrPrintData/*[in]*/);
  HRESULT         __fastcall EnquireTransaction(long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};
};
typedef IEFTIFDispT<IEFTIF> IEFTIFDisp;

// *********************************************************************//
// DispIntf:  IPOSEvent
// Flags:     (4096) Dispatchable
// GUID:      {AC17F14F-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
template <class T> void __fastcall
IPOSEventDispT<T>::EFTPOSStatusChange(Eft2000_tlb::EFTPOSStatusEnum eNewStatus/*[in]*/)
{
  _TDispID _dispid(/* EFTPOSStatusChange */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)eNewStatus /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IPOSEventDispT<T>::EndPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType/*[in]*/)
{
  _TDispID _dispid(/* EndPrintBanner */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)eReceiptType /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IPOSEventDispT<T>::StartPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType/*[in]*/)
{
  _TDispID _dispid(/* StartPrintBanner */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (int)eReceiptType /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IPOSEventDispT<T>::TransactionComplete(long lUniqueID/*[in]*/, long lResult/*[in]*/)
{
  _TDispID _dispid(/* TransactionComplete */ DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = lUniqueID /*[VT_I4:0]*/;
  _args[2] = lResult /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IPOSProductData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E97AEB91-9B3C-11D5-85A9-00C04F078CAD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPOSProductDataDispT<T>::get_InputCustomerReferenceNumber(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerReferenceNumber"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSProductDataDispT<T>::get_InputCustomerReferenceNumber(void)
{
  BSTR pVal;
  this->get_InputCustomerReferenceNumber((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSProductDataDispT<T>::set_InputCustomerReferenceNumber(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerReferenceNumber"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSProductDataDispT<T>::get_InputCustomerIdentityNumber(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerIdentityNumber"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSProductDataDispT<T>::get_InputCustomerIdentityNumber(void)
{
  BSTR pVal;
  this->get_InputCustomerIdentityNumber((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSProductDataDispT<T>::set_InputCustomerIdentityNumber(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerIdentityNumber"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSProductDataDispT<T>::AddProductData(BSTR bstrProductCode/*[in]*/, long lQuantity/*[in]*/, 
                                        long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddProductData"), DISPID(3));
  TAutoArgs<3> _args;
  _args[1] = bstrProductCode /*[VT_BSTR:0]*/;
  _args[2] = lQuantity /*[VT_I4:0]*/;
  _args[3] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSProductDataDispT<T>::ClearAllProductData()
{
  _TDispID _dispid(*this, OLETEXT("ClearAllProductData"), DISPID(4));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IPOS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AC17F14D-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPOSDispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Eft2000_tlb::ResultCodeEnum __fastcall
IPOSDispT<T>::get_ResultCode(void)
{
  Eft2000_tlb::ResultCodeEnum pVal;
  this->get_ResultCode((Eft2000_tlb::ResultCodeEnum*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Eft2000_tlb::AccountTypeEnum __fastcall
IPOSDispT<T>::get_AccountType(void)
{
  Eft2000_tlb::AccountTypeEnum pVal;
  this->get_AccountType((Eft2000_tlb::AccountTypeEnum*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_CardPANData(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CardPANData"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_CardPANData(void)
{
  BSTR pVal;
  this->get_CardPANData((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_CardType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CardType"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_CardType(void)
{
  BSTR pVal;
  this->get_CardType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_DisplayDialogLeft(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogLeft"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOSDispT<T>::get_DisplayDialogLeft(void)
{
  long pVal;
  this->get_DisplayDialogLeft((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_DisplayDialogLeft(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogLeft"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_DisplayDialogTop(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogTop"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOSDispT<T>::get_DisplayDialogTop(void)
{
  long pVal;
  this->get_DisplayDialogTop((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_DisplayDialogTop(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogTop"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_ExpiryDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpiryDate"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_ExpiryDate(void)
{
  BSTR pVal;
  this->get_ExpiryDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack2Data"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputCustomerTrack2Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputCustomerTrack2Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack2Data"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerManualPAN"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputCustomerManualPAN(void)
{
  BSTR pVal;
  this->get_InputCustomerManualPAN((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputCustomerManualPAN(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerManualPAN"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateMonth"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputCustomerExpiryDateMonth(void)
{
  BSTR pVal;
  this->get_InputCustomerExpiryDateMonth((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateMonth"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateYear"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputCustomerExpiryDateYear(void)
{
  BSTR pVal;
  this->get_InputCustomerExpiryDateYear((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateYear"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack2Data"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputMerchantTrack2Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputMerchantTrack2Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack2Data"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_SpecialResult(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialResult"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOSDispT<T>::get_SpecialResult(void)
{
  long pVal;
  this->get_SpecialResult((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::ContinuePrinting()
{
  _TDispID _dispid(*this, OLETEXT("ContinuePrinting"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::GetUniqueID(long* lUniqueID/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetUniqueID"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = lUniqueID /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                 long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartAdminFunction"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)eAdminType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/, 
                                        long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/, 
                                        long lAmount1/*[in]*/, long lAmount2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartFinancialTransaction"), DISPID(21));
  TAutoArgs<5> _args;
  _args[1] = (int)eFinancialType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  _args[4] = lAmount1 /*[VT_I4:0]*/;
  _args[5] = lAmount2 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, long lUniqueID/*[in]*/
                           , long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartUtility"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = (int)eUtilityType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack1Data"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputCustomerTrack1Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputCustomerTrack1Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack1Data"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack3Data"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputCustomerTrack3Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputCustomerTrack3Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack3Data"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack1Data"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputMerchantTrack1Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputMerchantTrack1Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack1Data"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack3Data"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOSDispT<T>::get_InputMerchantTrack3Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_InputMerchantTrack3Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack3Data"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::get_WantProgressBar(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WantProgressBar"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOSDispT<T>::get_WantProgressBar(void)
{
  long pVal;
  this->get_WantProgressBar((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_WantProgressBar(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WantProgressBar"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_POSHardware(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSHardware"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_POSSoftwareName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareName"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_POSSoftwareNumber(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareNumber"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOSDispT<T>::set_EnablePrintMerchantDetails(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePrintMerchantDetails"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IPOS2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D32AEA0-B997-11D4-B5C3-00C04F078DAE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputMotoType(Eft2000_tlb::MotoTransTypeEnum Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMotoType"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                        BSTR bstrChequeBankBranch/*[in]*/, 
                                        BSTR bstrChequeAccount/*[in]*/, 
                                        long bRunInBackground/*[in]*/, long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartChequeAuthorisation"), DISPID(33));
  TAutoArgs<5> _args;
  _args[1] = bstrChequeSerialNumber /*[VT_BSTR:0]*/;
  _args[2] = bstrChequeBankBranch /*[VT_BSTR:0]*/;
  _args[3] = bstrChequeAccount /*[VT_BSTR:0]*/;
  _args[4] = bRunInBackground /*[VT_I4:0]*/;
  _args[5] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Eft2000_tlb::ResultCodeEnum __fastcall
IPOS2DispT<T>::get_ResultCode(void)
{
  Eft2000_tlb::ResultCodeEnum pVal;
  this->get_ResultCode((Eft2000_tlb::ResultCodeEnum*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Eft2000_tlb::AccountTypeEnum __fastcall
IPOS2DispT<T>::get_AccountType(void)
{
  Eft2000_tlb::AccountTypeEnum pVal;
  this->get_AccountType((Eft2000_tlb::AccountTypeEnum*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_CardPANData(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CardPANData"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_CardPANData(void)
{
  BSTR pVal;
  this->get_CardPANData((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_CardType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CardType"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_CardType(void)
{
  BSTR pVal;
  this->get_CardType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_DisplayDialogLeft(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogLeft"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS2DispT<T>::get_DisplayDialogLeft(void)
{
  long pVal;
  this->get_DisplayDialogLeft((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_DisplayDialogLeft(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogLeft"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_DisplayDialogTop(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogTop"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS2DispT<T>::get_DisplayDialogTop(void)
{
  long pVal;
  this->get_DisplayDialogTop((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_DisplayDialogTop(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogTop"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_ExpiryDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpiryDate"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_ExpiryDate(void)
{
  BSTR pVal;
  this->get_ExpiryDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack2Data"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputCustomerTrack2Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputCustomerTrack2Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack2Data"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerManualPAN"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputCustomerManualPAN(void)
{
  BSTR pVal;
  this->get_InputCustomerManualPAN((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputCustomerManualPAN(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerManualPAN"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateMonth"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputCustomerExpiryDateMonth(void)
{
  BSTR pVal;
  this->get_InputCustomerExpiryDateMonth((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateMonth"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateYear"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputCustomerExpiryDateYear(void)
{
  BSTR pVal;
  this->get_InputCustomerExpiryDateYear((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateYear"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack2Data"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputMerchantTrack2Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputMerchantTrack2Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack2Data"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_SpecialResult(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialResult"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS2DispT<T>::get_SpecialResult(void)
{
  long pVal;
  this->get_SpecialResult((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::ContinuePrinting()
{
  _TDispID _dispid(*this, OLETEXT("ContinuePrinting"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::GetUniqueID(long* lUniqueID/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetUniqueID"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = lUniqueID /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                  long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartAdminFunction"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)eAdminType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/, 
                                         long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/, 
                                         long lAmount1/*[in]*/, long lAmount2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartFinancialTransaction"), DISPID(21));
  TAutoArgs<5> _args;
  _args[1] = (int)eFinancialType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  _args[4] = lAmount1 /*[VT_I4:0]*/;
  _args[5] = lAmount2 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, 
                            long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartUtility"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = (int)eUtilityType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack1Data"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputCustomerTrack1Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputCustomerTrack1Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack1Data"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack3Data"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputCustomerTrack3Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputCustomerTrack3Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack3Data"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack1Data"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputMerchantTrack1Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputMerchantTrack1Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack1Data"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack3Data"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS2DispT<T>::get_InputMerchantTrack3Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_InputMerchantTrack3Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack3Data"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::get_WantProgressBar(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WantProgressBar"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS2DispT<T>::get_WantProgressBar(void)
{
  long pVal;
  this->get_WantProgressBar((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_WantProgressBar(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WantProgressBar"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_POSHardware(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSHardware"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_POSSoftwareName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareName"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_POSSoftwareNumber(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareNumber"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS2DispT<T>::set_EnablePrintMerchantDetails(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePrintMerchantDetails"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IPOS3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30CB4D32-3C6B-470A-93E2-4C99CE561846}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_ReceiptData(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceiptData"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_ReceiptData(void)
{
  BSTR pVal;
  this->get_ReceiptData((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_AcquirerType(Eft2000_tlb::AcquirerTypeEnum Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcquirerType"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputMotoType(Eft2000_tlb::MotoTransTypeEnum Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMotoType"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                        BSTR bstrChequeBankBranch/*[in]*/, 
                                        BSTR bstrChequeAccount/*[in]*/, 
                                        long bRunInBackground/*[in]*/, long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartChequeAuthorisation"), DISPID(33));
  TAutoArgs<5> _args;
  _args[1] = bstrChequeSerialNumber /*[VT_BSTR:0]*/;
  _args[2] = bstrChequeBankBranch /*[VT_BSTR:0]*/;
  _args[3] = bstrChequeAccount /*[VT_BSTR:0]*/;
  _args[4] = bRunInBackground /*[VT_I4:0]*/;
  _args[5] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Eft2000_tlb::ResultCodeEnum __fastcall
IPOS3DispT<T>::get_ResultCode(void)
{
  Eft2000_tlb::ResultCodeEnum pVal;
  this->get_ResultCode((Eft2000_tlb::ResultCodeEnum*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Eft2000_tlb::AccountTypeEnum __fastcall
IPOS3DispT<T>::get_AccountType(void)
{
  Eft2000_tlb::AccountTypeEnum pVal;
  this->get_AccountType((Eft2000_tlb::AccountTypeEnum*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_CardPANData(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CardPANData"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_CardPANData(void)
{
  BSTR pVal;
  this->get_CardPANData((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_CardType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CardType"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_CardType(void)
{
  BSTR pVal;
  this->get_CardType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_DisplayDialogLeft(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogLeft"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS3DispT<T>::get_DisplayDialogLeft(void)
{
  long pVal;
  this->get_DisplayDialogLeft((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_DisplayDialogLeft(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogLeft"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_DisplayDialogTop(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogTop"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS3DispT<T>::get_DisplayDialogTop(void)
{
  long pVal;
  this->get_DisplayDialogTop((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_DisplayDialogTop(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogTop"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_ExpiryDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpiryDate"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_ExpiryDate(void)
{
  BSTR pVal;
  this->get_ExpiryDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack2Data"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputCustomerTrack2Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputCustomerTrack2Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack2Data"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerManualPAN"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputCustomerManualPAN(void)
{
  BSTR pVal;
  this->get_InputCustomerManualPAN((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputCustomerManualPAN(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerManualPAN"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateMonth"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputCustomerExpiryDateMonth(void)
{
  BSTR pVal;
  this->get_InputCustomerExpiryDateMonth((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateMonth"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateYear"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputCustomerExpiryDateYear(void)
{
  BSTR pVal;
  this->get_InputCustomerExpiryDateYear((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateYear"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack2Data"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputMerchantTrack2Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputMerchantTrack2Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack2Data"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_SpecialResult(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialResult"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS3DispT<T>::get_SpecialResult(void)
{
  long pVal;
  this->get_SpecialResult((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::ContinuePrinting()
{
  _TDispID _dispid(*this, OLETEXT("ContinuePrinting"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::GetUniqueID(long* lUniqueID/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetUniqueID"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = lUniqueID /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                  long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartAdminFunction"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)eAdminType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/, 
                                         long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/, 
                                         long lAmount1/*[in]*/, long lAmount2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartFinancialTransaction"), DISPID(21));
  TAutoArgs<5> _args;
  _args[1] = (int)eFinancialType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  _args[4] = lAmount1 /*[VT_I4:0]*/;
  _args[5] = lAmount2 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, 
                            long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartUtility"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = (int)eUtilityType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack1Data"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputCustomerTrack1Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputCustomerTrack1Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack1Data"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack3Data"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputCustomerTrack3Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputCustomerTrack3Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack3Data"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack1Data"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputMerchantTrack1Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputMerchantTrack1Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack1Data"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack3Data"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS3DispT<T>::get_InputMerchantTrack3Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_InputMerchantTrack3Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack3Data"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::get_WantProgressBar(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WantProgressBar"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS3DispT<T>::get_WantProgressBar(void)
{
  long pVal;
  this->get_WantProgressBar((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_WantProgressBar(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WantProgressBar"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_POSHardware(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSHardware"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_POSSoftwareName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareName"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_POSSoftwareNumber(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareNumber"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS3DispT<T>::set_EnablePrintMerchantDetails(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePrintMerchantDetails"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPOS4
// Interface: IPOS4
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPOS4T<T>::get_Stan(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Stan(pVal);
}

template <class T> long __fastcall
TCOMIPOS4T<T>::get_Stan(void)
{
  long pVal;
  OLECHECK(this->get_Stan((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPOS4T<T>::get_Status(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> long __fastcall
TCOMIPOS4T<T>::get_Status(void)
{
  long pVal;
  OLECHECK(this->get_Status((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPOS4T<T>::SyncroPrint(BSTR PrintData/*[in]*/)
{
  return (*this)->SyncroPrint(PrintData);
}

template <class T> HRESULT __fastcall
TCOMIPOS4T<T>::EnquireTransaction(long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  return (*this)->EnquireTransaction(lUniqueID, bRunInBackground);
}

// *********************************************************************//
// DispIntf:  IPOS4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D7E5A7E2-E648-4F26-B664-FFFE3AD447AB}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_Stan(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Stan"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS4DispT<T>::get_Stan(void)
{
  long pVal;
  this->get_Stan((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_Status(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS4DispT<T>::get_Status(void)
{
  long pVal;
  this->get_Status((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::SyncroPrint(BSTR PrintData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SyncroPrint"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = PrintData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::EnquireTransaction(long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnquireTransaction"), DISPID(39));
  TAutoArgs<2> _args;
  _args[1] = lUniqueID /*[VT_I4:0]*/;
  _args[2] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_ReceiptData(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceiptData"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_ReceiptData(void)
{
  BSTR pVal;
  this->get_ReceiptData((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_AcquirerType(Eft2000_tlb::AcquirerTypeEnum Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcquirerType"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputMotoType(Eft2000_tlb::MotoTransTypeEnum Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMotoType"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                        BSTR bstrChequeBankBranch/*[in]*/, 
                                        BSTR bstrChequeAccount/*[in]*/, 
                                        long bRunInBackground/*[in]*/, long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartChequeAuthorisation"), DISPID(33));
  TAutoArgs<5> _args;
  _args[1] = bstrChequeSerialNumber /*[VT_BSTR:0]*/;
  _args[2] = bstrChequeBankBranch /*[VT_BSTR:0]*/;
  _args[3] = bstrChequeAccount /*[VT_BSTR:0]*/;
  _args[4] = bRunInBackground /*[VT_I4:0]*/;
  _args[5] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_ResultCode(Eft2000_tlb::ResultCodeEnum* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Eft2000_tlb::ResultCodeEnum __fastcall
IPOS4DispT<T>::get_ResultCode(void)
{
  Eft2000_tlb::ResultCodeEnum pVal;
  this->get_ResultCode((Eft2000_tlb::ResultCodeEnum*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_AccountType(Eft2000_tlb::AccountTypeEnum* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Eft2000_tlb::AccountTypeEnum __fastcall
IPOS4DispT<T>::get_AccountType(void)
{
  Eft2000_tlb::AccountTypeEnum pVal;
  this->get_AccountType((Eft2000_tlb::AccountTypeEnum*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_CardPANData(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CardPANData"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_CardPANData(void)
{
  BSTR pVal;
  this->get_CardPANData((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_CardType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CardType"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_CardType(void)
{
  BSTR pVal;
  this->get_CardType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_DisplayDialogLeft(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogLeft"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS4DispT<T>::get_DisplayDialogLeft(void)
{
  long pVal;
  this->get_DisplayDialogLeft((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_DisplayDialogLeft(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogLeft"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_DisplayDialogTop(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogTop"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS4DispT<T>::get_DisplayDialogTop(void)
{
  long pVal;
  this->get_DisplayDialogTop((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_DisplayDialogTop(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDialogTop"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_ExpiryDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpiryDate"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_ExpiryDate(void)
{
  BSTR pVal;
  this->get_ExpiryDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputCustomerTrack2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack2Data"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputCustomerTrack2Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputCustomerTrack2Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack2Data"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputCustomerManualPAN(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerManualPAN"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputCustomerManualPAN(void)
{
  BSTR pVal;
  this->get_InputCustomerManualPAN((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputCustomerManualPAN(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerManualPAN"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputCustomerExpiryDateMonth(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateMonth"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputCustomerExpiryDateMonth(void)
{
  BSTR pVal;
  this->get_InputCustomerExpiryDateMonth((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputCustomerExpiryDateMonth(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateMonth"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputCustomerExpiryDateYear(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateYear"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputCustomerExpiryDateYear(void)
{
  BSTR pVal;
  this->get_InputCustomerExpiryDateYear((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputCustomerExpiryDateYear(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerExpiryDateYear"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputMerchantTrack2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack2Data"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputMerchantTrack2Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputMerchantTrack2Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack2Data"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_SpecialResult(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialResult"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS4DispT<T>::get_SpecialResult(void)
{
  long pVal;
  this->get_SpecialResult((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::ContinuePrinting()
{
  _TDispID _dispid(*this, OLETEXT("ContinuePrinting"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::GetUniqueID(long* lUniqueID/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetUniqueID"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = lUniqueID /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::StartAdminFunction(Eft2000_tlb::AdminTypeEnum eAdminType/*[in]*/, 
                                  long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartAdminFunction"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)eAdminType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::StartFinancialTransaction(Eft2000_tlb::FinancialTypeEnum eFinancialType/*[in]*/, 
                                         long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/, 
                                         long lAmount1/*[in]*/, long lAmount2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartFinancialTransaction"), DISPID(21));
  TAutoArgs<5> _args;
  _args[1] = (int)eFinancialType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  _args[4] = lAmount1 /*[VT_I4:0]*/;
  _args[5] = lAmount2 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::StartUtility(Eft2000_tlb::UtilityTypeEnum eUtilityType/*[in]*/, 
                            long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartUtility"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = (int)eUtilityType /*[VT_USERDEFINED:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputCustomerTrack1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack1Data"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputCustomerTrack1Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputCustomerTrack1Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack1Data"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputCustomerTrack3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack3Data"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputCustomerTrack3Data(void)
{
  BSTR pVal;
  this->get_InputCustomerTrack3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputCustomerTrack3Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputCustomerTrack3Data"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputMerchantTrack1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack1Data"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputMerchantTrack1Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputMerchantTrack1Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack1Data"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_InputMerchantTrack3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack3Data"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPOS4DispT<T>::get_InputMerchantTrack3Data(void)
{
  BSTR pVal;
  this->get_InputMerchantTrack3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_InputMerchantTrack3Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMerchantTrack3Data"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::get_WantProgressBar(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WantProgressBar"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPOS4DispT<T>::get_WantProgressBar(void)
{
  long pVal;
  this->get_WantProgressBar((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_WantProgressBar(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WantProgressBar"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_POSHardware(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSHardware"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_POSSoftwareName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareName"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_POSSoftwareNumber(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareNumber"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPOS4DispT<T>::set_EnablePrintMerchantDetails(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePrintMerchantDetails"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IEFTEvent
// Flags:     (4096) Dispatchable
// GUID:      {AC17F152-6A16-11D3-ABEA-00105A6CA437}
// *********************************************************************//
template <class T> void __fastcall
IEFTEventDispT<T>::DialogDismissed()
{
  _TDispID _dispid(/* DialogDismissed */ DISPID(1));
  OleProcedure(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIEFT2
// Interface: IEFT2
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::get_DialogMOTOType(Eft2000_tlb::MotoTransTypeEnum* pVal/*[out,retval]*/)
{
  return (*this)->get_DialogMOTOType(pVal);
}

template <class T> Eft2000_tlb::MotoTransTypeEnum __fastcall
TCOMIEFT2T<T>::get_DialogMOTOType(void)
{
  Eft2000_tlb::MotoTransTypeEnum pVal;
  OLECHECK(this->get_DialogMOTOType((Eft2000_tlb::MotoTransTypeEnum*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::ShowMOTODialog(Eft2000_tlb::MotoTransTypeEnum eMOTOTypesAllowed/*[in]*/, 
                              Eft2000_tlb::MotoTransTypeEnum eDefaultType/*[in]*/)
{
  return (*this)->ShowMOTODialog(eMOTOTypesAllowed, eDefaultType);
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::get_InputMotoType(Eft2000_tlb::MotoTransTypeEnum* pVal/*[out,retval]*/)
{
  return (*this)->get_InputMotoType(pVal);
}

template <class T> Eft2000_tlb::MotoTransTypeEnum __fastcall
TCOMIEFT2T<T>::get_InputMotoType(void)
{
  Eft2000_tlb::MotoTransTypeEnum pVal;
  OLECHECK(this->get_InputMotoType((Eft2000_tlb::MotoTransTypeEnum*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::ShowAcquirerSelectionDialog(void)
{
  return (*this)->ShowAcquirerSelectionDialog();
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::get_AcquirerType(Eft2000_tlb::AcquirerTypeEnum* pVal/*[out,retval]*/)
{
  return (*this)->get_AcquirerType(pVal);
}

template <class T> Eft2000_tlb::AcquirerTypeEnum __fastcall
TCOMIEFT2T<T>::get_AcquirerType(void)
{
  Eft2000_tlb::AcquirerTypeEnum pVal;
  OLECHECK(this->get_AcquirerType((Eft2000_tlb::AcquirerTypeEnum*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::get_DialogAcquirerType(Eft2000_tlb::AcquirerTypeEnum* pVal/*[out,retval]*/)
{
  return (*this)->get_DialogAcquirerType(pVal);
}

template <class T> Eft2000_tlb::AcquirerTypeEnum __fastcall
TCOMIEFT2T<T>::get_DialogAcquirerType(void)
{
  Eft2000_tlb::AcquirerTypeEnum pVal;
  OLECHECK(this->get_DialogAcquirerType((Eft2000_tlb::AcquirerTypeEnum*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::ShowChequeDialog(BSTR bstrTitle/*[in]*/, BSTR bstrPOSPromptText/*[in]*/)
{
  return (*this)->ShowChequeDialog(bstrTitle, bstrPOSPromptText);
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::get_DialogChequeBankBranch(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DialogChequeBankBranch(pVal);
}

template <class T> BSTR __fastcall
TCOMIEFT2T<T>::get_DialogChequeBankBranch(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DialogChequeBankBranch((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::get_DialogChequeAccount(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DialogChequeAccount(pVal);
}

template <class T> BSTR __fastcall
TCOMIEFT2T<T>::get_DialogChequeAccount(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DialogChequeAccount((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::get_DialogChequeSerialNumber(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DialogChequeSerialNumber(pVal);
}

template <class T> BSTR __fastcall
TCOMIEFT2T<T>::get_DialogChequeSerialNumber(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DialogChequeSerialNumber((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::set_ReceiptData(BSTR Param1/*[in]*/)
{
  return (*this)->set_ReceiptData(Param1);
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::set_Stan(long Param1/*[in]*/)
{
  return (*this)->set_Stan(Param1);
}

template <class T> HRESULT __fastcall
TCOMIEFT2T<T>::set_Status(long Param1/*[in]*/)
{
  return (*this)->set_Status(Param1);
}

// *********************************************************************//
// DispIntf:  IEFTIF
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E35B8937-66C9-11D3-A06A-0008C7BC6FEA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ModuleDescription(BSTR* pbstrModuleDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrModuleDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEFTIFDispT<T>::get_ModuleDescription(void)
{
  BSTR pbstrModuleDescription;
  this->get_ModuleDescription((BSTR*)&pbstrModuleDescription);
  return pbstrModuleDescription;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ModuleName(BSTR* pbstrModuleName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrModuleName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEFTIFDispT<T>::get_ModuleName(void)
{
  BSTR pbstrModuleName;
  this->get_ModuleName((BSTR*)&pbstrModuleName);
  return pbstrModuleName;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ModuleVersion(BSTR* pbstrModuleVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrModuleVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEFTIFDispT<T>::get_ModuleVersion(void)
{
  BSTR pbstrModuleVersion;
  this->get_ModuleVersion((BSTR*)&pbstrModuleVersion);
  return pbstrModuleVersion;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ResultCode(long* plResultCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plResultCode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IEFTIFDispT<T>::get_ResultCode(void)
{
  long plResultCode;
  this->get_ResultCode((long*)&plResultCode);
  return plResultCode;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ResultText(BSTR* pbstrResultText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrResultText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEFTIFDispT<T>::get_ResultText(void)
{
  BSTR pbstrResultText;
  this->get_ResultText((BSTR*)&pbstrResultText);
  return pbstrResultText;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::Startup()
{
  _TDispID _dispid(*this, OLETEXT("Startup"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::StartAdminFunction(long lAdminType/*[in]*/, long lUniqueID/*[in]*/, 
                                   long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartAdminFunction"), DISPID(7));
  TAutoArgs<3> _args;
  _args[1] = lAdminType /*[VT_I4:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::StartFinancialTransaction(long lTransactionType/*[in]*/, long lUniqueID/*[in]*/, 
                                          long bRunInBackground/*[in]*/, long lAmount1/*[in]*/, 
                                          long lAmount2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartFinancialTransaction"), DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = lTransactionType /*[VT_I4:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  _args[4] = lAmount1 /*[VT_I4:0]*/;
  _args[5] = lAmount2 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::StartUtility(long lUtilityType/*[in]*/, long lUniqueID/*[in]*/, 
                             long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartUtility"), DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = lUtilityType /*[VT_I4:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::set_POSHardware(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSHardware"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::set_POSSoftwareName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareName"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::set_POSSoftwareNumber(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareNumber"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::set_EnablePrintMerchantDetails(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePrintMerchantDetails"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::POSConnecting()
{
  _TDispID _dispid(*this, OLETEXT("POSConnecting"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                         BSTR bstrChequeBankBranch/*[in]*/, 
                                         BSTR bstrChequeAccount/*[in]*/, 
                                         long bRunInBackground/*[in]*/, long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartChequeAuthorisation"), DISPID(15));
  TAutoArgs<5> _args;
  _args[1] = bstrChequeSerialNumber /*[VT_BSTR:0]*/;
  _args[2] = bstrChequeBankBranch /*[VT_BSTR:0]*/;
  _args[3] = bstrChequeAccount /*[VT_BSTR:0]*/;
  _args[4] = bRunInBackground /*[VT_I4:0]*/;
  _args[5] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::SyncroPrint(BSTR bstrPrintData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SyncroPrint"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = bstrPrintData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::EnquireTransaction(long lUniqueID/*[in]*/, long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnquireTransaction"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = lUniqueID /*[VT_I4:0]*/;
  _args[2] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : POSInterface
// Interface: TCOMIPOS4
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPOS4, IPOS4, &CLSID_POSInterface, &IID_IPOS4> CoPOSInterface;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : EFTInterface
// Interface: TCOMIEFT2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIEFT2, IEFT2, &CLSID_EFTInterface, &IID_IEFT2> CoEFTInterface;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : POSInterface
// Event Interface : IPOSEvent
// *********************************************************************//
template <class T>
class TEvents_POSInterface : public IConnectionPointImpl<T,
                                                 &DIID_IPOSEvent,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_EFTPOSStatusChange(Eft2000_tlb::EFTPOSStatusEnum eNewStatus);
  void            Fire_EndPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType);
  void            Fire_StartPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType);
  void            Fire_TransactionComplete(long lUniqueID, long lResult);
protected:
  IPOSEventDisp m_EventIntfObj;
};

template <class T> void
TEvents_POSInterface<T>::Fire_EFTPOSStatusChange(Eft2000_tlb::EFTPOSStatusEnum eNewStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EFTPOSStatusChange(eNewStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_POSInterface<T>::Fire_EndPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EndPrintBanner(eReceiptType);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_POSInterface<T>::Fire_StartPrintBanner(Eft2000_tlb::ReceiptTypeEnum eReceiptType)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StartPrintBanner(eReceiptType);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_POSInterface<T>::Fire_TransactionComplete(long lUniqueID, long lResult)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.TransactionComplete(lUniqueID, lResult);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : EFTInterface
// Event Interface : IEFTEvent
// *********************************************************************//
template <class T>
class TEvents_EFTInterface : public IConnectionPointImpl<T,
                                                 &DIID_IEFTEvent,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_DialogDismissed(void);
protected:
  IEFTEventDisp m_EventIntfObj;
};

template <class T> void
TEvents_EFTInterface<T>::Fire_DialogDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DialogDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Eft2000_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Eft2000_tlb;
#endif

#pragma option pop

#endif // EFT2000_TLBH
