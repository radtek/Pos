// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 8/11/2007 10:06:54 a.m. from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Cadmus\Cronos\CadmusEftpos.tlb (1)
// LIBID: {2C17B0C4-BDF2-4921-884C-ECC72D5030FA}
// LCID: 0
// Helpfile: 
// HelpString: CadmusEftpos 1.0 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   CadmusEftposLib_TLBH
#define   CadmusEftposLib_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Cadmuseftposlib_tlb
{

// *********************************************************************//
// HelpString: CadmusEftpos 1.0 Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_CadmusEftposLib;
extern __declspec (package) const GUID DIID__IPOSInterfaceEvents;
extern __declspec (package) const GUID IID_IPOSInterface;
extern __declspec (package) const GUID CLSID_POSInterface;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{4551EAC2-8877-46F3-9B3B-40022F2BB1D6}") _IPOSInterfaceEvents;
typedef TComInterface<_IPOSInterfaceEvents, &DIID__IPOSInterfaceEvents> _IPOSInterfaceEventsPtr;

interface DECLSPEC_UUID("{C1E18FE4-51C0-4522-AA0F-FC609E8A081A}") IPOSInterface;
typedef TComInterface<IPOSInterface, &IID_IPOSInterface> IPOSInterfacePtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IPOSInterface POSInterface;
typedef IPOSInterfacePtr POSInterfacePtr;

#define LIBID_OF_POSInterface (&LIBID_CadmusEftposLib)
// *********************************************************************//
// Interface: _IPOSInterfaceEvents
// Flags:     (4096) Dispatchable
// GUID:      {4551EAC2-8877-46F3-9B3B-40022F2BB1D6}
// *********************************************************************//
interface _IPOSInterfaceEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall EFT2POSMessage(LPSAFEARRAY* psaMsg/*[in]*/)
  {
    _TDispID _dispid(/* EFT2POSMessage */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = psaMsg /*[VT_SAFEARRAY:1]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IPOSInterface
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C1E18FE4-51C0-4522-AA0F-FC609E8A081A}
// *********************************************************************//
interface IPOSInterface  : public IDispatch
{
public:
  // [1] method POS2EFTMessage
  virtual HRESULT STDMETHODCALLTYPE POS2EFTMessage(LPSAFEARRAY* psaMsg/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _IPOSInterfaceEvents
// Flags:     (4096) Dispatchable
// GUID:      {4551EAC2-8877-46F3-9B3B-40022F2BB1D6}
// *********************************************************************//
template <class T>
class _IPOSInterfaceEventsDispT : public TAutoDriver<_IPOSInterfaceEvents>
{
public:
  _IPOSInterfaceEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall EFT2POSMessage(LPSAFEARRAY* psaMsg/*[in]*/);

};
typedef _IPOSInterfaceEventsDispT<_IPOSInterfaceEvents> _IPOSInterfaceEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIPOSInterface
// Interface: IPOSInterface
// *********************************************************************//
template <class T /* IPOSInterface */ >
class TCOMIPOSInterfaceT : public TComInterface<IPOSInterface>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPOSInterfaceT() {}
  TCOMIPOSInterfaceT(IPOSInterface *intf, bool addRef = false) : TComInterface<IPOSInterface>(intf, addRef) {}
  TCOMIPOSInterfaceT(const TCOMIPOSInterfaceT& src) : TComInterface<IPOSInterface>(src) {}
  TCOMIPOSInterfaceT& operator=(const TCOMIPOSInterfaceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall POS2EFTMessage(LPSAFEARRAY* psaMsg/*[in]*/);

};
typedef TCOMIPOSInterfaceT<IPOSInterface> TCOMIPOSInterface;

// *********************************************************************//
// DispIntf:  IPOSInterface
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C1E18FE4-51C0-4522-AA0F-FC609E8A081A}
// *********************************************************************//
template<class T>
class IPOSInterfaceDispT : public TAutoDriver<IPOSInterface>
{
public:
  IPOSInterfaceDispT(){}

  IPOSInterfaceDispT(IPOSInterface *pintf)
  {
    TAutoDriver<IPOSInterface>::Bind(pintf, false);
  }

  IPOSInterfaceDispT(IPOSInterfacePtr pintf)
  {
    TAutoDriver<IPOSInterface>::Bind(pintf, true);
  }

  IPOSInterfaceDispT& operator=(IPOSInterface *pintf)
  {
    TAutoDriver<IPOSInterface>::Bind(pintf, false);
    return *this;
  }

  IPOSInterfaceDispT& operator=(IPOSInterfacePtr pintf)
  {
    TAutoDriver<IPOSInterface>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_POSInterface));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_POSInterface);
  }

  HRESULT         __fastcall POS2EFTMessage(LPSAFEARRAY* psaMsg/*[in]*/);

};
typedef IPOSInterfaceDispT<IPOSInterface> IPOSInterfaceDisp;

// *********************************************************************//
// DispIntf:  _IPOSInterfaceEvents
// Flags:     (4096) Dispatchable
// GUID:      {4551EAC2-8877-46F3-9B3B-40022F2BB1D6}
// *********************************************************************//
template <class T> HRESULT __fastcall
_IPOSInterfaceEventsDispT<T>::EFT2POSMessage(LPSAFEARRAY* psaMsg/*[in]*/)
{
  _TDispID _dispid(/* EFT2POSMessage */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psaMsg /*[VT_SAFEARRAY:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPOSInterface
// Interface: IPOSInterface
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPOSInterfaceT<T>::POS2EFTMessage(LPSAFEARRAY* psaMsg/*[in]*/)
{
  return (*this)->POS2EFTMessage(psaMsg);
}

// *********************************************************************//
// DispIntf:  IPOSInterface
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C1E18FE4-51C0-4522-AA0F-FC609E8A081A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPOSInterfaceDispT<T>::POS2EFTMessage(LPSAFEARRAY* psaMsg/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POS2EFTMessage"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psaMsg /*[VT_SAFEARRAY:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : POSInterface
// Interface: TCOMIPOSInterface
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPOSInterface, IPOSInterface, &CLSID_POSInterface, &IID_IPOSInterface> CoPOSInterface;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : POSInterface
// Event Interface : _IPOSInterfaceEvents
// *********************************************************************//
template <class T>
class TEvents_POSInterface : public IConnectionPointImpl<T,
                                                 &DIID__IPOSInterfaceEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_EFT2POSMessage(LPSAFEARRAY* psaMsg);
protected:
  _IPOSInterfaceEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_POSInterface<T>::Fire_EFT2POSMessage(LPSAFEARRAY* psaMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EFT2POSMessage(psaMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Cadmuseftposlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Cadmuseftposlib_tlb;
#endif

#pragma option pop

#endif // CadmusEftposLib_TLBH
