// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 3/11/2010 1:29:53 p.m. from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\PROGRA~2\Syncro\EFT2000Engine.exe (1)
// LIBID: {E35B892B-66C9-11D3-A06A-0008C7BC6FEA}
// LCID: 0
// Helpfile: 
// HelpString: EFT2000ETSLEngine 1.0 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   EFT2000ETSLENGINELib_TLBH
#define   EFT2000ETSLENGINELib_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Eft2000etslenginelib_tlb
{

// *********************************************************************//
// HelpString: EFT2000ETSLEngine 1.0 Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_EFT2000ETSLENGINELib;
extern __declspec (package) const GUID IID_IEFTIF;
extern __declspec (package) const GUID CLSID_EFTIF;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{E35B8937-66C9-11D3-A06A-0008C7BC6FEA}") IEFTIF;
typedef TComInterface<IEFTIF, &IID_IEFTIF> IEFTIFPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IEFTIF EFTIF;
typedef IEFTIFPtr EFTIFPtr;

#define LIBID_OF_EFTIF (&LIBID_EFT2000ETSLENGINELib)
// *********************************************************************//
// Interface: IEFTIF
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E35B8937-66C9-11D3-A06A-0008C7BC6FEA}
// *********************************************************************//
interface IEFTIF  : public IDispatch
{
public:
  // [1] A textual description of the module
  virtual HRESULT STDMETHODCALLTYPE get_ModuleDescription(BSTR* pbstrModuleDescription/*[out,retval]*/) = 0;
  // [2] This property identifies the module
  virtual HRESULT STDMETHODCALLTYPE get_ModuleName(BSTR* pbstrModuleName/*[out,retval]*/) = 0;
  // [3] A textual representation of the version number and final modification date for this module.  Note that the build number from the version has been omitted, also the textual date should be used to remove ambiguity between international date formats
  virtual HRESULT STDMETHODCALLTYPE get_ModuleVersion(BSTR* pbstrModuleVersion/*[out,retval]*/) = 0;
  // [4] The result of the last method performed
  virtual HRESULT STDMETHODCALLTYPE get_ResultCode(long* plResultCode/*[out,retval]*/) = 0;
  // [5] The result of the last method performed by this module in a string format
  virtual HRESULT STDMETHODCALLTYPE get_ResultText(BSTR* pbstrResultText/*[out,retval]*/) = 0;
  // [6] This function allows the EFT Interface module to start this module on Start-up
  virtual HRESULT STDMETHODCALLTYPE Startup(void) = 0;
  // [7] This function initiates an administration function transaction, e.g. Logon, Settlement Inquiry, etc. 
  virtual HRESULT STDMETHODCALLTYPE StartAdminFunction(long lAdminType/*[in]*/, 
                                                       long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/) = 0;
  // [8] This function is used by POSIF to initiate a financial transaction in the EFTPOS Engine, e.g. Purchase, Refund, etc.
  virtual HRESULT STDMETHODCALLTYPE StartFinancialTransaction(long lTransactionType/*[in]*/, 
                                                              long lUniqueID/*[in]*/, 
                                                              long bRunInBackground/*[in]*/, 
                                                              long lAmount1/*[in]*/, 
                                                              long lAmount2/*[in]*/) = 0;
  // [9] This function initiates a utility transaction, e.g. Diagnostic Inquiry, Display KVC , etc.
  virtual HRESULT STDMETHODCALLTYPE StartUtility(long lUtilityType/*[in]*/, long lUniqueID/*[in]*/, 
                                                 long bRunInBackground/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE set_POSHardware(BSTR Param1/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_POSSoftwareName(BSTR Param1/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_POSSoftwareNumber(BSTR Param1/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_EnablePrintMerchantDetails(long Param1/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE POSConnecting(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                             BSTR bstrChequeBankBranch/*[in]*/, 
                                                             BSTR bstrChequeAccount/*[in]*/, 
                                                             long bRunInBackground/*[in]*/, 
                                                             long lAmount/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE SyncroPrint(BSTR bstrPrintData/*[in]*/) = 0; // [16]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ModuleDescription(void)
  {
    BSTR pbstrModuleDescription = 0;
    OLECHECK(this->get_ModuleDescription((BSTR*)&pbstrModuleDescription));
    return pbstrModuleDescription;
  }

  BSTR __fastcall get_ModuleName(void)
  {
    BSTR pbstrModuleName = 0;
    OLECHECK(this->get_ModuleName((BSTR*)&pbstrModuleName));
    return pbstrModuleName;
  }

  BSTR __fastcall get_ModuleVersion(void)
  {
    BSTR pbstrModuleVersion = 0;
    OLECHECK(this->get_ModuleVersion((BSTR*)&pbstrModuleVersion));
    return pbstrModuleVersion;
  }

  long __fastcall get_ResultCode(void)
  {
    long plResultCode;
    OLECHECK(this->get_ResultCode((long*)&plResultCode));
    return plResultCode;
  }

  BSTR __fastcall get_ResultText(void)
  {
    BSTR pbstrResultText = 0;
    OLECHECK(this->get_ResultText((BSTR*)&pbstrResultText));
    return pbstrResultText;
  }


  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIEFTIF
// Interface: IEFTIF
// *********************************************************************//
template <class T /* IEFTIF */ >
class TCOMIEFTIFT : public TComInterface<IEFTIF>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIEFTIFT() {}
  TCOMIEFTIFT(IEFTIF *intf, bool addRef = false) : TComInterface<IEFTIF>(intf, addRef) {}
  TCOMIEFTIFT(const TCOMIEFTIFT& src) : TComInterface<IEFTIF>(src) {}
  TCOMIEFTIFT& operator=(const TCOMIEFTIFT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ModuleDescription(BSTR* pbstrModuleDescription/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pbstrModuleName/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pbstrModuleVersion/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* plResultCode/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pbstrResultText/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall Startup(void);
  HRESULT         __fastcall StartAdminFunction(long lAdminType/*[in]*/, long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);
  HRESULT         __fastcall StartFinancialTransaction(long lTransactionType/*[in]*/, 
                                                       long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/, 
                                                       long lAmount1/*[in]*/, long lAmount2/*[in]*/);
  HRESULT         __fastcall StartUtility(long lUtilityType/*[in]*/, long lUniqueID/*[in]*/, 
                                          long bRunInBackground/*[in]*/);
  HRESULT         __fastcall set_POSHardware(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareNumber(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_EnablePrintMerchantDetails(long Param1/*[in]*/);
  HRESULT         __fastcall POSConnecting(void);
  HRESULT         __fastcall StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                      BSTR bstrChequeBankBranch/*[in]*/, 
                                                      BSTR bstrChequeAccount/*[in]*/, 
                                                      long bRunInBackground/*[in]*/, 
                                                      long lAmount/*[in]*/);
  HRESULT         __fastcall SyncroPrint(BSTR bstrPrintData/*[in]*/);

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};
};
typedef TCOMIEFTIFT<IEFTIF> TCOMIEFTIF;

// *********************************************************************//
// DispIntf:  IEFTIF
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E35B8937-66C9-11D3-A06A-0008C7BC6FEA}
// *********************************************************************//
template<class T>
class IEFTIFDispT : public TAutoDriver<IEFTIF>
{
public:
  IEFTIFDispT(){}

  IEFTIFDispT(IEFTIF *pintf)
  {
    TAutoDriver<IEFTIF>::Bind(pintf, false);
  }

  IEFTIFDispT(IEFTIFPtr pintf)
  {
    TAutoDriver<IEFTIF>::Bind(pintf, true);
  }

  IEFTIFDispT& operator=(IEFTIF *pintf)
  {
    TAutoDriver<IEFTIF>::Bind(pintf, false);
    return *this;
  }

  IEFTIFDispT& operator=(IEFTIFPtr pintf)
  {
    TAutoDriver<IEFTIF>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_EFTIF));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_EFTIF);
  }

  HRESULT         __fastcall get_ModuleDescription(BSTR* pbstrModuleDescription/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pbstrModuleName/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pbstrModuleVersion/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* plResultCode/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pbstrResultText/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall Startup();
  HRESULT         __fastcall StartAdminFunction(long lAdminType/*[in]*/, long lUniqueID/*[in]*/, 
                                                long bRunInBackground/*[in]*/);
  HRESULT         __fastcall StartFinancialTransaction(long lTransactionType/*[in]*/, 
                                                       long lUniqueID/*[in]*/, 
                                                       long bRunInBackground/*[in]*/, 
                                                       long lAmount1/*[in]*/, long lAmount2/*[in]*/);
  HRESULT         __fastcall StartUtility(long lUtilityType/*[in]*/, long lUniqueID/*[in]*/, 
                                          long bRunInBackground/*[in]*/);
  HRESULT         __fastcall set_POSHardware(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_POSSoftwareNumber(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_EnablePrintMerchantDetails(long Param1/*[in]*/);
  HRESULT         __fastcall POSConnecting();
  HRESULT         __fastcall StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                                      BSTR bstrChequeBankBranch/*[in]*/, 
                                                      BSTR bstrChequeAccount/*[in]*/, 
                                                      long bRunInBackground/*[in]*/, 
                                                      long lAmount/*[in]*/);
  HRESULT         __fastcall SyncroPrint(BSTR bstrPrintData/*[in]*/);

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   BSTR            POSHardware = {write = set_POSHardware};
  __property   BSTR            POSSoftwareName = {write = set_POSSoftwareName};
  __property   BSTR            POSSoftwareNumber = {write = set_POSSoftwareNumber};
  __property   long            EnablePrintMerchantDetails = {write = set_EnablePrintMerchantDetails};
};
typedef IEFTIFDispT<IEFTIF> IEFTIFDisp;

// *********************************************************************//
// SmartIntf: TCOMIEFTIF
// Interface: IEFTIF
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::get_ModuleDescription(BSTR* pbstrModuleDescription/*[out,retval]*/)
{
  return (*this)->get_ModuleDescription(pbstrModuleDescription);
}

template <class T> BSTR __fastcall
TCOMIEFTIFT<T>::get_ModuleDescription(void)
{
  BSTR pbstrModuleDescription = 0;
  OLECHECK(this->get_ModuleDescription((BSTR*)&pbstrModuleDescription));
  return pbstrModuleDescription;
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::get_ModuleName(BSTR* pbstrModuleName/*[out,retval]*/)
{
  return (*this)->get_ModuleName(pbstrModuleName);
}

template <class T> BSTR __fastcall
TCOMIEFTIFT<T>::get_ModuleName(void)
{
  BSTR pbstrModuleName = 0;
  OLECHECK(this->get_ModuleName((BSTR*)&pbstrModuleName));
  return pbstrModuleName;
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::get_ModuleVersion(BSTR* pbstrModuleVersion/*[out,retval]*/)
{
  return (*this)->get_ModuleVersion(pbstrModuleVersion);
}

template <class T> BSTR __fastcall
TCOMIEFTIFT<T>::get_ModuleVersion(void)
{
  BSTR pbstrModuleVersion = 0;
  OLECHECK(this->get_ModuleVersion((BSTR*)&pbstrModuleVersion));
  return pbstrModuleVersion;
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::get_ResultCode(long* plResultCode/*[out,retval]*/)
{
  return (*this)->get_ResultCode(plResultCode);
}

template <class T> long __fastcall
TCOMIEFTIFT<T>::get_ResultCode(void)
{
  long plResultCode;
  OLECHECK(this->get_ResultCode((long*)&plResultCode));
  return plResultCode;
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::get_ResultText(BSTR* pbstrResultText/*[out,retval]*/)
{
  return (*this)->get_ResultText(pbstrResultText);
}

template <class T> BSTR __fastcall
TCOMIEFTIFT<T>::get_ResultText(void)
{
  BSTR pbstrResultText = 0;
  OLECHECK(this->get_ResultText((BSTR*)&pbstrResultText));
  return pbstrResultText;
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::Startup(void)
{
  return (*this)->Startup();
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::StartAdminFunction(long lAdminType/*[in]*/, long lUniqueID/*[in]*/, 
                                   long bRunInBackground/*[in]*/)
{
  return (*this)->StartAdminFunction(lAdminType, lUniqueID, bRunInBackground);
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::StartFinancialTransaction(long lTransactionType/*[in]*/, long lUniqueID/*[in]*/, 
                                          long bRunInBackground/*[in]*/, long lAmount1/*[in]*/, 
                                          long lAmount2/*[in]*/)
{
  return (*this)->StartFinancialTransaction(lTransactionType, lUniqueID, bRunInBackground, lAmount1, 
                                            lAmount2);
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::StartUtility(long lUtilityType/*[in]*/, long lUniqueID/*[in]*/, 
                             long bRunInBackground/*[in]*/)
{
  return (*this)->StartUtility(lUtilityType, lUniqueID, bRunInBackground);
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::set_POSHardware(BSTR Param1/*[in]*/)
{
  return (*this)->set_POSHardware(Param1);
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::set_POSSoftwareName(BSTR Param1/*[in]*/)
{
  return (*this)->set_POSSoftwareName(Param1);
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::set_POSSoftwareNumber(BSTR Param1/*[in]*/)
{
  return (*this)->set_POSSoftwareNumber(Param1);
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::set_EnablePrintMerchantDetails(long Param1/*[in]*/)
{
  return (*this)->set_EnablePrintMerchantDetails(Param1);
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::POSConnecting(void)
{
  return (*this)->POSConnecting();
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                         BSTR bstrChequeBankBranch/*[in]*/, 
                                         BSTR bstrChequeAccount/*[in]*/, 
                                         long bRunInBackground/*[in]*/, long lAmount/*[in]*/)
{
  return (*this)->StartChequeAuthorisation(bstrChequeSerialNumber, bstrChequeBankBranch, 
                                           bstrChequeAccount, bRunInBackground, lAmount);
}

template <class T> HRESULT __fastcall
TCOMIEFTIFT<T>::SyncroPrint(BSTR bstrPrintData/*[in]*/)
{
  return (*this)->SyncroPrint(bstrPrintData);
}

// *********************************************************************//
// DispIntf:  IEFTIF
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E35B8937-66C9-11D3-A06A-0008C7BC6FEA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ModuleDescription(BSTR* pbstrModuleDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrModuleDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEFTIFDispT<T>::get_ModuleDescription(void)
{
  BSTR pbstrModuleDescription;
  this->get_ModuleDescription((BSTR*)&pbstrModuleDescription);
  return pbstrModuleDescription;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ModuleName(BSTR* pbstrModuleName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrModuleName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEFTIFDispT<T>::get_ModuleName(void)
{
  BSTR pbstrModuleName;
  this->get_ModuleName((BSTR*)&pbstrModuleName);
  return pbstrModuleName;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ModuleVersion(BSTR* pbstrModuleVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrModuleVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEFTIFDispT<T>::get_ModuleVersion(void)
{
  BSTR pbstrModuleVersion;
  this->get_ModuleVersion((BSTR*)&pbstrModuleVersion);
  return pbstrModuleVersion;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ResultCode(long* plResultCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plResultCode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IEFTIFDispT<T>::get_ResultCode(void)
{
  long plResultCode;
  this->get_ResultCode((long*)&plResultCode);
  return plResultCode;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::get_ResultText(BSTR* pbstrResultText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrResultText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEFTIFDispT<T>::get_ResultText(void)
{
  BSTR pbstrResultText;
  this->get_ResultText((BSTR*)&pbstrResultText);
  return pbstrResultText;
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::Startup()
{
  _TDispID _dispid(*this, OLETEXT("Startup"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::StartAdminFunction(long lAdminType/*[in]*/, long lUniqueID/*[in]*/, 
                                   long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartAdminFunction"), DISPID(7));
  TAutoArgs<3> _args;
  _args[1] = lAdminType /*[VT_I4:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::StartFinancialTransaction(long lTransactionType/*[in]*/, long lUniqueID/*[in]*/, 
                                          long bRunInBackground/*[in]*/, long lAmount1/*[in]*/, 
                                          long lAmount2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartFinancialTransaction"), DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = lTransactionType /*[VT_I4:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  _args[4] = lAmount1 /*[VT_I4:0]*/;
  _args[5] = lAmount2 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::StartUtility(long lUtilityType/*[in]*/, long lUniqueID/*[in]*/, 
                             long bRunInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartUtility"), DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = lUtilityType /*[VT_I4:0]*/;
  _args[2] = lUniqueID /*[VT_I4:0]*/;
  _args[3] = bRunInBackground /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::set_POSHardware(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSHardware"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::set_POSSoftwareName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareName"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::set_POSSoftwareNumber(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POSSoftwareNumber"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::set_EnablePrintMerchantDetails(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePrintMerchantDetails"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::POSConnecting()
{
  _TDispID _dispid(*this, OLETEXT("POSConnecting"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::StartChequeAuthorisation(BSTR bstrChequeSerialNumber/*[in]*/, 
                                         BSTR bstrChequeBankBranch/*[in]*/, 
                                         BSTR bstrChequeAccount/*[in]*/, 
                                         long bRunInBackground/*[in]*/, long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartChequeAuthorisation"), DISPID(15));
  TAutoArgs<5> _args;
  _args[1] = bstrChequeSerialNumber /*[VT_BSTR:0]*/;
  _args[2] = bstrChequeBankBranch /*[VT_BSTR:0]*/;
  _args[3] = bstrChequeAccount /*[VT_BSTR:0]*/;
  _args[4] = bRunInBackground /*[VT_I4:0]*/;
  _args[5] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEFTIFDispT<T>::SyncroPrint(BSTR bstrPrintData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SyncroPrint"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = bstrPrintData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : EFTIF
// Interface: TCOMIEFTIF
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIEFTIF, IEFTIF, &CLSID_EFTIF, &IID_IEFTIF> CoEFTIF;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Eft2000etslenginelib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Eft2000etslenginelib_tlb;
#endif

#pragma option pop

#endif // EFT2000ETSLENGINELib_TLBH
