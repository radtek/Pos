// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 17252 $
// File generated on 19/06/2009 11:41:35 a.m. from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\PROGRA~1\Syncro\IcePpc.exe (1)
// LIBID: {A728E2C1-0123-11D4-B49B-00C04F078DAE}
// LCID: 0
// Helpfile: 
// HelpString: PinPadControl2 1.4 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   PINPADCONTROL2Lib_TLBH
#define   PINPADCONTROL2Lib_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Pinpadcontrol2lib_tlb
{

// *********************************************************************//
// HelpString: PinPadControl2 1.4 Type Library
// Version:    1.4
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_PINPADCONTROL2Lib;
extern __declspec (package) const GUID DIID__IForegroundPinPadControlEvents;
extern __declspec (package) const GUID IID_IForegroundPinPadControl;
extern __declspec (package) const GUID IID_IForegroundPinPadControl2;
extern __declspec (package) const GUID IID_IForegroundPinPadControl3;
extern __declspec (package) const GUID CLSID_ForegroundPinPadControl2;
extern __declspec (package) const GUID IID_IBackgroundPinPadControl;
extern __declspec (package) const GUID IID_IBackgroundPinPadControl2;
extern __declspec (package) const GUID IID_IBackgroundPinPadControl3;
extern __declspec (package) const GUID CLSID_BackgroundPinPadControl2;
extern __declspec (package) const GUID IID_IConfigPinPadControl;
extern __declspec (package) const GUID CLSID_ConfigPinPadControl2;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{4B4AB7D3-67C5-11D3-8CDD-0008C7CAB6B7}") _IForegroundPinPadControlEvents;
typedef TComInterface<_IForegroundPinPadControlEvents, &DIID__IForegroundPinPadControlEvents> _IForegroundPinPadControlEventsPtr;

interface DECLSPEC_UUID("{4B4AB7D1-67C5-11D3-8CDD-0008C7CAB6B7}") IForegroundPinPadControl;
typedef TComInterface<IForegroundPinPadControl, &IID_IForegroundPinPadControl> IForegroundPinPadControlPtr;

interface DECLSPEC_UUID("{51FC4126-3B5D-471B-BBCC-AC44192C166A}") IForegroundPinPadControl2;
typedef TComInterface<IForegroundPinPadControl2, &IID_IForegroundPinPadControl2> IForegroundPinPadControl2Ptr;

interface DECLSPEC_UUID("{7568AFA7-E598-4154-818A-4BD6971C737A}") IForegroundPinPadControl3;
typedef TComInterface<IForegroundPinPadControl3, &IID_IForegroundPinPadControl3> IForegroundPinPadControl3Ptr;

interface DECLSPEC_UUID("{4B4AB7D6-67C5-11D3-8CDD-0008C7CAB6B7}") IBackgroundPinPadControl;
typedef TComInterface<IBackgroundPinPadControl, &IID_IBackgroundPinPadControl> IBackgroundPinPadControlPtr;

interface DECLSPEC_UUID("{4B2C89FD-2268-4C46-8B5F-60AE34873F3E}") IBackgroundPinPadControl2;
typedef TComInterface<IBackgroundPinPadControl2, &IID_IBackgroundPinPadControl2> IBackgroundPinPadControl2Ptr;

interface DECLSPEC_UUID("{E617C714-DF3C-4707-B828-5DD2FD17BB0C}") IBackgroundPinPadControl3;
typedef TComInterface<IBackgroundPinPadControl3, &IID_IBackgroundPinPadControl3> IBackgroundPinPadControl3Ptr;

interface DECLSPEC_UUID("{65CAC5B0-303B-11D4-B4DE-00C04F078DAE}") IConfigPinPadControl;
typedef TComInterface<IConfigPinPadControl, &IID_IConfigPinPadControl> IConfigPinPadControlPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IForegroundPinPadControl3 ForegroundPinPadControl2;
typedef IForegroundPinPadControl3Ptr ForegroundPinPadControl2Ptr;
typedef IBackgroundPinPadControl3 BackgroundPinPadControl2;
typedef IBackgroundPinPadControl3Ptr BackgroundPinPadControl2Ptr;
typedef IConfigPinPadControl ConfigPinPadControl2;
typedef IConfigPinPadControlPtr ConfigPinPadControl2Ptr;

#define LIBID_OF_ForegroundPinPadControl2 (&LIBID_PINPADCONTROL2Lib)
#define LIBID_OF_BackgroundPinPadControl2 (&LIBID_PINPADCONTROL2Lib)
#define LIBID_OF_ConfigPinPadControl2 (&LIBID_PINPADCONTROL2Lib)
// *********************************************************************//
// Interface: _IForegroundPinPadControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {4B4AB7D3-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
interface _IForegroundPinPadControlEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall PINPadData(long lEventType/*[in]*/)
  {
    _TDispID _dispid(/* PINPadData */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = lEventType /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IForegroundPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B4AB7D1-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
interface IForegroundPinPadControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE SelfTest(void) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Startup(void) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleDescription(BSTR* pVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleName(BSTR* pVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleVersion(BSTR* pVal/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_ResultCode(long* pVal/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_ResultText(BSTR* pVal/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_AccountSelection(long* pVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_CustomerInput(BSTR* pVal/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_PINBlock(VARIANT* pVal/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Track1Data(BSTR* pVal/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Track2Data(BSTR* pVal/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_Track3Data(BSTR* pVal/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE RequestLock(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE ReleaseLock(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE DisplayText(BSTR bstrDisplayText/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE RequestAccountSelection(BSTR bstrPromptText/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE RequestCardSwipe(BSTR bstrPromptText/*[in]*/, 
                                                     long lTracksToRead/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE RequestPINEntry(BSTR bstrPromptText/*[in]*/, 
                                                    BSTR bstrPAN/*[in]*/, long bUseMasterKey/*[in]*/, 
                                                    long lKeyIndex/*[in]*/, long lAmount/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE RequestPromptEntry(long lPromptIndex/*[in]*/, 
                                                       long lMinimumEntryLength/*[in]*/, 
                                                       long lMaximumEntryLength/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE RequestCancel(void) = 0; // [21]
  // [22] method Shutdown
  virtual HRESULT STDMETHODCALLTYPE Shutdown(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ModuleDescription(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleDescription((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ModuleName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ModuleVersion(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleVersion((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ResultCode(void)
  {
    long pVal;
    OLECHECK(this->get_ResultCode((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ResultText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ResultText((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_AccountSelection(void)
  {
    long pVal;
    OLECHECK(this->get_AccountSelection((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CustomerInput(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CustomerInput((BSTR*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_PINBlock(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_PINBlock((VARIANT*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Track1Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Track1Data((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Track2Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Track2Data((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Track3Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Track3Data((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   long            AccountSelection = {read = get_AccountSelection};
  __property   BSTR            CustomerInput = {read = get_CustomerInput};
  __property   BSTR            Track1Data = {read = get_Track1Data};
  __property   BSTR            Track2Data = {read = get_Track2Data};
  __property   BSTR            Track3Data = {read = get_Track3Data};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IForegroundPinPadControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51FC4126-3B5D-471B-BBCC-AC44192C166A}
// *********************************************************************//
interface IForegroundPinPadControl2  : public Pinpadcontrol2lib_tlb::IForegroundPinPadControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SignatureCaptureData(VARIANT* pVal/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE RequestSignatureCapture(void) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE RequestSendRawData(BSTR bstrRawData/*[in]*/) = 0; // [26]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_SignatureCaptureData(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_SignatureCaptureData((VARIANT*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SendRawDataResponse(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SendRawDataResponse((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            SendRawDataResponse = {read = get_SendRawDataResponse};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IForegroundPinPadControl3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7568AFA7-E598-4154-818A-4BD6971C737A}
// *********************************************************************//
interface IForegroundPinPadControl3  : public Pinpadcontrol2lib_tlb::IForegroundPinPadControl2
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_EMVActionCodeResponse(long* pVal/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_EMVResponseCode(long* pVal/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_SCData(BSTR* pVal/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                          long lStatusBitmap/*[in]*/, 
                                                          BSTR bstrDisplayText/*[in]*/, 
                                                          VARIANT varTLV/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE RequestCardData(BSTR bstrPromptText/*[in]*/, 
                                                    BSTR bstrChipCardPromptText/*[in]*/, 
                                                    long lTracksToRead/*[in]*/, 
                                                    long lReadType/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE RequestEjectCard(BSTR bstrPromptText/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE RequestFGTransaction(BSTR bstrCommandCode/*[in]*/, 
                                                         BSTR bstrExpectedResponseCode/*[in]*/, 
                                                         long lActionCode/*[in]*/, 
                                                         VARIANT varTLV/*[in]*/) = 0; // [36]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_EMVActionCodeResponse(void)
  {
    long pVal;
    OLECHECK(this->get_EMVActionCodeResponse((long*)&pVal));
    return pVal;
  }

  long __fastcall get_EMVStatusBitmapResponse(void)
  {
    long pVal;
    OLECHECK(this->get_EMVStatusBitmapResponse((long*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_EMVDebugDataResponse(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_EMVDebugDataResponse((VARIANT*)&pVal));
    return pVal;
  }

  long __fastcall get_EMVResponseCode(void)
  {
    long pVal;
    OLECHECK(this->get_EMVResponseCode((long*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_EMVTLVResponse(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_EMVTLVResponse((VARIANT*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SCData(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SCData((BSTR*)&pVal));
    return pVal;
  }


  __property   long            EMVActionCodeResponse = {read = get_EMVActionCodeResponse};
  __property   long            EMVStatusBitmapResponse = {read = get_EMVStatusBitmapResponse};
  __property   long            EMVResponseCode = {read = get_EMVResponseCode};
  __property   BSTR            SCData = {read = get_SCData};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBackgroundPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B4AB7D6-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
interface IBackgroundPinPadControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE SelfTest(void) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Startup(void) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleDescription(BSTR* pVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleName(BSTR* pVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleVersion(BSTR* pVal/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_ResultCode(long* pVal/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_ResultText(BSTR* pVal/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_MACBlock(VARIANT* pVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_MACVerifyResult(long* pVal/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_PINPadDetails(VARIANT* pVal/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_ReversalStatus(long* pVal/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ReversalData(VARIANT* pVal/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE RequestLock(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE ReleaseLock(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE RequestMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                               long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                               VARIANT varData/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE RequestPINPadDetails(void) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE RequestReversalClear(long lKeyIndex/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE RequestReversalRetrieval(long lKeyIndex/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE RequestReversalStatus(long lMasterKeyIndex/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE RequestReversalStore(long lKeyIndex/*[in]*/, 
                                                         VARIANT varReversalData/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE VerifyMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                              long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                              VARIANT varData/*[in]*/) = 0; // [21]
  // [22] method Shutdown
  virtual HRESULT STDMETHODCALLTYPE Shutdown(void) = 0;
  // [23] method StoreWorkingKeys
  virtual HRESULT STDMETHODCALLTYPE StoreWorkingKeys(long lKeyIndex/*[in]*/, 
                                                     VARIANT varMACKeyData/*[in]*/, 
                                                     VARIANT varPINKeyData/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ModuleDescription(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleDescription((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ModuleName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ModuleVersion(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ModuleVersion((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ResultCode(void)
  {
    long pVal;
    OLECHECK(this->get_ResultCode((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ResultText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ResultText((BSTR*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_MACBlock(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_MACBlock((VARIANT*)&pVal));
    return pVal;
  }

  long __fastcall get_MACVerifyResult(void)
  {
    long pVal;
    OLECHECK(this->get_MACVerifyResult((long*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_PINPadDetails(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_PINPadDetails((VARIANT*)&pVal));
    return pVal;
  }

  long __fastcall get_ReversalStatus(void)
  {
    long pVal;
    OLECHECK(this->get_ReversalStatus((long*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_ReversalData(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_ReversalData((VARIANT*)&pVal));
    return pVal;
  }


  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   long            MACVerifyResult = {read = get_MACVerifyResult};
  __property   long            ReversalStatus = {read = get_ReversalStatus};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBackgroundPinPadControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B2C89FD-2268-4C46-8B5F-60AE34873F3E}
// *********************************************************************//
interface IBackgroundPinPadControl2  : public Pinpadcontrol2lib_tlb::IBackgroundPinPadControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_PINPadID(VARIANT* pVal/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_KeyLength(long* pVal/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_KeyLength(long pVal/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_MACType(long* pVal/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_MACType(long pVal/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_KVC(VARIANT* pVal/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE RequestImageLoad(long lImageNumber/*[in]*/, 
                                                     VARIANT varImageData/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE RequestSendRawData(BSTR bstrRawData/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE RequestPINPadLogon(long lKeyIndex/*[in]*/, 
                                                       VARIANT varCurrentPassword/*[in]*/, 
                                                       VARIANT varNewPassword/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE RequestPINPadMKLoad(long lKeyIndex/*[in]*/, 
                                                        long lDecryptingKeyIndex/*[in]*/, 
                                                        VARIANT varMasterKeyData/*[in]*/, 
                                                        VARIANT varNewPINPadID/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE RequestPINPadLogoff(void) = 0; // [33]
  // [34] property Uses3DES
  virtual HRESULT STDMETHODCALLTYPE get_Uses3DES(long* pVal/*[out,retval]*/) = 0;
  // [35] method Store3DESWorkingKeys
  virtual HRESULT STDMETHODCALLTYPE Store3DESWorkingKeys(long lKeyIndex/*[in]*/, 
                                                         VARIANT varMACKeyData/*[in]*/, 
                                                         VARIANT varPINKeyData/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SendRawDataResponse(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SendRawDataResponse((BSTR*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_PINPadID(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_PINPadID((VARIANT*)&pVal));
    return pVal;
  }

  long __fastcall get_KeyLength(void)
  {
    long pVal;
    OLECHECK(this->get_KeyLength((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MACType(void)
  {
    long pVal;
    OLECHECK(this->get_MACType((long*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_KVC(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_KVC((VARIANT*)&pVal));
    return pVal;
  }

  long __fastcall get_Uses3DES(void)
  {
    long pVal;
    OLECHECK(this->get_Uses3DES((long*)&pVal));
    return pVal;
  }


  __property   BSTR            SendRawDataResponse = {read = get_SendRawDataResponse};
  __property   long            KeyLength = {read = get_KeyLength, write = set_KeyLength};
  __property   long            MACType = {read = get_MACType, write = set_MACType};
  __property   long            Uses3DES = {read = get_Uses3DES};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBackgroundPinPadControl3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E617C714-DF3C-4707-B828-5DD2FD17BB0C}
// *********************************************************************//
interface IBackgroundPinPadControl3  : public Pinpadcontrol2lib_tlb::IBackgroundPinPadControl2
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_EMVActionCodeResponse(long* pVal/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE get_EMVResponseCode(long* pVal/*[out,retval]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_EMVResponseData(VARIANT* pVal/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                          long StatusBitmap/*[in]*/, 
                                                          VARIANT varTLV/*[in]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE RequestEMVAdmin(long lActionCode/*[in]*/, 
                                                    long lStatusBitmap/*[in]*/, 
                                                    long lTableID/*[in]*/, long lEntryCount/*[in]*/, 
                                                    VARIANT varTableData/*[in]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE RequestEMVReadList(VARIANT varTLV/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE RequestEMVWriteList(VARIANT varTLV/*[in]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE RequestBGTransaction(BSTR bstrRequestCode/*[in]*/, 
                                                         BSTR bstrExpectedResponse/*[in]*/, 
                                                         long lActionCode/*[in]*/, 
                                                         VARIANT varTLV/*[in]*/) = 0; // [46]
  // [47] Gets the Connected PIN Pad Device Type.
  virtual HRESULT STDMETHODCALLTYPE get_PINPadDeviceType(long* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_EMVActionCodeResponse(void)
  {
    long pVal;
    OLECHECK(this->get_EMVActionCodeResponse((long*)&pVal));
    return pVal;
  }

  long __fastcall get_EMVStatusBitmapResponse(void)
  {
    long pVal;
    OLECHECK(this->get_EMVStatusBitmapResponse((long*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_EMVDebugDataResponse(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_EMVDebugDataResponse((VARIANT*)&pVal));
    return pVal;
  }

  long __fastcall get_EMVResponseCode(void)
  {
    long pVal;
    OLECHECK(this->get_EMVResponseCode((long*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_EMVTLVResponse(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_EMVTLVResponse((VARIANT*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_EMVResponseData(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_EMVResponseData((VARIANT*)&pVal));
    return pVal;
  }

  long __fastcall get_PINPadDeviceType(void)
  {
    long pVal;
    OLECHECK(this->get_PINPadDeviceType((long*)&pVal));
    return pVal;
  }


  __property   long            EMVActionCodeResponse = {read = get_EMVActionCodeResponse};
  __property   long            EMVStatusBitmapResponse = {read = get_EMVStatusBitmapResponse};
  __property   long            EMVResponseCode = {read = get_EMVResponseCode};
  __property   long            PINPadDeviceType = {read = get_PINPadDeviceType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IConfigPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {65CAC5B0-303B-11D4-B4DE-00C04F078DAE}
// *********************************************************************//
interface IConfigPinPadControl  : public IDispatch
{
public:
  // [1] method Reset
  virtual HRESULT STDMETHODCALLTYPE Reset(long Immediate) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _IForegroundPinPadControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {4B4AB7D3-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
template <class T>
class _IForegroundPinPadControlEventsDispT : public TAutoDriver<_IForegroundPinPadControlEvents>
{
public:
  _IForegroundPinPadControlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall PINPadData(long lEventType/*[in]*/);

};
typedef _IForegroundPinPadControlEventsDispT<_IForegroundPinPadControlEvents> _IForegroundPinPadControlEventsDisp;

typedef TComInterface<IForegroundPinPadControl>  TCOMIForegroundPinPadControl;

// *********************************************************************//
// DispIntf:  IForegroundPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B4AB7D1-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
template<class T>
class IForegroundPinPadControlDispT : public TAutoDriver<IForegroundPinPadControl>
{
public:
  IForegroundPinPadControlDispT(){}

  IForegroundPinPadControlDispT(IForegroundPinPadControl *pintf)
  {
    TAutoDriver<IForegroundPinPadControl>::Bind(pintf, false);
  }

  IForegroundPinPadControlDispT(IForegroundPinPadControlPtr pintf)
  {
    TAutoDriver<IForegroundPinPadControl>::Bind(pintf, true);
  }

  IForegroundPinPadControlDispT& operator=(IForegroundPinPadControl *pintf)
  {
    TAutoDriver<IForegroundPinPadControl>::Bind(pintf, false);
    return *this;
  }

  IForegroundPinPadControlDispT& operator=(IForegroundPinPadControlPtr pintf)
  {
    TAutoDriver<IForegroundPinPadControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall SelfTest();
  HRESULT         __fastcall Startup();
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_AccountSelection(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountSelection(void);
  HRESULT         __fastcall get_CustomerInput(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CustomerInput(void);
  HRESULT         __fastcall get_PINBlock(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_PINBlock(void);
  HRESULT         __fastcall get_Track1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track1Data(void);
  HRESULT         __fastcall get_Track2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track2Data(void);
  HRESULT         __fastcall get_Track3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track3Data(void);
  HRESULT         __fastcall RequestLock();
  HRESULT         __fastcall ReleaseLock();
  HRESULT         __fastcall DisplayText(BSTR bstrDisplayText/*[in]*/);
  HRESULT         __fastcall RequestAccountSelection(BSTR bstrPromptText/*[in]*/);
  HRESULT         __fastcall RequestCardSwipe(BSTR bstrPromptText/*[in]*/, 
                                              long lTracksToRead/*[in]*/);
  HRESULT         __fastcall RequestPINEntry(BSTR bstrPromptText/*[in]*/, BSTR bstrPAN/*[in]*/, 
                                             long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                             long lAmount/*[in]*/);
  HRESULT         __fastcall RequestPromptEntry(long lPromptIndex/*[in]*/, 
                                                long lMinimumEntryLength/*[in]*/, 
                                                long lMaximumEntryLength/*[in]*/);
  HRESULT         __fastcall RequestCancel();
  HRESULT         __fastcall Shutdown();

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   long            AccountSelection = {read = get_AccountSelection};
  __property   BSTR            CustomerInput = {read = get_CustomerInput};
  __property   BSTR            Track1Data = {read = get_Track1Data};
  __property   BSTR            Track2Data = {read = get_Track2Data};
  __property   BSTR            Track3Data = {read = get_Track3Data};
};
typedef IForegroundPinPadControlDispT<IForegroundPinPadControl> IForegroundPinPadControlDisp;

typedef TComInterface<IForegroundPinPadControl2>  TCOMIForegroundPinPadControl2;

// *********************************************************************//
// DispIntf:  IForegroundPinPadControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51FC4126-3B5D-471B-BBCC-AC44192C166A}
// *********************************************************************//
template<class T>
class IForegroundPinPadControl2DispT : public TAutoDriver<IForegroundPinPadControl2>
{
public:
  IForegroundPinPadControl2DispT(){}

  IForegroundPinPadControl2DispT(IForegroundPinPadControl2 *pintf)
  {
    TAutoDriver<IForegroundPinPadControl2>::Bind(pintf, false);
  }

  IForegroundPinPadControl2DispT(IForegroundPinPadControl2Ptr pintf)
  {
    TAutoDriver<IForegroundPinPadControl2>::Bind(pintf, true);
  }

  IForegroundPinPadControl2DispT& operator=(IForegroundPinPadControl2 *pintf)
  {
    TAutoDriver<IForegroundPinPadControl2>::Bind(pintf, false);
    return *this;
  }

  IForegroundPinPadControl2DispT& operator=(IForegroundPinPadControl2Ptr pintf)
  {
    TAutoDriver<IForegroundPinPadControl2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_SignatureCaptureData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_SignatureCaptureData(void);
  HRESULT         __fastcall get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SendRawDataResponse(void);
  HRESULT         __fastcall RequestSignatureCapture();
  HRESULT         __fastcall RequestSendRawData(BSTR bstrRawData/*[in]*/);
  HRESULT         __fastcall SelfTest();
  HRESULT         __fastcall Startup();
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_AccountSelection(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountSelection(void);
  HRESULT         __fastcall get_CustomerInput(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CustomerInput(void);
  HRESULT         __fastcall get_PINBlock(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_PINBlock(void);
  HRESULT         __fastcall get_Track1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track1Data(void);
  HRESULT         __fastcall get_Track2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track2Data(void);
  HRESULT         __fastcall get_Track3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track3Data(void);
  HRESULT         __fastcall RequestLock();
  HRESULT         __fastcall ReleaseLock();
  HRESULT         __fastcall DisplayText(BSTR bstrDisplayText/*[in]*/);
  HRESULT         __fastcall RequestAccountSelection(BSTR bstrPromptText/*[in]*/);
  HRESULT         __fastcall RequestCardSwipe(BSTR bstrPromptText/*[in]*/, 
                                              long lTracksToRead/*[in]*/);
  HRESULT         __fastcall RequestPINEntry(BSTR bstrPromptText/*[in]*/, BSTR bstrPAN/*[in]*/, 
                                             long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                             long lAmount/*[in]*/);
  HRESULT         __fastcall RequestPromptEntry(long lPromptIndex/*[in]*/, 
                                                long lMinimumEntryLength/*[in]*/, 
                                                long lMaximumEntryLength/*[in]*/);
  HRESULT         __fastcall RequestCancel();
  HRESULT         __fastcall Shutdown();

  __property   BSTR            SendRawDataResponse = {read = get_SendRawDataResponse};

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   long            AccountSelection = {read = get_AccountSelection};
  __property   BSTR            CustomerInput = {read = get_CustomerInput};
  __property   BSTR            Track1Data = {read = get_Track1Data};
  __property   BSTR            Track2Data = {read = get_Track2Data};
  __property   BSTR            Track3Data = {read = get_Track3Data};
};
typedef IForegroundPinPadControl2DispT<IForegroundPinPadControl2> IForegroundPinPadControl2Disp;

// *********************************************************************//
// SmartIntf: TCOMIForegroundPinPadControl3
// Interface: IForegroundPinPadControl3
// *********************************************************************//
template <class T /* IForegroundPinPadControl3 */ >
class TCOMIForegroundPinPadControl3T : public TComInterface<IForegroundPinPadControl3>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIForegroundPinPadControl3T() {}
  TCOMIForegroundPinPadControl3T(IForegroundPinPadControl3 *intf, bool addRef = false) : TComInterface<IForegroundPinPadControl3>(intf, addRef) {}
  TCOMIForegroundPinPadControl3T(const TCOMIForegroundPinPadControl3T& src) : TComInterface<IForegroundPinPadControl3>(src) {}
  TCOMIForegroundPinPadControl3T& operator=(const TCOMIForegroundPinPadControl3T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_EMVActionCodeResponse(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVActionCodeResponse(void);
  HRESULT         __fastcall get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVStatusBitmapResponse(void);
  HRESULT         __fastcall get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVDebugDataResponse(void);
  HRESULT         __fastcall get_EMVResponseCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVResponseCode(void);
  HRESULT         __fastcall get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVTLVResponse(void);
  HRESULT         __fastcall get_SCData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SCData(void);
  HRESULT         __fastcall RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                   long lStatusBitmap/*[in]*/, 
                                                   BSTR bstrDisplayText/*[in]*/, 
                                                   VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall RequestCardData(BSTR bstrPromptText/*[in]*/, 
                                             BSTR bstrChipCardPromptText/*[in]*/, 
                                             long lTracksToRead/*[in]*/, long lReadType/*[in]*/);
  HRESULT         __fastcall RequestEjectCard(BSTR bstrPromptText/*[in]*/);
  HRESULT         __fastcall RequestFGTransaction(BSTR bstrCommandCode/*[in]*/, 
                                                  BSTR bstrExpectedResponseCode/*[in]*/, 
                                                  long lActionCode/*[in]*/, VARIANT varTLV/*[in]*/);

  __property   long            EMVActionCodeResponse = {read = get_EMVActionCodeResponse};
  __property   long            EMVStatusBitmapResponse = {read = get_EMVStatusBitmapResponse};
  __property   long            EMVResponseCode = {read = get_EMVResponseCode};
  __property   BSTR            SCData = {read = get_SCData};
};
typedef TCOMIForegroundPinPadControl3T<IForegroundPinPadControl3> TCOMIForegroundPinPadControl3;

// *********************************************************************//
// DispIntf:  IForegroundPinPadControl3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7568AFA7-E598-4154-818A-4BD6971C737A}
// *********************************************************************//
template<class T>
class IForegroundPinPadControl3DispT : public TAutoDriver<IForegroundPinPadControl3>
{
public:
  IForegroundPinPadControl3DispT(){}

  IForegroundPinPadControl3DispT(IForegroundPinPadControl3 *pintf)
  {
    TAutoDriver<IForegroundPinPadControl3>::Bind(pintf, false);
  }

  IForegroundPinPadControl3DispT(IForegroundPinPadControl3Ptr pintf)
  {
    TAutoDriver<IForegroundPinPadControl3>::Bind(pintf, true);
  }

  IForegroundPinPadControl3DispT& operator=(IForegroundPinPadControl3 *pintf)
  {
    TAutoDriver<IForegroundPinPadControl3>::Bind(pintf, false);
    return *this;
  }

  IForegroundPinPadControl3DispT& operator=(IForegroundPinPadControl3Ptr pintf)
  {
    TAutoDriver<IForegroundPinPadControl3>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ForegroundPinPadControl2));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ForegroundPinPadControl2);
  }

  HRESULT         __fastcall get_EMVActionCodeResponse(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVActionCodeResponse(void);
  HRESULT         __fastcall get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVStatusBitmapResponse(void);
  HRESULT         __fastcall get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVDebugDataResponse(void);
  HRESULT         __fastcall get_EMVResponseCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVResponseCode(void);
  HRESULT         __fastcall get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVTLVResponse(void);
  HRESULT         __fastcall get_SCData(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SCData(void);
  HRESULT         __fastcall RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                   long lStatusBitmap/*[in]*/, 
                                                   BSTR bstrDisplayText/*[in]*/, 
                                                   VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall RequestCardData(BSTR bstrPromptText/*[in]*/, 
                                             BSTR bstrChipCardPromptText/*[in]*/, 
                                             long lTracksToRead/*[in]*/, long lReadType/*[in]*/);
  HRESULT         __fastcall RequestEjectCard(BSTR bstrPromptText/*[in]*/);
  HRESULT         __fastcall RequestFGTransaction(BSTR bstrCommandCode/*[in]*/, 
                                                  BSTR bstrExpectedResponseCode/*[in]*/, 
                                                  long lActionCode/*[in]*/, VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall get_SignatureCaptureData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_SignatureCaptureData(void);
  HRESULT         __fastcall get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SendRawDataResponse(void);
  HRESULT         __fastcall RequestSignatureCapture();
  HRESULT         __fastcall RequestSendRawData(BSTR bstrRawData/*[in]*/);
  HRESULT         __fastcall SelfTest();
  HRESULT         __fastcall Startup();
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_AccountSelection(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountSelection(void);
  HRESULT         __fastcall get_CustomerInput(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CustomerInput(void);
  HRESULT         __fastcall get_PINBlock(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_PINBlock(void);
  HRESULT         __fastcall get_Track1Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track1Data(void);
  HRESULT         __fastcall get_Track2Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track2Data(void);
  HRESULT         __fastcall get_Track3Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Track3Data(void);
  HRESULT         __fastcall RequestLock();
  HRESULT         __fastcall ReleaseLock();
  HRESULT         __fastcall DisplayText(BSTR bstrDisplayText/*[in]*/);
  HRESULT         __fastcall RequestAccountSelection(BSTR bstrPromptText/*[in]*/);
  HRESULT         __fastcall RequestCardSwipe(BSTR bstrPromptText/*[in]*/, 
                                              long lTracksToRead/*[in]*/);
  HRESULT         __fastcall RequestPINEntry(BSTR bstrPromptText/*[in]*/, BSTR bstrPAN/*[in]*/, 
                                             long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                             long lAmount/*[in]*/);
  HRESULT         __fastcall RequestPromptEntry(long lPromptIndex/*[in]*/, 
                                                long lMinimumEntryLength/*[in]*/, 
                                                long lMaximumEntryLength/*[in]*/);
  HRESULT         __fastcall RequestCancel();
  HRESULT         __fastcall Shutdown();

  __property   long            EMVActionCodeResponse = {read = get_EMVActionCodeResponse};
  __property   long            EMVStatusBitmapResponse = {read = get_EMVStatusBitmapResponse};
  __property   long            EMVResponseCode = {read = get_EMVResponseCode};
  __property   BSTR            SCData = {read = get_SCData};

  __property   BSTR            SendRawDataResponse = {read = get_SendRawDataResponse};

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   long            AccountSelection = {read = get_AccountSelection};
  __property   BSTR            CustomerInput = {read = get_CustomerInput};
  __property   BSTR            Track1Data = {read = get_Track1Data};
  __property   BSTR            Track2Data = {read = get_Track2Data};
  __property   BSTR            Track3Data = {read = get_Track3Data};
};
typedef IForegroundPinPadControl3DispT<IForegroundPinPadControl3> IForegroundPinPadControl3Disp;

typedef TComInterface<IBackgroundPinPadControl>  TCOMIBackgroundPinPadControl;

// *********************************************************************//
// DispIntf:  IBackgroundPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B4AB7D6-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
template<class T>
class IBackgroundPinPadControlDispT : public TAutoDriver<IBackgroundPinPadControl>
{
public:
  IBackgroundPinPadControlDispT(){}

  IBackgroundPinPadControlDispT(IBackgroundPinPadControl *pintf)
  {
    TAutoDriver<IBackgroundPinPadControl>::Bind(pintf, false);
  }

  IBackgroundPinPadControlDispT(IBackgroundPinPadControlPtr pintf)
  {
    TAutoDriver<IBackgroundPinPadControl>::Bind(pintf, true);
  }

  IBackgroundPinPadControlDispT& operator=(IBackgroundPinPadControl *pintf)
  {
    TAutoDriver<IBackgroundPinPadControl>::Bind(pintf, false);
    return *this;
  }

  IBackgroundPinPadControlDispT& operator=(IBackgroundPinPadControlPtr pintf)
  {
    TAutoDriver<IBackgroundPinPadControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall SelfTest();
  HRESULT         __fastcall Startup();
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_MACBlock(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_MACBlock(void);
  HRESULT         __fastcall get_MACVerifyResult(long* pVal/*[out,retval]*/);
  long            __fastcall get_MACVerifyResult(void);
  HRESULT         __fastcall get_PINPadDetails(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_PINPadDetails(void);
  HRESULT         __fastcall get_ReversalStatus(long* pVal/*[out,retval]*/);
  long            __fastcall get_ReversalStatus(void);
  HRESULT         __fastcall get_ReversalData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_ReversalData(void);
  HRESULT         __fastcall RequestLock();
  HRESULT         __fastcall ReleaseLock();
  HRESULT         __fastcall RequestMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                        long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                        VARIANT varData/*[in]*/);
  HRESULT         __fastcall RequestPINPadDetails();
  HRESULT         __fastcall RequestReversalClear(long lKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalRetrieval(long lKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalStatus(long lMasterKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalStore(long lKeyIndex/*[in]*/, 
                                                  VARIANT varReversalData/*[in]*/);
  HRESULT         __fastcall VerifyMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                       long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                       VARIANT varData/*[in]*/);
  HRESULT         __fastcall Shutdown();
  HRESULT         __fastcall StoreWorkingKeys(long lKeyIndex/*[in]*/, VARIANT varMACKeyData/*[in]*/
                                              , VARIANT varPINKeyData/*[in]*/);

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   long            MACVerifyResult = {read = get_MACVerifyResult};
  __property   long            ReversalStatus = {read = get_ReversalStatus};
};
typedef IBackgroundPinPadControlDispT<IBackgroundPinPadControl> IBackgroundPinPadControlDisp;

typedef TComInterface<IBackgroundPinPadControl2>  TCOMIBackgroundPinPadControl2;

// *********************************************************************//
// DispIntf:  IBackgroundPinPadControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B2C89FD-2268-4C46-8B5F-60AE34873F3E}
// *********************************************************************//
template<class T>
class IBackgroundPinPadControl2DispT : public TAutoDriver<IBackgroundPinPadControl2>
{
public:
  IBackgroundPinPadControl2DispT(){}

  IBackgroundPinPadControl2DispT(IBackgroundPinPadControl2 *pintf)
  {
    TAutoDriver<IBackgroundPinPadControl2>::Bind(pintf, false);
  }

  IBackgroundPinPadControl2DispT(IBackgroundPinPadControl2Ptr pintf)
  {
    TAutoDriver<IBackgroundPinPadControl2>::Bind(pintf, true);
  }

  IBackgroundPinPadControl2DispT& operator=(IBackgroundPinPadControl2 *pintf)
  {
    TAutoDriver<IBackgroundPinPadControl2>::Bind(pintf, false);
    return *this;
  }

  IBackgroundPinPadControl2DispT& operator=(IBackgroundPinPadControl2Ptr pintf)
  {
    TAutoDriver<IBackgroundPinPadControl2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SendRawDataResponse(void);
  HRESULT         __fastcall get_PINPadID(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_PINPadID(void);
  HRESULT         __fastcall get_KeyLength(long* pVal/*[out,retval]*/);
  long            __fastcall get_KeyLength(void);
  HRESULT         __fastcall set_KeyLength(long pVal/*[in]*/);
  HRESULT         __fastcall get_MACType(long* pVal/*[out,retval]*/);
  long            __fastcall get_MACType(void);
  HRESULT         __fastcall set_MACType(long pVal/*[in]*/);
  HRESULT         __fastcall get_KVC(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_KVC(void);
  HRESULT         __fastcall RequestImageLoad(long lImageNumber/*[in]*/, 
                                              VARIANT varImageData/*[in]*/);
  HRESULT         __fastcall RequestSendRawData(BSTR bstrRawData/*[in]*/);
  HRESULT         __fastcall RequestPINPadLogon(long lKeyIndex/*[in]*/, 
                                                VARIANT varCurrentPassword/*[in]*/, 
                                                VARIANT varNewPassword/*[in]*/);
  HRESULT         __fastcall RequestPINPadMKLoad(long lKeyIndex/*[in]*/, 
                                                 long lDecryptingKeyIndex/*[in]*/, 
                                                 VARIANT varMasterKeyData/*[in]*/, 
                                                 VARIANT varNewPINPadID/*[in]*/);
  HRESULT         __fastcall RequestPINPadLogoff();
  HRESULT         __fastcall get_Uses3DES(long* pVal/*[out,retval]*/);
  long            __fastcall get_Uses3DES(void);
  HRESULT         __fastcall Store3DESWorkingKeys(long lKeyIndex/*[in]*/, 
                                                  VARIANT varMACKeyData/*[in]*/, 
                                                  VARIANT varPINKeyData/*[in]*/);
  HRESULT         __fastcall SelfTest();
  HRESULT         __fastcall Startup();
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_MACBlock(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_MACBlock(void);
  HRESULT         __fastcall get_MACVerifyResult(long* pVal/*[out,retval]*/);
  long            __fastcall get_MACVerifyResult(void);
  HRESULT         __fastcall get_PINPadDetails(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_PINPadDetails(void);
  HRESULT         __fastcall get_ReversalStatus(long* pVal/*[out,retval]*/);
  long            __fastcall get_ReversalStatus(void);
  HRESULT         __fastcall get_ReversalData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_ReversalData(void);
  HRESULT         __fastcall RequestLock();
  HRESULT         __fastcall ReleaseLock();
  HRESULT         __fastcall RequestMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                        long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                        VARIANT varData/*[in]*/);
  HRESULT         __fastcall RequestPINPadDetails();
  HRESULT         __fastcall RequestReversalClear(long lKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalRetrieval(long lKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalStatus(long lMasterKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalStore(long lKeyIndex/*[in]*/, 
                                                  VARIANT varReversalData/*[in]*/);
  HRESULT         __fastcall VerifyMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                       long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                       VARIANT varData/*[in]*/);
  HRESULT         __fastcall Shutdown();
  HRESULT         __fastcall StoreWorkingKeys(long lKeyIndex/*[in]*/, VARIANT varMACKeyData/*[in]*/
                                              , VARIANT varPINKeyData/*[in]*/);

  __property   BSTR            SendRawDataResponse = {read = get_SendRawDataResponse};
  __property   long            KeyLength = {read = get_KeyLength, write = set_KeyLength};
  __property   long            MACType = {read = get_MACType, write = set_MACType};
  __property   long            Uses3DES = {read = get_Uses3DES};

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   long            MACVerifyResult = {read = get_MACVerifyResult};
  __property   long            ReversalStatus = {read = get_ReversalStatus};
};
typedef IBackgroundPinPadControl2DispT<IBackgroundPinPadControl2> IBackgroundPinPadControl2Disp;

// *********************************************************************//
// SmartIntf: TCOMIBackgroundPinPadControl3
// Interface: IBackgroundPinPadControl3
// *********************************************************************//
template <class T /* IBackgroundPinPadControl3 */ >
class TCOMIBackgroundPinPadControl3T : public TComInterface<IBackgroundPinPadControl3>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIBackgroundPinPadControl3T() {}
  TCOMIBackgroundPinPadControl3T(IBackgroundPinPadControl3 *intf, bool addRef = false) : TComInterface<IBackgroundPinPadControl3>(intf, addRef) {}
  TCOMIBackgroundPinPadControl3T(const TCOMIBackgroundPinPadControl3T& src) : TComInterface<IBackgroundPinPadControl3>(src) {}
  TCOMIBackgroundPinPadControl3T& operator=(const TCOMIBackgroundPinPadControl3T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_EMVActionCodeResponse(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVActionCodeResponse(void);
  HRESULT         __fastcall get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVStatusBitmapResponse(void);
  HRESULT         __fastcall get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVDebugDataResponse(void);
  HRESULT         __fastcall get_EMVResponseCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVResponseCode(void);
  HRESULT         __fastcall get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVTLVResponse(void);
  HRESULT         __fastcall get_EMVResponseData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVResponseData(void);
  HRESULT         __fastcall RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                   long StatusBitmap/*[in]*/, VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall RequestEMVAdmin(long lActionCode/*[in]*/, long lStatusBitmap/*[in]*/, 
                                             long lTableID/*[in]*/, long lEntryCount/*[in]*/, 
                                             VARIANT varTableData/*[in]*/);
  HRESULT         __fastcall RequestEMVReadList(VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall RequestEMVWriteList(VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall RequestBGTransaction(BSTR bstrRequestCode/*[in]*/, 
                                                  BSTR bstrExpectedResponse/*[in]*/, 
                                                  long lActionCode/*[in]*/, VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall get_PINPadDeviceType(long* pVal/*[out,retval]*/);
  long            __fastcall get_PINPadDeviceType(void);

  __property   long            EMVActionCodeResponse = {read = get_EMVActionCodeResponse};
  __property   long            EMVStatusBitmapResponse = {read = get_EMVStatusBitmapResponse};
  __property   long            EMVResponseCode = {read = get_EMVResponseCode};
  __property   long            PINPadDeviceType = {read = get_PINPadDeviceType};
};
typedef TCOMIBackgroundPinPadControl3T<IBackgroundPinPadControl3> TCOMIBackgroundPinPadControl3;

// *********************************************************************//
// DispIntf:  IBackgroundPinPadControl3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E617C714-DF3C-4707-B828-5DD2FD17BB0C}
// *********************************************************************//
template<class T>
class IBackgroundPinPadControl3DispT : public TAutoDriver<IBackgroundPinPadControl3>
{
public:
  IBackgroundPinPadControl3DispT(){}

  IBackgroundPinPadControl3DispT(IBackgroundPinPadControl3 *pintf)
  {
    TAutoDriver<IBackgroundPinPadControl3>::Bind(pintf, false);
  }

  IBackgroundPinPadControl3DispT(IBackgroundPinPadControl3Ptr pintf)
  {
    TAutoDriver<IBackgroundPinPadControl3>::Bind(pintf, true);
  }

  IBackgroundPinPadControl3DispT& operator=(IBackgroundPinPadControl3 *pintf)
  {
    TAutoDriver<IBackgroundPinPadControl3>::Bind(pintf, false);
    return *this;
  }

  IBackgroundPinPadControl3DispT& operator=(IBackgroundPinPadControl3Ptr pintf)
  {
    TAutoDriver<IBackgroundPinPadControl3>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_BackgroundPinPadControl2));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_BackgroundPinPadControl2);
  }

  HRESULT         __fastcall get_EMVActionCodeResponse(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVActionCodeResponse(void);
  HRESULT         __fastcall get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVStatusBitmapResponse(void);
  HRESULT         __fastcall get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVDebugDataResponse(void);
  HRESULT         __fastcall get_EMVResponseCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_EMVResponseCode(void);
  HRESULT         __fastcall get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVTLVResponse(void);
  HRESULT         __fastcall get_EMVResponseData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_EMVResponseData(void);
  HRESULT         __fastcall RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                   long StatusBitmap/*[in]*/, VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall RequestEMVAdmin(long lActionCode/*[in]*/, long lStatusBitmap/*[in]*/, 
                                             long lTableID/*[in]*/, long lEntryCount/*[in]*/, 
                                             VARIANT varTableData/*[in]*/);
  HRESULT         __fastcall RequestEMVReadList(VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall RequestEMVWriteList(VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall RequestBGTransaction(BSTR bstrRequestCode/*[in]*/, 
                                                  BSTR bstrExpectedResponse/*[in]*/, 
                                                  long lActionCode/*[in]*/, VARIANT varTLV/*[in]*/);
  HRESULT         __fastcall get_PINPadDeviceType(long* pVal/*[out,retval]*/);
  long            __fastcall get_PINPadDeviceType(void);
  HRESULT         __fastcall get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SendRawDataResponse(void);
  HRESULT         __fastcall get_PINPadID(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_PINPadID(void);
  HRESULT         __fastcall get_KeyLength(long* pVal/*[out,retval]*/);
  long            __fastcall get_KeyLength(void);
  HRESULT         __fastcall set_KeyLength(long pVal/*[in]*/);
  HRESULT         __fastcall get_MACType(long* pVal/*[out,retval]*/);
  long            __fastcall get_MACType(void);
  HRESULT         __fastcall set_MACType(long pVal/*[in]*/);
  HRESULT         __fastcall get_KVC(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_KVC(void);
  HRESULT         __fastcall RequestImageLoad(long lImageNumber/*[in]*/, 
                                              VARIANT varImageData/*[in]*/);
  HRESULT         __fastcall RequestSendRawData(BSTR bstrRawData/*[in]*/);
  HRESULT         __fastcall RequestPINPadLogon(long lKeyIndex/*[in]*/, 
                                                VARIANT varCurrentPassword/*[in]*/, 
                                                VARIANT varNewPassword/*[in]*/);
  HRESULT         __fastcall RequestPINPadMKLoad(long lKeyIndex/*[in]*/, 
                                                 long lDecryptingKeyIndex/*[in]*/, 
                                                 VARIANT varMasterKeyData/*[in]*/, 
                                                 VARIANT varNewPINPadID/*[in]*/);
  HRESULT         __fastcall RequestPINPadLogoff();
  HRESULT         __fastcall get_Uses3DES(long* pVal/*[out,retval]*/);
  long            __fastcall get_Uses3DES(void);
  HRESULT         __fastcall Store3DESWorkingKeys(long lKeyIndex/*[in]*/, 
                                                  VARIANT varMACKeyData/*[in]*/, 
                                                  VARIANT varPINKeyData/*[in]*/);
  HRESULT         __fastcall SelfTest();
  HRESULT         __fastcall Startup();
  HRESULT         __fastcall get_ModuleDescription(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleDescription(void);
  HRESULT         __fastcall get_ModuleName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleName(void);
  HRESULT         __fastcall get_ModuleVersion(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ModuleVersion(void);
  HRESULT         __fastcall get_ResultCode(long* pVal/*[out,retval]*/);
  long            __fastcall get_ResultCode(void);
  HRESULT         __fastcall get_ResultText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ResultText(void);
  HRESULT         __fastcall get_MACBlock(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_MACBlock(void);
  HRESULT         __fastcall get_MACVerifyResult(long* pVal/*[out,retval]*/);
  long            __fastcall get_MACVerifyResult(void);
  HRESULT         __fastcall get_PINPadDetails(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_PINPadDetails(void);
  HRESULT         __fastcall get_ReversalStatus(long* pVal/*[out,retval]*/);
  long            __fastcall get_ReversalStatus(void);
  HRESULT         __fastcall get_ReversalData(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_ReversalData(void);
  HRESULT         __fastcall RequestLock();
  HRESULT         __fastcall ReleaseLock();
  HRESULT         __fastcall RequestMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                        long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                        VARIANT varData/*[in]*/);
  HRESULT         __fastcall RequestPINPadDetails();
  HRESULT         __fastcall RequestReversalClear(long lKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalRetrieval(long lKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalStatus(long lMasterKeyIndex/*[in]*/);
  HRESULT         __fastcall RequestReversalStore(long lKeyIndex/*[in]*/, 
                                                  VARIANT varReversalData/*[in]*/);
  HRESULT         __fastcall VerifyMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                       long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                       VARIANT varData/*[in]*/);
  HRESULT         __fastcall Shutdown();
  HRESULT         __fastcall StoreWorkingKeys(long lKeyIndex/*[in]*/, VARIANT varMACKeyData/*[in]*/
                                              , VARIANT varPINKeyData/*[in]*/);

  __property   long            EMVActionCodeResponse = {read = get_EMVActionCodeResponse};
  __property   long            EMVStatusBitmapResponse = {read = get_EMVStatusBitmapResponse};
  __property   long            EMVResponseCode = {read = get_EMVResponseCode};
  __property   long            PINPadDeviceType = {read = get_PINPadDeviceType};

  __property   BSTR            SendRawDataResponse = {read = get_SendRawDataResponse};
  __property   long            KeyLength = {read = get_KeyLength, write = set_KeyLength};
  __property   long            MACType = {read = get_MACType, write = set_MACType};
  __property   long            Uses3DES = {read = get_Uses3DES};

  __property   BSTR            ModuleDescription = {read = get_ModuleDescription};
  __property   BSTR            ModuleName = {read = get_ModuleName};
  __property   BSTR            ModuleVersion = {read = get_ModuleVersion};
  __property   long            ResultCode = {read = get_ResultCode};
  __property   BSTR            ResultText = {read = get_ResultText};
  __property   long            MACVerifyResult = {read = get_MACVerifyResult};
  __property   long            ReversalStatus = {read = get_ReversalStatus};
};
typedef IBackgroundPinPadControl3DispT<IBackgroundPinPadControl3> IBackgroundPinPadControl3Disp;

// *********************************************************************//
// SmartIntf: TCOMIConfigPinPadControl
// Interface: IConfigPinPadControl
// *********************************************************************//
template <class T /* IConfigPinPadControl */ >
class TCOMIConfigPinPadControlT : public TComInterface<IConfigPinPadControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIConfigPinPadControlT() {}
  TCOMIConfigPinPadControlT(IConfigPinPadControl *intf, bool addRef = false) : TComInterface<IConfigPinPadControl>(intf, addRef) {}
  TCOMIConfigPinPadControlT(const TCOMIConfigPinPadControlT& src) : TComInterface<IConfigPinPadControl>(src) {}
  TCOMIConfigPinPadControlT& operator=(const TCOMIConfigPinPadControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Reset(long Immediate);

};
typedef TCOMIConfigPinPadControlT<IConfigPinPadControl> TCOMIConfigPinPadControl;

// *********************************************************************//
// DispIntf:  IConfigPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {65CAC5B0-303B-11D4-B4DE-00C04F078DAE}
// *********************************************************************//
template<class T>
class IConfigPinPadControlDispT : public TAutoDriver<IConfigPinPadControl>
{
public:
  IConfigPinPadControlDispT(){}

  IConfigPinPadControlDispT(IConfigPinPadControl *pintf)
  {
    TAutoDriver<IConfigPinPadControl>::Bind(pintf, false);
  }

  IConfigPinPadControlDispT(IConfigPinPadControlPtr pintf)
  {
    TAutoDriver<IConfigPinPadControl>::Bind(pintf, true);
  }

  IConfigPinPadControlDispT& operator=(IConfigPinPadControl *pintf)
  {
    TAutoDriver<IConfigPinPadControl>::Bind(pintf, false);
    return *this;
  }

  IConfigPinPadControlDispT& operator=(IConfigPinPadControlPtr pintf)
  {
    TAutoDriver<IConfigPinPadControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ConfigPinPadControl2));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ConfigPinPadControl2);
  }

  HRESULT         __fastcall Reset(long Immediate);

};
typedef IConfigPinPadControlDispT<IConfigPinPadControl> IConfigPinPadControlDisp;

// *********************************************************************//
// DispIntf:  _IForegroundPinPadControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {4B4AB7D3-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
template <class T> HRESULT __fastcall
_IForegroundPinPadControlEventsDispT<T>::PINPadData(long lEventType/*[in]*/)
{
  _TDispID _dispid(/* PINPadData */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = lEventType /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IForegroundPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B4AB7D1-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::SelfTest()
{
  _TDispID _dispid(*this, OLETEXT("SelfTest"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::Startup()
{
  _TDispID _dispid(*this, OLETEXT("Startup"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControlDispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControlDispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControlDispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_ResultCode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControlDispT<T>::get_ResultCode(void)
{
  long pVal;
  this->get_ResultCode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControlDispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_AccountSelection(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountSelection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControlDispT<T>::get_AccountSelection(void)
{
  long pVal;
  this->get_AccountSelection((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_CustomerInput(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerInput"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControlDispT<T>::get_CustomerInput(void)
{
  BSTR pVal;
  this->get_CustomerInput((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_PINBlock(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINBlock"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IForegroundPinPadControlDispT<T>::get_PINBlock(void)
{
  VARIANT pVal;
  this->get_PINBlock((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_Track1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track1Data"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControlDispT<T>::get_Track1Data(void)
{
  BSTR pVal;
  this->get_Track1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_Track2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track2Data"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControlDispT<T>::get_Track2Data(void)
{
  BSTR pVal;
  this->get_Track2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::get_Track3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track3Data"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControlDispT<T>::get_Track3Data(void)
{
  BSTR pVal;
  this->get_Track3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::RequestLock()
{
  _TDispID _dispid(*this, OLETEXT("RequestLock"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::ReleaseLock()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseLock"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::DisplayText(BSTR bstrDisplayText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayText"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = bstrDisplayText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::RequestAccountSelection(BSTR bstrPromptText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestAccountSelection"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::RequestCardSwipe(BSTR bstrPromptText/*[in]*/, 
                                                   long lTracksToRead/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestCardSwipe"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  _args[2] = lTracksToRead /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::RequestPINEntry(BSTR bstrPromptText/*[in]*/, BSTR bstrPAN/*[in]*/
                                                  , long bUseMasterKey/*[in]*/, 
                                                  long lKeyIndex/*[in]*/, long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPINEntry"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  _args[2] = bstrPAN /*[VT_BSTR:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::RequestPromptEntry(long lPromptIndex/*[in]*/, 
                                                     long lMinimumEntryLength/*[in]*/, 
                                                     long lMaximumEntryLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPromptEntry"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = lPromptIndex /*[VT_I4:0]*/;
  _args[2] = lMinimumEntryLength /*[VT_I4:0]*/;
  _args[3] = lMaximumEntryLength /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::RequestCancel()
{
  _TDispID _dispid(*this, OLETEXT("RequestCancel"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControlDispT<T>::Shutdown()
{
  _TDispID _dispid(*this, OLETEXT("Shutdown"), DISPID(22));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IForegroundPinPadControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51FC4126-3B5D-471B-BBCC-AC44192C166A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_SignatureCaptureData(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SignatureCaptureData"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IForegroundPinPadControl2DispT<T>::get_SignatureCaptureData(void)
{
  VARIANT pVal;
  this->get_SignatureCaptureData((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRawDataResponse"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_SendRawDataResponse(void)
{
  BSTR pVal;
  this->get_SendRawDataResponse((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::RequestSignatureCapture()
{
  _TDispID _dispid(*this, OLETEXT("RequestSignatureCapture"), DISPID(25));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::RequestSendRawData(BSTR bstrRawData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestSendRawData"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = bstrRawData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::SelfTest()
{
  _TDispID _dispid(*this, OLETEXT("SelfTest"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::Startup()
{
  _TDispID _dispid(*this, OLETEXT("Startup"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_ResultCode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControl2DispT<T>::get_ResultCode(void)
{
  long pVal;
  this->get_ResultCode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_AccountSelection(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountSelection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControl2DispT<T>::get_AccountSelection(void)
{
  long pVal;
  this->get_AccountSelection((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_CustomerInput(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerInput"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_CustomerInput(void)
{
  BSTR pVal;
  this->get_CustomerInput((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_PINBlock(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINBlock"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IForegroundPinPadControl2DispT<T>::get_PINBlock(void)
{
  VARIANT pVal;
  this->get_PINBlock((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_Track1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track1Data"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_Track1Data(void)
{
  BSTR pVal;
  this->get_Track1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_Track2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track2Data"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_Track2Data(void)
{
  BSTR pVal;
  this->get_Track2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::get_Track3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track3Data"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl2DispT<T>::get_Track3Data(void)
{
  BSTR pVal;
  this->get_Track3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::RequestLock()
{
  _TDispID _dispid(*this, OLETEXT("RequestLock"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::ReleaseLock()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseLock"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::DisplayText(BSTR bstrDisplayText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayText"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = bstrDisplayText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::RequestAccountSelection(BSTR bstrPromptText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestAccountSelection"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::RequestCardSwipe(BSTR bstrPromptText/*[in]*/, 
                                                    long lTracksToRead/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestCardSwipe"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  _args[2] = lTracksToRead /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::RequestPINEntry(BSTR bstrPromptText/*[in]*/, BSTR bstrPAN/*[in]*/
                                                   , long bUseMasterKey/*[in]*/, 
                                                   long lKeyIndex/*[in]*/, long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPINEntry"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  _args[2] = bstrPAN /*[VT_BSTR:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::RequestPromptEntry(long lPromptIndex/*[in]*/, 
                                                      long lMinimumEntryLength/*[in]*/, 
                                                      long lMaximumEntryLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPromptEntry"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = lPromptIndex /*[VT_I4:0]*/;
  _args[2] = lMinimumEntryLength /*[VT_I4:0]*/;
  _args[3] = lMaximumEntryLength /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::RequestCancel()
{
  _TDispID _dispid(*this, OLETEXT("RequestCancel"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl2DispT<T>::Shutdown()
{
  _TDispID _dispid(*this, OLETEXT("Shutdown"), DISPID(22));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIForegroundPinPadControl3
// Interface: IForegroundPinPadControl3
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVActionCodeResponse(long* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVActionCodeResponse(pVal);
}

template <class T> long __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVActionCodeResponse(void)
{
  long pVal;
  OLECHECK(this->get_EMVActionCodeResponse((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVStatusBitmapResponse(pVal);
}

template <class T> long __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVStatusBitmapResponse(void)
{
  long pVal;
  OLECHECK(this->get_EMVStatusBitmapResponse((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVDebugDataResponse(pVal);
}

template <class T> VARIANT __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVDebugDataResponse(void)
{
  VARIANT pVal;
  OLECHECK(this->get_EMVDebugDataResponse((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVResponseCode(long* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVResponseCode(pVal);
}

template <class T> long __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVResponseCode(void)
{
  long pVal;
  OLECHECK(this->get_EMVResponseCode((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVTLVResponse(pVal);
}

template <class T> VARIANT __fastcall
TCOMIForegroundPinPadControl3T<T>::get_EMVTLVResponse(void)
{
  VARIANT pVal;
  OLECHECK(this->get_EMVTLVResponse((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::get_SCData(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SCData(pVal);
}

template <class T> BSTR __fastcall
TCOMIForegroundPinPadControl3T<T>::get_SCData(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SCData((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                         long lStatusBitmap/*[in]*/, 
                                                         BSTR bstrDisplayText/*[in]*/, 
                                                         VARIANT varTLV/*[in]*/)
{
  return (*this)->RequestEMVTransaction(lActionCode, lStatusBitmap, bstrDisplayText, varTLV);
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::RequestCardData(BSTR bstrPromptText/*[in]*/, 
                                                   BSTR bstrChipCardPromptText/*[in]*/, 
                                                   long lTracksToRead/*[in]*/, 
                                                   long lReadType/*[in]*/)
{
  return (*this)->RequestCardData(bstrPromptText, bstrChipCardPromptText, lTracksToRead, lReadType);
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::RequestEjectCard(BSTR bstrPromptText/*[in]*/)
{
  return (*this)->RequestEjectCard(bstrPromptText);
}

template <class T> HRESULT __fastcall
TCOMIForegroundPinPadControl3T<T>::RequestFGTransaction(BSTR bstrCommandCode/*[in]*/, 
                                                        BSTR bstrExpectedResponseCode/*[in]*/, 
                                                        long lActionCode/*[in]*/, 
                                                        VARIANT varTLV/*[in]*/)
{
  return (*this)->RequestFGTransaction(bstrCommandCode, bstrExpectedResponseCode, lActionCode, 
                                       varTLV);
}

// *********************************************************************//
// DispIntf:  IForegroundPinPadControl3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7568AFA7-E598-4154-818A-4BD6971C737A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVActionCodeResponse(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVActionCodeResponse"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVActionCodeResponse(void)
{
  long pVal;
  this->get_EMVActionCodeResponse((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVStatusBitmapResponse"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVStatusBitmapResponse(void)
{
  long pVal;
  this->get_EMVStatusBitmapResponse((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVDebugDataResponse"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVDebugDataResponse(void)
{
  VARIANT pVal;
  this->get_EMVDebugDataResponse((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVResponseCode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVResponseCode"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVResponseCode(void)
{
  long pVal;
  this->get_EMVResponseCode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVTLVResponse"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IForegroundPinPadControl3DispT<T>::get_EMVTLVResponse(void)
{
  VARIANT pVal;
  this->get_EMVTLVResponse((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_SCData(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SCData"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_SCData(void)
{
  BSTR pVal;
  this->get_SCData((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                         long lStatusBitmap/*[in]*/, 
                                                         BSTR bstrDisplayText/*[in]*/, 
                                                         VARIANT varTLV/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestEMVTransaction"), DISPID(33));
  TAutoArgs<4> _args;
  _args[1] = lActionCode /*[VT_I4:0]*/;
  _args[2] = lStatusBitmap /*[VT_I4:0]*/;
  _args[3] = bstrDisplayText /*[VT_BSTR:0]*/;
  _args[4] = varTLV /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestCardData(BSTR bstrPromptText/*[in]*/, 
                                                   BSTR bstrChipCardPromptText/*[in]*/, 
                                                   long lTracksToRead/*[in]*/, 
                                                   long lReadType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestCardData"), DISPID(34));
  TAutoArgs<4> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  _args[2] = bstrChipCardPromptText /*[VT_BSTR:0]*/;
  _args[3] = lTracksToRead /*[VT_I4:0]*/;
  _args[4] = lReadType /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestEjectCard(BSTR bstrPromptText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestEjectCard"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestFGTransaction(BSTR bstrCommandCode/*[in]*/, 
                                                        BSTR bstrExpectedResponseCode/*[in]*/, 
                                                        long lActionCode/*[in]*/, 
                                                        VARIANT varTLV/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestFGTransaction"), DISPID(36));
  TAutoArgs<4> _args;
  _args[1] = bstrCommandCode /*[VT_BSTR:0]*/;
  _args[2] = bstrExpectedResponseCode /*[VT_BSTR:0]*/;
  _args[3] = lActionCode /*[VT_I4:0]*/;
  _args[4] = varTLV /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_SignatureCaptureData(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SignatureCaptureData"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IForegroundPinPadControl3DispT<T>::get_SignatureCaptureData(void)
{
  VARIANT pVal;
  this->get_SignatureCaptureData((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRawDataResponse"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_SendRawDataResponse(void)
{
  BSTR pVal;
  this->get_SendRawDataResponse((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestSignatureCapture()
{
  _TDispID _dispid(*this, OLETEXT("RequestSignatureCapture"), DISPID(25));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestSendRawData(BSTR bstrRawData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestSendRawData"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = bstrRawData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::SelfTest()
{
  _TDispID _dispid(*this, OLETEXT("SelfTest"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::Startup()
{
  _TDispID _dispid(*this, OLETEXT("Startup"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_ResultCode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControl3DispT<T>::get_ResultCode(void)
{
  long pVal;
  this->get_ResultCode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_AccountSelection(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountSelection"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IForegroundPinPadControl3DispT<T>::get_AccountSelection(void)
{
  long pVal;
  this->get_AccountSelection((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_CustomerInput(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerInput"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_CustomerInput(void)
{
  BSTR pVal;
  this->get_CustomerInput((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_PINBlock(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINBlock"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IForegroundPinPadControl3DispT<T>::get_PINBlock(void)
{
  VARIANT pVal;
  this->get_PINBlock((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_Track1Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track1Data"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_Track1Data(void)
{
  BSTR pVal;
  this->get_Track1Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_Track2Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track2Data"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_Track2Data(void)
{
  BSTR pVal;
  this->get_Track2Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::get_Track3Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Track3Data"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IForegroundPinPadControl3DispT<T>::get_Track3Data(void)
{
  BSTR pVal;
  this->get_Track3Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestLock()
{
  _TDispID _dispid(*this, OLETEXT("RequestLock"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::ReleaseLock()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseLock"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::DisplayText(BSTR bstrDisplayText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayText"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = bstrDisplayText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestAccountSelection(BSTR bstrPromptText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestAccountSelection"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestCardSwipe(BSTR bstrPromptText/*[in]*/, 
                                                    long lTracksToRead/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestCardSwipe"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  _args[2] = lTracksToRead /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestPINEntry(BSTR bstrPromptText/*[in]*/, BSTR bstrPAN/*[in]*/
                                                   , long bUseMasterKey/*[in]*/, 
                                                   long lKeyIndex/*[in]*/, long lAmount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPINEntry"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = bstrPromptText /*[VT_BSTR:0]*/;
  _args[2] = bstrPAN /*[VT_BSTR:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = lAmount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestPromptEntry(long lPromptIndex/*[in]*/, 
                                                      long lMinimumEntryLength/*[in]*/, 
                                                      long lMaximumEntryLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPromptEntry"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = lPromptIndex /*[VT_I4:0]*/;
  _args[2] = lMinimumEntryLength /*[VT_I4:0]*/;
  _args[3] = lMaximumEntryLength /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::RequestCancel()
{
  _TDispID _dispid(*this, OLETEXT("RequestCancel"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IForegroundPinPadControl3DispT<T>::Shutdown()
{
  _TDispID _dispid(*this, OLETEXT("Shutdown"), DISPID(22));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IBackgroundPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B4AB7D6-67C5-11D3-8CDD-0008C7CAB6B7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::SelfTest()
{
  _TDispID _dispid(*this, OLETEXT("SelfTest"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::Startup()
{
  _TDispID _dispid(*this, OLETEXT("Startup"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControlDispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControlDispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControlDispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_ResultCode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControlDispT<T>::get_ResultCode(void)
{
  long pVal;
  this->get_ResultCode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControlDispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_MACBlock(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACBlock"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControlDispT<T>::get_MACBlock(void)
{
  VARIANT pVal;
  this->get_MACBlock((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_MACVerifyResult(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACVerifyResult"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControlDispT<T>::get_MACVerifyResult(void)
{
  long pVal;
  this->get_MACVerifyResult((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_PINPadDetails(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINPadDetails"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControlDispT<T>::get_PINPadDetails(void)
{
  VARIANT pVal;
  this->get_PINPadDetails((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_ReversalStatus(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReversalStatus"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControlDispT<T>::get_ReversalStatus(void)
{
  long pVal;
  this->get_ReversalStatus((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::get_ReversalData(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReversalData"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControlDispT<T>::get_ReversalData(void)
{
  VARIANT pVal;
  this->get_ReversalData((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::RequestLock()
{
  _TDispID _dispid(*this, OLETEXT("RequestLock"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::ReleaseLock()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseLock"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::RequestMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                             long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                             VARIANT varData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestMAC"), DISPID(15));
  TAutoArgs<5> _args;
  _args[1] = bTerminalMAC /*[VT_I4:0]*/;
  _args[2] = lMACType /*[VT_I4:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = varData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::RequestPINPadDetails()
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadDetails"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::RequestReversalClear(long lKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalClear"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::RequestReversalRetrieval(long lKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalRetrieval"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::RequestReversalStatus(long lMasterKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalStatus"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = lMasterKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::RequestReversalStore(long lKeyIndex/*[in]*/, 
                                                       VARIANT varReversalData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalStore"), DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varReversalData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::VerifyMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                            long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                            VARIANT varData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerifyMAC"), DISPID(21));
  TAutoArgs<5> _args;
  _args[1] = bTerminalMAC /*[VT_I4:0]*/;
  _args[2] = lMACType /*[VT_I4:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = varData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::Shutdown()
{
  _TDispID _dispid(*this, OLETEXT("Shutdown"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControlDispT<T>::StoreWorkingKeys(long lKeyIndex/*[in]*/, 
                                                   VARIANT varMACKeyData/*[in]*/, 
                                                   VARIANT varPINKeyData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StoreWorkingKeys"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varMACKeyData /*[VT_VARIANT:0]*/;
  _args[3] = varPINKeyData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IBackgroundPinPadControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B2C89FD-2268-4C46-8B5F-60AE34873F3E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRawDataResponse"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl2DispT<T>::get_SendRawDataResponse(void)
{
  BSTR pVal;
  this->get_SendRawDataResponse((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_PINPadID(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINPadID"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl2DispT<T>::get_PINPadID(void)
{
  VARIANT pVal;
  this->get_PINPadID((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_KeyLength(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyLength"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl2DispT<T>::get_KeyLength(void)
{
  long pVal;
  this->get_KeyLength((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::set_KeyLength(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyLength"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_MACType(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACType"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl2DispT<T>::get_MACType(void)
{
  long pVal;
  this->get_MACType((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::set_MACType(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACType"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_KVC(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KVC"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl2DispT<T>::get_KVC(void)
{
  VARIANT pVal;
  this->get_KVC((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestImageLoad(long lImageNumber/*[in]*/, 
                                                    VARIANT varImageData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestImageLoad"), DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = lImageNumber /*[VT_I4:0]*/;
  _args[2] = varImageData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestSendRawData(BSTR bstrRawData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestSendRawData"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = bstrRawData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestPINPadLogon(long lKeyIndex/*[in]*/, 
                                                      VARIANT varCurrentPassword/*[in]*/, 
                                                      VARIANT varNewPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadLogon"), DISPID(31));
  TAutoArgs<3> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varCurrentPassword /*[VT_VARIANT:0]*/;
  _args[3] = varNewPassword /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestPINPadMKLoad(long lKeyIndex/*[in]*/, 
                                                       long lDecryptingKeyIndex/*[in]*/, 
                                                       VARIANT varMasterKeyData/*[in]*/, 
                                                       VARIANT varNewPINPadID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadMKLoad"), DISPID(32));
  TAutoArgs<4> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = lDecryptingKeyIndex /*[VT_I4:0]*/;
  _args[3] = varMasterKeyData /*[VT_VARIANT:0]*/;
  _args[4] = varNewPINPadID /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestPINPadLogoff()
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadLogoff"), DISPID(33));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_Uses3DES(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Uses3DES"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl2DispT<T>::get_Uses3DES(void)
{
  long pVal;
  this->get_Uses3DES((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::Store3DESWorkingKeys(long lKeyIndex/*[in]*/, 
                                                        VARIANT varMACKeyData/*[in]*/, 
                                                        VARIANT varPINKeyData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Store3DESWorkingKeys"), DISPID(35));
  TAutoArgs<3> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varMACKeyData /*[VT_VARIANT:0]*/;
  _args[3] = varPINKeyData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::SelfTest()
{
  _TDispID _dispid(*this, OLETEXT("SelfTest"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::Startup()
{
  _TDispID _dispid(*this, OLETEXT("Startup"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl2DispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl2DispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl2DispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_ResultCode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl2DispT<T>::get_ResultCode(void)
{
  long pVal;
  this->get_ResultCode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl2DispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_MACBlock(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACBlock"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl2DispT<T>::get_MACBlock(void)
{
  VARIANT pVal;
  this->get_MACBlock((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_MACVerifyResult(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACVerifyResult"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl2DispT<T>::get_MACVerifyResult(void)
{
  long pVal;
  this->get_MACVerifyResult((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_PINPadDetails(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINPadDetails"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl2DispT<T>::get_PINPadDetails(void)
{
  VARIANT pVal;
  this->get_PINPadDetails((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_ReversalStatus(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReversalStatus"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl2DispT<T>::get_ReversalStatus(void)
{
  long pVal;
  this->get_ReversalStatus((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::get_ReversalData(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReversalData"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl2DispT<T>::get_ReversalData(void)
{
  VARIANT pVal;
  this->get_ReversalData((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestLock()
{
  _TDispID _dispid(*this, OLETEXT("RequestLock"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::ReleaseLock()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseLock"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                              long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                              VARIANT varData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestMAC"), DISPID(15));
  TAutoArgs<5> _args;
  _args[1] = bTerminalMAC /*[VT_I4:0]*/;
  _args[2] = lMACType /*[VT_I4:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = varData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestPINPadDetails()
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadDetails"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestReversalClear(long lKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalClear"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestReversalRetrieval(long lKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalRetrieval"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestReversalStatus(long lMasterKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalStatus"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = lMasterKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::RequestReversalStore(long lKeyIndex/*[in]*/, 
                                                        VARIANT varReversalData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalStore"), DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varReversalData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::VerifyMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                             long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                             VARIANT varData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerifyMAC"), DISPID(21));
  TAutoArgs<5> _args;
  _args[1] = bTerminalMAC /*[VT_I4:0]*/;
  _args[2] = lMACType /*[VT_I4:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = varData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::Shutdown()
{
  _TDispID _dispid(*this, OLETEXT("Shutdown"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl2DispT<T>::StoreWorkingKeys(long lKeyIndex/*[in]*/, 
                                                    VARIANT varMACKeyData/*[in]*/, 
                                                    VARIANT varPINKeyData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StoreWorkingKeys"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varMACKeyData /*[VT_VARIANT:0]*/;
  _args[3] = varPINKeyData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIBackgroundPinPadControl3
// Interface: IBackgroundPinPadControl3
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVActionCodeResponse(long* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVActionCodeResponse(pVal);
}

template <class T> long __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVActionCodeResponse(void)
{
  long pVal;
  OLECHECK(this->get_EMVActionCodeResponse((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVStatusBitmapResponse(pVal);
}

template <class T> long __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVStatusBitmapResponse(void)
{
  long pVal;
  OLECHECK(this->get_EMVStatusBitmapResponse((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVDebugDataResponse(pVal);
}

template <class T> VARIANT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVDebugDataResponse(void)
{
  VARIANT pVal;
  OLECHECK(this->get_EMVDebugDataResponse((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVResponseCode(long* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVResponseCode(pVal);
}

template <class T> long __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVResponseCode(void)
{
  long pVal;
  OLECHECK(this->get_EMVResponseCode((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVTLVResponse(pVal);
}

template <class T> VARIANT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVTLVResponse(void)
{
  VARIANT pVal;
  OLECHECK(this->get_EMVTLVResponse((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVResponseData(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_EMVResponseData(pVal);
}

template <class T> VARIANT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_EMVResponseData(void)
{
  VARIANT pVal;
  OLECHECK(this->get_EMVResponseData((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                         long StatusBitmap/*[in]*/, 
                                                         VARIANT varTLV/*[in]*/)
{
  return (*this)->RequestEMVTransaction(lActionCode, StatusBitmap, varTLV);
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::RequestEMVAdmin(long lActionCode/*[in]*/, 
                                                   long lStatusBitmap/*[in]*/, long lTableID/*[in]*/, 
                                                   long lEntryCount/*[in]*/, 
                                                   VARIANT varTableData/*[in]*/)
{
  return (*this)->RequestEMVAdmin(lActionCode, lStatusBitmap, lTableID, lEntryCount, varTableData);
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::RequestEMVReadList(VARIANT varTLV/*[in]*/)
{
  return (*this)->RequestEMVReadList(varTLV);
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::RequestEMVWriteList(VARIANT varTLV/*[in]*/)
{
  return (*this)->RequestEMVWriteList(varTLV);
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::RequestBGTransaction(BSTR bstrRequestCode/*[in]*/, 
                                                        BSTR bstrExpectedResponse/*[in]*/, 
                                                        long lActionCode/*[in]*/, 
                                                        VARIANT varTLV/*[in]*/)
{
  return (*this)->RequestBGTransaction(bstrRequestCode, bstrExpectedResponse, lActionCode, varTLV);
}

template <class T> HRESULT __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_PINPadDeviceType(long* pVal/*[out,retval]*/)
{
  return (*this)->get_PINPadDeviceType(pVal);
}

template <class T> long __fastcall
TCOMIBackgroundPinPadControl3T<T>::get_PINPadDeviceType(void)
{
  long pVal;
  OLECHECK(this->get_PINPadDeviceType((long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IBackgroundPinPadControl3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E617C714-DF3C-4707-B828-5DD2FD17BB0C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVActionCodeResponse(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVActionCodeResponse"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVActionCodeResponse(void)
{
  long pVal;
  this->get_EMVActionCodeResponse((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVStatusBitmapResponse(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVStatusBitmapResponse"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVStatusBitmapResponse(void)
{
  long pVal;
  this->get_EMVStatusBitmapResponse((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVDebugDataResponse(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVDebugDataResponse"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVDebugDataResponse(void)
{
  VARIANT pVal;
  this->get_EMVDebugDataResponse((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVResponseCode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVResponseCode"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVResponseCode(void)
{
  long pVal;
  this->get_EMVResponseCode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVTLVResponse(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVTLVResponse"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVTLVResponse(void)
{
  VARIANT pVal;
  this->get_EMVTLVResponse((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVResponseData(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EMVResponseData"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl3DispT<T>::get_EMVResponseData(void)
{
  VARIANT pVal;
  this->get_EMVResponseData((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestEMVTransaction(long lActionCode/*[in]*/, 
                                                         long StatusBitmap/*[in]*/, 
                                                         VARIANT varTLV/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestEMVTransaction"), DISPID(42));
  TAutoArgs<3> _args;
  _args[1] = lActionCode /*[VT_I4:0]*/;
  _args[2] = StatusBitmap /*[VT_I4:0]*/;
  _args[3] = varTLV /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestEMVAdmin(long lActionCode/*[in]*/, 
                                                   long lStatusBitmap/*[in]*/, long lTableID/*[in]*/
                                                   , long lEntryCount/*[in]*/, 
                                                   VARIANT varTableData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestEMVAdmin"), DISPID(43));
  TAutoArgs<5> _args;
  _args[1] = lActionCode /*[VT_I4:0]*/;
  _args[2] = lStatusBitmap /*[VT_I4:0]*/;
  _args[3] = lTableID /*[VT_I4:0]*/;
  _args[4] = lEntryCount /*[VT_I4:0]*/;
  _args[5] = varTableData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestEMVReadList(VARIANT varTLV/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestEMVReadList"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = varTLV /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestEMVWriteList(VARIANT varTLV/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestEMVWriteList"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = varTLV /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestBGTransaction(BSTR bstrRequestCode/*[in]*/, 
                                                        BSTR bstrExpectedResponse/*[in]*/, 
                                                        long lActionCode/*[in]*/, 
                                                        VARIANT varTLV/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestBGTransaction"), DISPID(46));
  TAutoArgs<4> _args;
  _args[1] = bstrRequestCode /*[VT_BSTR:0]*/;
  _args[2] = bstrExpectedResponse /*[VT_BSTR:0]*/;
  _args[3] = lActionCode /*[VT_I4:0]*/;
  _args[4] = varTLV /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_PINPadDeviceType(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINPadDeviceType"), DISPID(47));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_PINPadDeviceType(void)
{
  long pVal;
  this->get_PINPadDeviceType((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_SendRawDataResponse(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRawDataResponse"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl3DispT<T>::get_SendRawDataResponse(void)
{
  BSTR pVal;
  this->get_SendRawDataResponse((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_PINPadID(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINPadID"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl3DispT<T>::get_PINPadID(void)
{
  VARIANT pVal;
  this->get_PINPadID((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_KeyLength(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyLength"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_KeyLength(void)
{
  long pVal;
  this->get_KeyLength((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::set_KeyLength(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyLength"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_MACType(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACType"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_MACType(void)
{
  long pVal;
  this->get_MACType((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::set_MACType(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACType"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_KVC(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KVC"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl3DispT<T>::get_KVC(void)
{
  VARIANT pVal;
  this->get_KVC((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestImageLoad(long lImageNumber/*[in]*/, 
                                                    VARIANT varImageData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestImageLoad"), DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = lImageNumber /*[VT_I4:0]*/;
  _args[2] = varImageData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestSendRawData(BSTR bstrRawData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestSendRawData"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = bstrRawData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestPINPadLogon(long lKeyIndex/*[in]*/, 
                                                      VARIANT varCurrentPassword/*[in]*/, 
                                                      VARIANT varNewPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadLogon"), DISPID(31));
  TAutoArgs<3> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varCurrentPassword /*[VT_VARIANT:0]*/;
  _args[3] = varNewPassword /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestPINPadMKLoad(long lKeyIndex/*[in]*/, 
                                                       long lDecryptingKeyIndex/*[in]*/, 
                                                       VARIANT varMasterKeyData/*[in]*/, 
                                                       VARIANT varNewPINPadID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadMKLoad"), DISPID(32));
  TAutoArgs<4> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = lDecryptingKeyIndex /*[VT_I4:0]*/;
  _args[3] = varMasterKeyData /*[VT_VARIANT:0]*/;
  _args[4] = varNewPINPadID /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestPINPadLogoff()
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadLogoff"), DISPID(33));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_Uses3DES(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Uses3DES"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_Uses3DES(void)
{
  long pVal;
  this->get_Uses3DES((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::Store3DESWorkingKeys(long lKeyIndex/*[in]*/, 
                                                        VARIANT varMACKeyData/*[in]*/, 
                                                        VARIANT varPINKeyData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Store3DESWorkingKeys"), DISPID(35));
  TAutoArgs<3> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varMACKeyData /*[VT_VARIANT:0]*/;
  _args[3] = varPINKeyData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::SelfTest()
{
  _TDispID _dispid(*this, OLETEXT("SelfTest"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::Startup()
{
  _TDispID _dispid(*this, OLETEXT("Startup"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_ModuleDescription(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleDescription"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl3DispT<T>::get_ModuleDescription(void)
{
  BSTR pVal;
  this->get_ModuleDescription((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_ModuleName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl3DispT<T>::get_ModuleName(void)
{
  BSTR pVal;
  this->get_ModuleName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_ModuleVersion(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModuleVersion"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl3DispT<T>::get_ModuleVersion(void)
{
  BSTR pVal;
  this->get_ModuleVersion((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_ResultCode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultCode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_ResultCode(void)
{
  long pVal;
  this->get_ResultCode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_ResultText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResultText"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBackgroundPinPadControl3DispT<T>::get_ResultText(void)
{
  BSTR pVal;
  this->get_ResultText((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_MACBlock(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACBlock"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl3DispT<T>::get_MACBlock(void)
{
  VARIANT pVal;
  this->get_MACBlock((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_MACVerifyResult(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MACVerifyResult"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_MACVerifyResult(void)
{
  long pVal;
  this->get_MACVerifyResult((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_PINPadDetails(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PINPadDetails"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl3DispT<T>::get_PINPadDetails(void)
{
  VARIANT pVal;
  this->get_PINPadDetails((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_ReversalStatus(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReversalStatus"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBackgroundPinPadControl3DispT<T>::get_ReversalStatus(void)
{
  long pVal;
  this->get_ReversalStatus((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::get_ReversalData(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReversalData"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBackgroundPinPadControl3DispT<T>::get_ReversalData(void)
{
  VARIANT pVal;
  this->get_ReversalData((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestLock()
{
  _TDispID _dispid(*this, OLETEXT("RequestLock"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::ReleaseLock()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseLock"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                              long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                              VARIANT varData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestMAC"), DISPID(15));
  TAutoArgs<5> _args;
  _args[1] = bTerminalMAC /*[VT_I4:0]*/;
  _args[2] = lMACType /*[VT_I4:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = varData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestPINPadDetails()
{
  _TDispID _dispid(*this, OLETEXT("RequestPINPadDetails"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestReversalClear(long lKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalClear"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestReversalRetrieval(long lKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalRetrieval"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestReversalStatus(long lMasterKeyIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalStatus"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = lMasterKeyIndex /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::RequestReversalStore(long lKeyIndex/*[in]*/, 
                                                        VARIANT varReversalData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestReversalStore"), DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varReversalData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::VerifyMAC(long bTerminalMAC/*[in]*/, long lMACType/*[in]*/, 
                                             long bUseMasterKey/*[in]*/, long lKeyIndex/*[in]*/, 
                                             VARIANT varData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerifyMAC"), DISPID(21));
  TAutoArgs<5> _args;
  _args[1] = bTerminalMAC /*[VT_I4:0]*/;
  _args[2] = lMACType /*[VT_I4:0]*/;
  _args[3] = bUseMasterKey /*[VT_I4:0]*/;
  _args[4] = lKeyIndex /*[VT_I4:0]*/;
  _args[5] = varData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::Shutdown()
{
  _TDispID _dispid(*this, OLETEXT("Shutdown"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBackgroundPinPadControl3DispT<T>::StoreWorkingKeys(long lKeyIndex/*[in]*/, 
                                                    VARIANT varMACKeyData/*[in]*/, 
                                                    VARIANT varPINKeyData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StoreWorkingKeys"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = lKeyIndex /*[VT_I4:0]*/;
  _args[2] = varMACKeyData /*[VT_VARIANT:0]*/;
  _args[3] = varPINKeyData /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIConfigPinPadControl
// Interface: IConfigPinPadControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIConfigPinPadControlT<T>::Reset(long Immediate)
{
  return (*this)->Reset(Immediate);
}

// *********************************************************************//
// DispIntf:  IConfigPinPadControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {65CAC5B0-303B-11D4-B4DE-00C04F078DAE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IConfigPinPadControlDispT<T>::Reset(long Immediate)
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Immediate /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ForegroundPinPadControl2
// Interface: TCOMIForegroundPinPadControl3
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIForegroundPinPadControl3, IForegroundPinPadControl3, &CLSID_ForegroundPinPadControl2, &IID_IForegroundPinPadControl3> CoForegroundPinPadControl2;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : BackgroundPinPadControl2
// Interface: TCOMIBackgroundPinPadControl3
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIBackgroundPinPadControl3, IBackgroundPinPadControl3, &CLSID_BackgroundPinPadControl2, &IID_IBackgroundPinPadControl3> CoBackgroundPinPadControl2;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ConfigPinPadControl2
// Interface: TCOMIConfigPinPadControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIConfigPinPadControl, IConfigPinPadControl, &CLSID_ConfigPinPadControl2, &IID_IConfigPinPadControl> CoConfigPinPadControl2;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ForegroundPinPadControl2
// Event Interface : _IForegroundPinPadControlEvents
// *********************************************************************//
template <class T>
class TEvents_ForegroundPinPadControl2 : public IConnectionPointImpl<T,
                                                 &DIID__IForegroundPinPadControlEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_PINPadData(long lEventType);
protected:
  _IForegroundPinPadControlEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_ForegroundPinPadControl2<T>::Fire_PINPadData(long lEventType)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PINPadData(lEventType);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Pinpadcontrol2lib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Pinpadcontrol2lib_tlb;
#endif

#pragma option pop

#endif // PINPADCONTROL2Lib_TLBH
