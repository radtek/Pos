// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 14/12/2010 2:51:56 p.m. from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\SysWow64\ENZEFT.ocx (1)
// LIBID: {4D7EB042-6114-4092-B1FF-BCD4B2939D91}
// LCID: 0
// Helpfile: 
// HelpString: ENZEFT OLE Control module
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   ENZEFTLib_TLBH
#define   ENZEFTLib_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Enzeftlib_tlb
{

// *********************************************************************//
// HelpString: ENZEFT OLE Control module
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_ENZEFTLib;
extern __declspec (package) const GUID DIID__DENZEFT;
extern __declspec (package) const GUID DIID__DENZEFTEvents;
extern __declspec (package) const GUID CLSID_ENZEFT;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{74481918-EBF7-4D38-8D64-D2962775C529}") _DENZEFT;
typedef TComInterface<_DENZEFT, &DIID__DENZEFT> _DENZEFTPtr;

interface DECLSPEC_UUID("{5E7AD773-28B0-4A3F-9EC8-6F21B91F662E}") _DENZEFTEvents;
typedef TComInterface<_DENZEFTEvents, &DIID__DENZEFTEvents> _DENZEFTEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _DENZEFT ENZEFT;
typedef _DENZEFTPtr ENZEFTPtr;

#define LIBID_OF_ENZEFT (&LIBID_ENZEFTLib)
// *********************************************************************//
// Interface: _DENZEFT
// Flags:     (4112) Hidden Dispatchable
// GUID:      {74481918-EBF7-4D38-8D64-D2962775C529}
// *********************************************************************//
interface _DENZEFT : public TDispWrapper<IDispatch>
{
  void __fastcall AboutBox()
  {
    _TDispID _dispid(/* AboutBox */ DISPID(-552));
    OleProcedure(_dispid);
  }

  void __fastcall DoGetPending()
  {
    _TDispID _dispid(/* DoGetPending */ DISPID(159));
    OleProcedure(_dispid);
  }

  void __fastcall DoTestComms()
  {
    _TDispID _dispid(/* DoTestComms */ DISPID(158));
    OleProcedure(_dispid);
  }

  void __fastcall DoSetAutoLogonTime()
  {
    _TDispID _dispid(/* DoSetAutoLogonTime */ DISPID(157));
    OleProcedure(_dispid);
  }

  void __fastcall DoSetFocus(VARIANT_BOOL EnableFocus)
  {
    _TDispID _dispid(/* DoSetFocus */ DISPID(156));
    TAutoArgs<1> _args;
    _args[1] = EnableFocus /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DoConfigMerchant()
  {
    _TDispID _dispid(/* DoConfigMerchant */ DISPID(155));
    OleProcedure(_dispid);
  }

  void __fastcall CsdReservedMethod6()
  {
    _TDispID _dispid(/* CsdReservedMethod6 */ DISPID(154));
    OleProcedure(_dispid);
  }

  void __fastcall CsdReservedMethod5()
  {
    _TDispID _dispid(/* CsdReservedMethod5 */ DISPID(152));
    OleProcedure(_dispid);
  }

  void __fastcall DoAddTip()
  {
    _TDispID _dispid(/* DoAddTip */ DISPID(151));
    OleProcedure(_dispid);
  }

  void __fastcall DoUploadTip()
  {
    _TDispID _dispid(/* DoUploadTip */ DISPID(150));
    OleProcedure(_dispid);
  }

  void __fastcall DoGetMerchants()
  {
    _TDispID _dispid(/* DoGetMerchants */ DISPID(149));
    OleProcedure(_dispid);
  }

  void __fastcall DoShowDialog(VARIANT_BOOL Show)
  {
    _TDispID _dispid(/* DoShowDialog */ DISPID(148));
    TAutoArgs<1> _args;
    _args[1] = Show /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DoVoidTip()
  {
    _TDispID _dispid(/* DoVoidTip */ DISPID(147));
    OleProcedure(_dispid);
  }

  void __fastcall DoJournalViewer()
  {
    _TDispID _dispid(/* DoJournalViewer */ DISPID(146));
    OleProcedure(_dispid);
  }

  void __fastcall DoSoftwareActivate()
  {
    _TDispID _dispid(/* DoSoftwareActivate */ DISPID(145));
    OleProcedure(_dispid);
  }

  void __fastcall DoSoftwareDownload()
  {
    _TDispID _dispid(/* DoSoftwareDownload */ DISPID(144));
    OleProcedure(_dispid);
  }

  void __fastcall DoLastSettlement()
  {
    _TDispID _dispid(/* DoLastSettlement */ DISPID(143));
    OleProcedure(_dispid);
  }

  void __fastcall DoSubTotals()
  {
    _TDispID _dispid(/* DoSubTotals */ DISPID(142));
    OleProcedure(_dispid);
  }

  void __fastcall DoTransaction()
  {
    _TDispID _dispid(/* DoTransaction */ DISPID(141));
    OleProcedure(_dispid);
  }

  void __fastcall DoStatus()
  {
    _TDispID _dispid(/* DoStatus */ DISPID(140));
    OleProcedure(_dispid);
  }

  void __fastcall DoSettlementReconcile()
  {
    _TDispID _dispid(/* DoSettlementReconcile */ DISPID(139));
    OleProcedure(_dispid);
  }

  void __fastcall DoSettlementEnquiry()
  {
    _TDispID _dispid(/* DoSettlementEnquiry */ DISPID(138));
    OleProcedure(_dispid);
  }

  void __fastcall DoSettlementCutover()
  {
    _TDispID _dispid(/* DoSettlementCutover */ DISPID(137));
    OleProcedure(_dispid);
  }

  void __fastcall DoSelfTest()
  {
    _TDispID _dispid(/* DoSelfTest */ DISPID(136));
    OleProcedure(_dispid);
  }

  void __fastcall DoReprintReceiptFromTxnRef()
  {
    _TDispID _dispid(/* DoReprintReceiptFromTxnRef */ DISPID(135));
    OleProcedure(_dispid);
  }

  void __fastcall DoReprintReceiptFromStan()
  {
    _TDispID _dispid(/* DoReprintReceiptFromStan */ DISPID(134));
    OleProcedure(_dispid);
  }

  void __fastcall DoReprintReceipt()
  {
    _TDispID _dispid(/* DoReprintReceipt */ DISPID(133));
    OleProcedure(_dispid);
  }

  void __fastcall DoQueryCard()
  {
    _TDispID _dispid(/* DoQueryCard */ DISPID(132));
    OleProcedure(_dispid);
  }

  void __fastcall DoLogon()
  {
    _TDispID _dispid(/* DoLogon */ DISPID(131));
    OleProcedure(_dispid);
  }

  void __fastcall DoInvokeApplet(BSTR Applet)
  {
    _TDispID _dispid(/* DoInvokeApplet */ DISPID(130));
    TAutoArgs<1> _args;
    _args[1] = Applet /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DoGetReceiptFromTxnRef()
  {
    _TDispID _dispid(/* DoGetReceiptFromTxnRef */ DISPID(129));
    OleProcedure(_dispid);
  }

  void __fastcall DoSearchTip()
  {
    _TDispID _dispid(/* DoSearchTip */ DISPID(128));
    OleProcedure(_dispid);
  }

  void __fastcall DoGetLastTransaction()
  {
    _TDispID _dispid(/* DoGetLastTransaction */ DISPID(127));
    OleProcedure(_dispid);
  }

  void __fastcall DoGetLastReceipt()
  {
    _TDispID _dispid(/* DoGetLastReceipt */ DISPID(126));
    OleProcedure(_dispid);
  }

  void __fastcall DoDisplayStatus()
  {
    _TDispID _dispid(/* DoDisplayStatus */ DISPID(125));
    OleProcedure(_dispid);
  }

  void __fastcall DoControlPanel()
  {
    _TDispID _dispid(/* DoControlPanel */ DISPID(124));
    OleProcedure(_dispid);
  }

  void __fastcall DoChequeVerify()
  {
    _TDispID _dispid(/* DoChequeVerify */ DISPID(123));
    OleProcedure(_dispid);
  }

  void __fastcall DoCardSwipe()
  {
    _TDispID _dispid(/* DoCardSwipe */ DISPID(122));
    OleProcedure(_dispid);
  }

  void __fastcall DoReset()
  {
    _TDispID _dispid(/* DoReset */ DISPID(121));
    OleProcedure(_dispid);
  }

  void __fastcall set_DateSettlement(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* DateSettlement */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_DateSettlement()
  {
    _TDispID _dispid(/* DateSettlement */ DISPID(13));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableTip(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* EnableTip */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_EnableTip()
  {
    _TDispID _dispid(/* EnableTip */ DISPID(37));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleTotalPurchase(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* SettleTotalPurchase */ DISPID(63));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_SettleTotalPurchase()
  {
    _TDispID _dispid(/* SettleTotalPurchase */ DISPID(63));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DialogType(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* DialogType */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_DialogType()
  {
    _TDispID _dispid(/* DialogType */ DISPID(14));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AccountType(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* AccountType */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_AccountType()
  {
    _TDispID _dispid(/* AccountType */ DISPID(15));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DialogY(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* DialogY */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_DialogY()
  {
    _TDispID _dispid(/* DialogY */ DISPID(12));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DialogX(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* DialogX */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_DialogX()
  {
    _TDispID _dispid(/* DialogX */ DISPID(11));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Aiic(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Aiic */ DISPID(62));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Aiic()
  {
    _TDispID _dispid(/* Aiic */ DISPID(62));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_VersionMajor(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* VersionMajor */ DISPID(57));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_VersionMajor()
  {
    _TDispID _dispid(/* VersionMajor */ DISPID(57));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableErrorDialog(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* EnableErrorDialog */ DISPID(60));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_EnableErrorDialog()
  {
    _TDispID _dispid(/* EnableErrorDialog */ DISPID(60));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_VersionRevision(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* VersionRevision */ DISPID(59));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_VersionRevision()
  {
    _TDispID _dispid(/* VersionRevision */ DISPID(59));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_VersionMinor(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* VersionMinor */ DISPID(58));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_VersionMinor()
  {
    _TDispID _dispid(/* VersionMinor */ DISPID(58));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AuthCode(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* AuthCode */ DISPID(65));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_AuthCode()
  {
    _TDispID _dispid(/* AuthCode */ DISPID(65));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleTotalRefund(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* SettleTotalRefund */ DISPID(64));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_SettleTotalRefund()
  {
    _TDispID _dispid(/* SettleTotalRefund */ DISPID(64));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Filename(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Filename */ DISPID(61));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Filename()
  {
    _TDispID _dispid(/* Filename */ DISPID(61));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Merchant(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Merchant */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Merchant()
  {
    _TDispID _dispid(/* Merchant */ DISPID(8));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PanSource(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PanSource */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PanSource()
  {
    _TDispID _dispid(/* PanSource */ DISPID(5));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ResponseCode(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ResponseCode */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ResponseCode()
  {
    _TDispID _dispid(/* ResponseCode */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Track2(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Track2 */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Track2()
  {
    _TDispID _dispid(/* Track2 */ DISPID(9));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Receipt(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Receipt */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Receipt()
  {
    _TDispID _dispid(/* Receipt */ DISPID(20));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Nii(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Nii */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Nii()
  {
    _TDispID _dispid(/* Nii */ DISPID(7));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Pan(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Pan */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Pan()
  {
    _TDispID _dispid(/* Pan */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ResponseText(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ResponseText */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ResponseText()
  {
    _TDispID _dispid(/* ResponseText */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TxnRef(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* TxnRef */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_TxnRef()
  {
    _TDispID _dispid(/* TxnRef */ DISPID(16));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DataField(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* DataField */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_DataField()
  {
    _TDispID _dispid(/* DataField */ DISPID(19));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PinPadSerialNumber(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PinPadSerialNumber */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PinPadSerialNumber()
  {
    _TDispID _dispid(/* PinPadSerialNumber */ DISPID(18));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PinPadVersion(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PinPadVersion */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PinPadVersion()
  {
    _TDispID _dispid(/* PinPadVersion */ DISPID(17));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Stan(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Stan */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Stan()
  {
    _TDispID _dispid(/* Stan */ DISPID(4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TxnType(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* TxnType */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_TxnType()
  {
    _TDispID _dispid(/* TxnType */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Track1(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Track1 */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Track1()
  {
    _TDispID _dispid(/* Track1 */ DISPID(10));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ChqBranch(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ChqBranch */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ChqBranch()
  {
    _TDispID _dispid(/* ChqBranch */ DISPID(40));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PosVendor(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PosVendor */ DISPID(46));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PosVendor()
  {
    _TDispID _dispid(/* PosVendor */ DISPID(46));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ReceiptAutoPrint(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* ReceiptAutoPrint */ DISPID(53));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_ReceiptAutoPrint()
  {
    _TDispID _dispid(/* ReceiptAutoPrint */ DISPID(53));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ChqAccount(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ChqAccount */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ChqAccount()
  {
    _TDispID _dispid(/* ChqAccount */ DISPID(41));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AmtPurchase(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* AmtPurchase */ DISPID(120));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_AmtPurchase()
  {
    _TDispID _dispid(/* AmtPurchase */ DISPID(120));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ChqSerialNumber(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ChqSerialNumber */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ChqSerialNumber()
  {
    _TDispID _dispid(/* ChqSerialNumber */ DISPID(39));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ResponseType(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* ResponseType */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ResponseType()
  {
    _TDispID _dispid(/* ResponseType */ DISPID(38));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleTotalCredit(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* SettleTotalCredit */ DISPID(52));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_SettleTotalCredit()
  {
    _TDispID _dispid(/* SettleTotalCredit */ DISPID(52));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PosProductId(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PosProductId */ DISPID(47));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PosProductId()
  {
    _TDispID _dispid(/* PosProductId */ DISPID(47));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleTotal(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* SettleTotal */ DISPID(50));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_SettleTotal()
  {
    _TDispID _dispid(/* SettleTotal */ DISPID(50));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LicenseId(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* LicenseId */ DISPID(49));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_LicenseId()
  {
    _TDispID _dispid(/* LicenseId */ DISPID(49));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PosVersion(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PosVersion */ DISPID(48));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PosVersion()
  {
    _TDispID _dispid(/* PosVersion */ DISPID(48));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Ready(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Ready */ DISPID(55));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Ready()
  {
    _TDispID _dispid(/* Ready */ DISPID(55));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CardType(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* CardType */ DISPID(54));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_CardType()
  {
    _TDispID _dispid(/* CardType */ DISPID(54));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleTotalDebit(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* SettleTotalDebit */ DISPID(51));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_SettleTotalDebit()
  {
    _TDispID _dispid(/* SettleTotalDebit */ DISPID(51));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleCountRefund(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* SettleCountRefund */ DISPID(74));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_SettleCountRefund()
  {
    _TDispID _dispid(/* SettleCountRefund */ DISPID(74));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleCountCredit(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* SettleCountCredit */ DISPID(71));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_SettleCountCredit()
  {
    _TDispID _dispid(/* SettleCountCredit */ DISPID(71));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleCardTotals(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* SettleCardTotals */ DISPID(68));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_SettleCardTotals()
  {
    _TDispID _dispid(/* SettleCardTotals */ DISPID(68));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableManualPan(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* EnableManualPan */ DISPID(75));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_EnableManualPan()
  {
    _TDispID _dispid(/* EnableManualPan */ DISPID(75));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LastTxnSuccess(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* LastTxnSuccess */ DISPID(66));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_LastTxnSuccess()
  {
    _TDispID _dispid(/* LastTxnSuccess */ DISPID(66));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleCountPurchase(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* SettleCountPurchase */ DISPID(73));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_SettleCountPurchase()
  {
    _TDispID _dispid(/* SettleCountPurchase */ DISPID(73));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleCountDebit(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* SettleCountDebit */ DISPID(72));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_SettleCountDebit()
  {
    _TDispID _dispid(/* SettleCountDebit */ DISPID(72));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleTotalCash(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* SettleTotalCash */ DISPID(67));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_SettleTotalCash()
  {
    _TDispID _dispid(/* SettleTotalCash */ DISPID(67));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DialogPosition(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* DialogPosition */ DISPID(42));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_DialogPosition()
  {
    _TDispID _dispid(/* DialogPosition */ DISPID(42));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PrintJournal(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* PrintJournal */ DISPID(45));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_PrintJournal()
  {
    _TDispID _dispid(/* PrintJournal */ DISPID(45));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EftposNetwork(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* EftposNetwork */ DISPID(44));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_EftposNetwork()
  {
    _TDispID _dispid(/* EftposNetwork */ DISPID(44));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_MessageType(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* MessageType */ DISPID(43));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MessageType()
  {
    _TDispID _dispid(/* MessageType */ DISPID(43));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleCount(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* SettleCount */ DISPID(70));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_SettleCount()
  {
    _TDispID _dispid(/* SettleCount */ DISPID(70));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SettleCountCash(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* SettleCountCash */ DISPID(69));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_SettleCountCash()
  {
    _TDispID _dispid(/* SettleCountCash */ DISPID(69));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Installed(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Installed */ DISPID(56));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Installed()
  {
    _TDispID _dispid(/* Installed */ DISPID(56));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CsdReservedProperty3(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* CsdReservedProperty3 */ DISPID(83));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_CsdReservedProperty3()
  {
    _TDispID _dispid(/* CsdReservedProperty3 */ DISPID(83));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TraceFileSizeLimit(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* TraceFileSizeLimit */ DISPID(110));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_TraceFileSizeLimit()
  {
    _TDispID _dispid(/* TraceFileSizeLimit */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TraceFileName(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* TraceFileName */ DISPID(111));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_TraceFileName()
  {
    _TDispID _dispid(/* TraceFileName */ DISPID(111));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CsdReservedProperty2(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* CsdReservedProperty2 */ DISPID(82));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_CsdReservedProperty2()
  {
    _TDispID _dispid(/* CsdReservedProperty2 */ DISPID(82));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CsdReservedProperty5(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* CsdReservedProperty5 */ DISPID(85));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_CsdReservedProperty5()
  {
    _TDispID _dispid(/* CsdReservedProperty5 */ DISPID(85));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_field48Data(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* field48Data */ DISPID(86));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_field48Data()
  {
    _TDispID _dispid(/* field48Data */ DISPID(86));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CsdReservedProperty4(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* CsdReservedProperty4 */ DISPID(84));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_CsdReservedProperty4()
  {
    _TDispID _dispid(/* CsdReservedProperty4 */ DISPID(84));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableTraceSaveFiles(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* EnableTraceSaveFiles */ DISPID(109));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_EnableTraceSaveFiles()
  {
    _TDispID _dispid(/* EnableTraceSaveFiles */ DISPID(109));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Rrn(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Rrn */ DISPID(114));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Rrn()
  {
    _TDispID _dispid(/* Rrn */ DISPID(114));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PrintSystem(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PrintSystem */ DISPID(112));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PrintSystem()
  {
    _TDispID _dispid(/* PrintSystem */ DISPID(112));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableTaskBarIcon(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* EnableTaskBarIcon */ DISPID(113));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_EnableTaskBarIcon()
  {
    _TDispID _dispid(/* EnableTaskBarIcon */ DISPID(113));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CardName(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* CardName */ DISPID(116));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_CardName()
  {
    _TDispID _dispid(/* CardName */ DISPID(116));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableTraceHost(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* EnableTraceHost */ DISPID(107));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_EnableTraceHost()
  {
    _TDispID _dispid(/* EnableTraceHost */ DISPID(107));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableTracePos(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* EnableTracePos */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_EnableTracePos()
  {
    _TDispID _dispid(/* EnableTracePos */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Address(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Address */ DISPID(115));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Address()
  {
    _TDispID _dispid(/* Address */ DISPID(115));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CsdReservedString3(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* CsdReservedString3 */ DISPID(88));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_CsdReservedString3()
  {
    _TDispID _dispid(/* CsdReservedString3 */ DISPID(88));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CsdReservedBool4(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CsdReservedBool4 */ DISPID(95));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CsdReservedBool4()
  {
    _TDispID _dispid(/* CsdReservedBool4 */ DISPID(95));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CsdReservedBool5(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CsdReservedBool5 */ DISPID(96));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CsdReservedBool5()
  {
    _TDispID _dispid(/* CsdReservedBool5 */ DISPID(96));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ActiveMerchants(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ActiveMerchants */ DISPID(87));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ActiveMerchants()
  {
    _TDispID _dispid(/* ActiveMerchants */ DISPID(87));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Kvc(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Kvc */ DISPID(90));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Kvc()
  {
    _TDispID _dispid(/* Kvc */ DISPID(90));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PurchaseAnalysisData(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PurchaseAnalysisData */ DISPID(91));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PurchaseAnalysisData()
  {
    _TDispID _dispid(/* PurchaseAnalysisData */ DISPID(91));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PhoneNumber(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PhoneNumber */ DISPID(89));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PhoneNumber()
  {
    _TDispID _dispid(/* PhoneNumber */ DISPID(89));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CsdReservedBool3(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CsdReservedBool3 */ DISPID(94));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CsdReservedBool3()
  {
    _TDispID _dispid(/* CsdReservedBool3 */ DISPID(94));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PinPadPort(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PinPadPort */ DISPID(79));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PinPadPort()
  {
    _TDispID _dispid(/* PinPadPort */ DISPID(79));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DialogTitle(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* DialogTitle */ DISPID(77));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_DialogTitle()
  {
    _TDispID _dispid(/* DialogTitle */ DISPID(77));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableCashoutDuplicate(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* EnableCashoutDuplicate */ DISPID(78));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_EnableCashoutDuplicate()
  {
    _TDispID _dispid(/* EnableCashoutDuplicate */ DISPID(78));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_RecordsUploaded(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* RecordsUploaded */ DISPID(81));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_RecordsUploaded()
  {
    _TDispID _dispid(/* RecordsUploaded */ DISPID(81));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TipTrans(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* TipTrans */ DISPID(92));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_TipTrans()
  {
    _TDispID _dispid(/* TipTrans */ DISPID(92));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AllowCredit(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* AllowCredit */ DISPID(93));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_AllowCredit()
  {
    _TDispID _dispid(/* AllowCredit */ DISPID(93));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PinPadPortList(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PinPadPortList */ DISPID(80));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PinPadPortList()
  {
    _TDispID _dispid(/* PinPadPortList */ DISPID(80));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CutReceipt(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CutReceipt */ DISPID(23));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CutReceipt()
  {
    _TDispID _dispid(/* CutReceipt */ DISPID(23));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TotalCashCount(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* TotalCashCount */ DISPID(30));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_TotalCashCount()
  {
    _TDispID _dispid(/* TotalCashCount */ DISPID(30));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Success(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Success */ DISPID(34));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Success()
  {
    _TDispID _dispid(/* Success */ DISPID(34));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LoggedOn(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* LoggedOn */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_LoggedOn()
  {
    _TDispID _dispid(/* LoggedOn */ DISPID(24));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DateExpiry(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* DateExpiry */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_DateExpiry()
  {
    _TDispID _dispid(/* DateExpiry */ DISPID(25));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PromptForTip(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* PromptForTip */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_PromptForTip()
  {
    _TDispID _dispid(/* PromptForTip */ DISPID(22));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Timeout(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Timeout */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Timeout()
  {
    _TDispID _dispid(/* Timeout */ DISPID(21));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Catid(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Catid */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Catid()
  {
    _TDispID _dispid(/* Catid */ DISPID(33));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TotalRefundCount(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* TotalRefundCount */ DISPID(31));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_TotalRefundCount()
  {
    _TDispID _dispid(/* TotalRefundCount */ DISPID(31));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AmtTip(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* AmtTip */ DISPID(119));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_AmtTip()
  {
    _TDispID _dispid(/* AmtTip */ DISPID(119));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AmtCreditLimit(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* AmtCreditLimit */ DISPID(118));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_AmtCreditLimit()
  {
    _TDispID _dispid(/* AmtCreditLimit */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AmtCash(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* AmtCash */ DISPID(117));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_AmtCash()
  {
    _TDispID _dispid(/* AmtCash */ DISPID(117));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Time(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Time */ DISPID(36));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Time()
  {
    _TDispID _dispid(/* Time */ DISPID(36));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Date(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Date */ DISPID(35));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Date()
  {
    _TDispID _dispid(/* Date */ DISPID(35));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Caid(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Caid */ DISPID(32));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caid()
  {
    _TDispID _dispid(/* Caid */ DISPID(32));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SvrPhoneNumber(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* SvrPhoneNumber */ DISPID(98));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_SvrPhoneNumber()
  {
    _TDispID _dispid(/* SvrPhoneNumber */ DISPID(98));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_JournalFilename(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* JournalFilename */ DISPID(105));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_JournalFilename()
  {
    _TDispID _dispid(/* JournalFilename */ DISPID(105));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableTracePinPad(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* EnableTracePinPad */ DISPID(106));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_EnableTracePinPad()
  {
    _TDispID _dispid(/* EnableTracePinPad */ DISPID(106));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PinRequired(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* PinRequired */ DISPID(97));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_PinRequired()
  {
    _TDispID _dispid(/* PinRequired */ DISPID(97));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SvrTcpipAddress(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* SvrTcpipAddress */ DISPID(100));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_SvrTcpipAddress()
  {
    _TDispID _dispid(/* SvrTcpipAddress */ DISPID(100));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SvrTcpipPort(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* SvrTcpipPort */ DISPID(101));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_SvrTcpipPort()
  {
    _TDispID _dispid(/* SvrTcpipPort */ DISPID(101));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SvrPhonePrefix(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* SvrPhonePrefix */ DISPID(99));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_SvrPhonePrefix()
  {
    _TDispID _dispid(/* SvrPhonePrefix */ DISPID(99));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_JournalDirectory(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* JournalDirectory */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_JournalDirectory()
  {
    _TDispID _dispid(/* JournalDirectory */ DISPID(104));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TotalPurchase(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* TotalPurchase */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_TotalPurchase()
  {
    _TDispID _dispid(/* TotalPurchase */ DISPID(26));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TotalPurchaseCount(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* TotalPurchaseCount */ DISPID(29));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_TotalPurchaseCount()
  {
    _TDispID _dispid(/* TotalPurchaseCount */ DISPID(29));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TotalRefund(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* TotalRefund */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_TotalRefund()
  {
    _TDispID _dispid(/* TotalRefund */ DISPID(28));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TotalCash(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* TotalCash */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_TotalCash()
  {
    _TDispID _dispid(/* TotalCash */ DISPID(27));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PinPadComPort(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PinPadComPort */ DISPID(102));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PinPadComPort()
  {
    _TDispID _dispid(/* PinPadComPort */ DISPID(102));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PrinterName(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* PrinterName */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_PrinterName()
  {
    _TDispID _dispid(/* PrinterName */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EnableTopmost(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* EnableTopmost */ DISPID(76));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_EnableTopmost()
  {
    _TDispID _dispid(/* EnableTopmost */ DISPID(76));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   BSTR            DateSettlement = {read = get_DateSettlement, write = set_DateSettlement};
  __property   VARIANT_BOOL    EnableTip = {read = get_EnableTip, write = set_EnableTip};
  __property   CURRENCY        SettleTotalPurchase = {read = get_SettleTotalPurchase, write = set_SettleTotalPurchase};
  __property   BSTR            DialogType = {read = get_DialogType, write = set_DialogType};
  __property   BSTR            AccountType = {read = get_AccountType, write = set_AccountType};
  __property   long            DialogY = {read = get_DialogY, write = set_DialogY};
  __property   long            DialogX = {read = get_DialogX, write = set_DialogX};
  __property   BSTR            Aiic = {read = get_Aiic, write = set_Aiic};
  __property   long            VersionMajor = {read = get_VersionMajor, write = set_VersionMajor};
  __property   VARIANT_BOOL    EnableErrorDialog = {read = get_EnableErrorDialog, write = set_EnableErrorDialog};
  __property   long            VersionRevision = {read = get_VersionRevision, write = set_VersionRevision};
  __property   long            VersionMinor = {read = get_VersionMinor, write = set_VersionMinor};
  __property   BSTR            AuthCode = {read = get_AuthCode, write = set_AuthCode};
  __property   CURRENCY        SettleTotalRefund = {read = get_SettleTotalRefund, write = set_SettleTotalRefund};
  __property   BSTR            Filename = {read = get_Filename, write = set_Filename};
  __property   long            Merchant = {read = get_Merchant, write = set_Merchant};
  __property   BSTR            PanSource = {read = get_PanSource, write = set_PanSource};
  __property   BSTR            ResponseCode = {read = get_ResponseCode, write = set_ResponseCode};
  __property   BSTR            Track2 = {read = get_Track2, write = set_Track2};
  __property   BSTR            Receipt = {read = get_Receipt, write = set_Receipt};
  __property   BSTR            Nii = {read = get_Nii, write = set_Nii};
  __property   BSTR            Pan = {read = get_Pan, write = set_Pan};
  __property   BSTR            ResponseText = {read = get_ResponseText, write = set_ResponseText};
  __property   BSTR            TxnRef = {read = get_TxnRef, write = set_TxnRef};
  __property   BSTR            DataField = {read = get_DataField, write = set_DataField};
  __property   BSTR            PinPadSerialNumber = {read = get_PinPadSerialNumber, write = set_PinPadSerialNumber};
  __property   BSTR            PinPadVersion = {read = get_PinPadVersion, write = set_PinPadVersion};
  __property   long            Stan = {read = get_Stan, write = set_Stan};
  __property   BSTR            TxnType = {read = get_TxnType, write = set_TxnType};
  __property   BSTR            Track1 = {read = get_Track1, write = set_Track1};
  __property   BSTR            ChqBranch = {read = get_ChqBranch, write = set_ChqBranch};
  __property   BSTR            PosVendor = {read = get_PosVendor, write = set_PosVendor};
  __property   VARIANT_BOOL    ReceiptAutoPrint = {read = get_ReceiptAutoPrint, write = set_ReceiptAutoPrint};
  __property   BSTR            ChqAccount = {read = get_ChqAccount, write = set_ChqAccount};
  __property   CURRENCY        AmtPurchase = {read = get_AmtPurchase, write = set_AmtPurchase};
  __property   BSTR            ChqSerialNumber = {read = get_ChqSerialNumber, write = set_ChqSerialNumber};
  __property   long            ResponseType = {read = get_ResponseType, write = set_ResponseType};
  __property   CURRENCY        SettleTotalCredit = {read = get_SettleTotalCredit, write = set_SettleTotalCredit};
  __property   BSTR            PosProductId = {read = get_PosProductId, write = set_PosProductId};
  __property   CURRENCY        SettleTotal = {read = get_SettleTotal, write = set_SettleTotal};
  __property   BSTR            LicenseId = {read = get_LicenseId, write = set_LicenseId};
  __property   BSTR            PosVersion = {read = get_PosVersion, write = set_PosVersion};
  __property   VARIANT_BOOL    Ready = {read = get_Ready, write = set_Ready};
  __property   BSTR            CardType = {read = get_CardType, write = set_CardType};
  __property   CURRENCY        SettleTotalDebit = {read = get_SettleTotalDebit, write = set_SettleTotalDebit};
  __property   long            SettleCountRefund = {read = get_SettleCountRefund, write = set_SettleCountRefund};
  __property   long            SettleCountCredit = {read = get_SettleCountCredit, write = set_SettleCountCredit};
  __property   BSTR            SettleCardTotals = {read = get_SettleCardTotals, write = set_SettleCardTotals};
  __property   VARIANT_BOOL    EnableManualPan = {read = get_EnableManualPan, write = set_EnableManualPan};
  __property   VARIANT_BOOL    LastTxnSuccess = {read = get_LastTxnSuccess, write = set_LastTxnSuccess};
  __property   long            SettleCountPurchase = {read = get_SettleCountPurchase, write = set_SettleCountPurchase};
  __property   long            SettleCountDebit = {read = get_SettleCountDebit, write = set_SettleCountDebit};
  __property   CURRENCY        SettleTotalCash = {read = get_SettleTotalCash, write = set_SettleTotalCash};
  __property   BSTR            DialogPosition = {read = get_DialogPosition, write = set_DialogPosition};
  __property   VARIANT_BOOL    PrintJournal = {read = get_PrintJournal, write = set_PrintJournal};
  __property   BSTR            EftposNetwork = {read = get_EftposNetwork, write = set_EftposNetwork};
  __property   long            MessageType = {read = get_MessageType, write = set_MessageType};
  __property   long            SettleCount = {read = get_SettleCount, write = set_SettleCount};
  __property   long            SettleCountCash = {read = get_SettleCountCash, write = set_SettleCountCash};
  __property   VARIANT_BOOL    Installed = {read = get_Installed, write = set_Installed};
  __property   long            CsdReservedProperty3 = {read = get_CsdReservedProperty3, write = set_CsdReservedProperty3};
  __property   long            TraceFileSizeLimit = {read = get_TraceFileSizeLimit, write = set_TraceFileSizeLimit};
  __property   BSTR            TraceFileName = {read = get_TraceFileName, write = set_TraceFileName};
  __property   long            CsdReservedProperty2 = {read = get_CsdReservedProperty2, write = set_CsdReservedProperty2};
  __property   long            CsdReservedProperty5 = {read = get_CsdReservedProperty5, write = set_CsdReservedProperty5};
  __property   BSTR            field48Data = {read = get_field48Data, write = set_field48Data};
  __property   long            CsdReservedProperty4 = {read = get_CsdReservedProperty4, write = set_CsdReservedProperty4};
  __property   BSTR            EnableTraceSaveFiles = {read = get_EnableTraceSaveFiles, write = set_EnableTraceSaveFiles};
  __property   BSTR            Rrn = {read = get_Rrn, write = set_Rrn};
  __property   BSTR            PrintSystem = {read = get_PrintSystem, write = set_PrintSystem};
  __property   BSTR            EnableTaskBarIcon = {read = get_EnableTaskBarIcon, write = set_EnableTaskBarIcon};
  __property   BSTR            CardName = {read = get_CardName, write = set_CardName};
  __property   BSTR            EnableTraceHost = {read = get_EnableTraceHost, write = set_EnableTraceHost};
  __property   BSTR            EnableTracePos = {read = get_EnableTracePos, write = set_EnableTracePos};
  __property   BSTR            Address = {read = get_Address, write = set_Address};
  __property   BSTR            CsdReservedString3 = {read = get_CsdReservedString3, write = set_CsdReservedString3};
  __property   VARIANT_BOOL    CsdReservedBool4 = {read = get_CsdReservedBool4, write = set_CsdReservedBool4};
  __property   VARIANT_BOOL    CsdReservedBool5 = {read = get_CsdReservedBool5, write = set_CsdReservedBool5};
  __property   BSTR            ActiveMerchants = {read = get_ActiveMerchants, write = set_ActiveMerchants};
  __property   BSTR            Kvc = {read = get_Kvc, write = set_Kvc};
  __property   BSTR            PurchaseAnalysisData = {read = get_PurchaseAnalysisData, write = set_PurchaseAnalysisData};
  __property   BSTR            PhoneNumber = {read = get_PhoneNumber, write = set_PhoneNumber};
  __property   VARIANT_BOOL    CsdReservedBool3 = {read = get_CsdReservedBool3, write = set_CsdReservedBool3};
  __property   BSTR            PinPadPort = {read = get_PinPadPort, write = set_PinPadPort};
  __property   BSTR            DialogTitle = {read = get_DialogTitle, write = set_DialogTitle};
  __property   VARIANT_BOOL    EnableCashoutDuplicate = {read = get_EnableCashoutDuplicate, write = set_EnableCashoutDuplicate};
  __property   long            RecordsUploaded = {read = get_RecordsUploaded, write = set_RecordsUploaded};
  __property   VARIANT_BOOL    TipTrans = {read = get_TipTrans, write = set_TipTrans};
  __property   VARIANT_BOOL    AllowCredit = {read = get_AllowCredit, write = set_AllowCredit};
  __property   BSTR            PinPadPortList = {read = get_PinPadPortList, write = set_PinPadPortList};
  __property   VARIANT_BOOL    CutReceipt = {read = get_CutReceipt, write = set_CutReceipt};
  __property   long            TotalCashCount = {read = get_TotalCashCount, write = set_TotalCashCount};
  __property   VARIANT_BOOL    Success = {read = get_Success, write = set_Success};
  __property   VARIANT_BOOL    LoggedOn = {read = get_LoggedOn, write = set_LoggedOn};
  __property   BSTR            DateExpiry = {read = get_DateExpiry, write = set_DateExpiry};
  __property   VARIANT_BOOL    PromptForTip = {read = get_PromptForTip, write = set_PromptForTip};
  __property   long            Timeout = {read = get_Timeout, write = set_Timeout};
  __property   BSTR            Catid = {read = get_Catid, write = set_Catid};
  __property   long            TotalRefundCount = {read = get_TotalRefundCount, write = set_TotalRefundCount};
  __property   CURRENCY        AmtTip = {read = get_AmtTip, write = set_AmtTip};
  __property   CURRENCY        AmtCreditLimit = {read = get_AmtCreditLimit, write = set_AmtCreditLimit};
  __property   CURRENCY        AmtCash = {read = get_AmtCash, write = set_AmtCash};
  __property   BSTR            Time = {read = get_Time, write = set_Time};
  __property   BSTR            Date = {read = get_Date, write = set_Date};
  __property   BSTR            Caid = {read = get_Caid, write = set_Caid};
  __property   BSTR            SvrPhoneNumber = {read = get_SvrPhoneNumber, write = set_SvrPhoneNumber};
  __property   BSTR            JournalFilename = {read = get_JournalFilename, write = set_JournalFilename};
  __property   VARIANT_BOOL    EnableTracePinPad = {read = get_EnableTracePinPad, write = set_EnableTracePinPad};
  __property   VARIANT_BOOL    PinRequired = {read = get_PinRequired, write = set_PinRequired};
  __property   BSTR            SvrTcpipAddress = {read = get_SvrTcpipAddress, write = set_SvrTcpipAddress};
  __property   BSTR            SvrTcpipPort = {read = get_SvrTcpipPort, write = set_SvrTcpipPort};
  __property   BSTR            SvrPhonePrefix = {read = get_SvrPhonePrefix, write = set_SvrPhonePrefix};
  __property   BSTR            JournalDirectory = {read = get_JournalDirectory, write = set_JournalDirectory};
  __property   CURRENCY        TotalPurchase = {read = get_TotalPurchase, write = set_TotalPurchase};
  __property   long            TotalPurchaseCount = {read = get_TotalPurchaseCount, write = set_TotalPurchaseCount};
  __property   CURRENCY        TotalRefund = {read = get_TotalRefund, write = set_TotalRefund};
  __property   CURRENCY        TotalCash = {read = get_TotalCash, write = set_TotalCash};
  __property   BSTR            PinPadComPort = {read = get_PinPadComPort, write = set_PinPadComPort};
  __property   BSTR            PrinterName = {read = get_PrinterName, write = set_PrinterName};
  __property   VARIANT_BOOL    EnableTopmost = {read = get_EnableTopmost, write = set_EnableTopmost};
};
// *********************************************************************//
// Interface: _DENZEFTEvents
// Flags:     (4096) Dispatchable
// GUID:      {5E7AD773-28B0-4A3F-9EC8-6F21B91F662E}
// *********************************************************************//
interface _DENZEFTEvents : public TDispWrapper<IDispatch>
{
  void __fastcall SelfTestEvent()
  {
    _TDispID _dispid(/* SelfTestEvent */ DISPID(1));
    OleProcedure(_dispid);
  }

  void __fastcall SettlementCutoverEvent()
  {
    _TDispID _dispid(/* SettlementCutoverEvent */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall SettlementEnquiryEvent()
  {
    _TDispID _dispid(/* SettlementEnquiryEvent */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall StatusEvent()
  {
    _TDispID _dispid(/* StatusEvent */ DISPID(4));
    OleProcedure(_dispid);
  }

  void __fastcall GetLastTransactionEvent()
  {
    _TDispID _dispid(/* GetLastTransactionEvent */ DISPID(5));
    OleProcedure(_dispid);
  }

  void __fastcall ChequeVerifyEvent()
  {
    _TDispID _dispid(/* ChequeVerifyEvent */ DISPID(6));
    OleProcedure(_dispid);
  }

  void __fastcall ConfigMerchantEvent()
  {
    _TDispID _dispid(/* ConfigMerchantEvent */ DISPID(7));
    OleProcedure(_dispid);
  }

  void __fastcall DisplayStatusEvent()
  {
    _TDispID _dispid(/* DisplayStatusEvent */ DISPID(8));
    OleProcedure(_dispid);
  }

  void __fastcall LogonEvent()
  {
    _TDispID _dispid(/* LogonEvent */ DISPID(9));
    OleProcedure(_dispid);
  }

  void __fastcall QueryCardEvent()
  {
    _TDispID _dispid(/* QueryCardEvent */ DISPID(10));
    OleProcedure(_dispid);
  }

  void __fastcall ReprintReceiptEvent()
  {
    _TDispID _dispid(/* ReprintReceiptEvent */ DISPID(11));
    OleProcedure(_dispid);
  }

  void __fastcall TransactionEvent()
  {
    _TDispID _dispid(/* TransactionEvent */ DISPID(12));
    OleProcedure(_dispid);
  }

  void __fastcall CardSwipeEvent()
  {
    _TDispID _dispid(/* CardSwipeEvent */ DISPID(13));
    OleProcedure(_dispid);
  }

  void __fastcall GetReceiptFromTxnRefEvent()
  {
    _TDispID _dispid(/* GetReceiptFromTxnRefEvent */ DISPID(14));
    OleProcedure(_dispid);
  }

  void __fastcall InProgress(VARIANT_BOOL InProgress)
  {
    _TDispID _dispid(/* InProgress */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = InProgress /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall ReprintReceiptFromTxnRefEvent()
  {
    _TDispID _dispid(/* ReprintReceiptFromTxnRefEvent */ DISPID(16));
    OleProcedure(_dispid);
  }

  void __fastcall SearchTipEvent()
  {
    _TDispID _dispid(/* SearchTipEvent */ DISPID(17));
    OleProcedure(_dispid);
  }

  void __fastcall ReprintReceiptFromStanEvent()
  {
    _TDispID _dispid(/* ReprintReceiptFromStanEvent */ DISPID(18));
    OleProcedure(_dispid);
  }

  void __fastcall ControlPanelEvent()
  {
    _TDispID _dispid(/* ControlPanelEvent */ DISPID(19));
    OleProcedure(_dispid);
  }

  void __fastcall GetLastReceiptEvent()
  {
    _TDispID _dispid(/* GetLastReceiptEvent */ DISPID(20));
    OleProcedure(_dispid);
  }

  void __fastcall InvokeAppletEvent()
  {
    _TDispID _dispid(/* InvokeAppletEvent */ DISPID(21));
    OleProcedure(_dispid);
  }

  void __fastcall RequestCommsEvent(BSTR Port, VARIANT_BOOL Requested)
  {
    _TDispID _dispid(/* RequestCommsEvent */ DISPID(22));
    TAutoArgs<2> _args;
    _args[1] = Port /*[VT_BSTR:0]*/;
    _args[2] = Requested /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall SettlementReconcileEvent()
  {
    _TDispID _dispid(/* SettlementReconcileEvent */ DISPID(23));
    OleProcedure(_dispid);
  }

  void __fastcall SubTotalsEvent()
  {
    _TDispID _dispid(/* SubTotalsEvent */ DISPID(24));
    OleProcedure(_dispid);
  }

  void __fastcall SoftwareDownloadEvent()
  {
    _TDispID _dispid(/* SoftwareDownloadEvent */ DISPID(25));
    OleProcedure(_dispid);
  }

  void __fastcall SoftwareActivateEvent()
  {
    _TDispID _dispid(/* SoftwareActivateEvent */ DISPID(26));
    OleProcedure(_dispid);
  }

  void __fastcall LastSettlementEvent()
  {
    _TDispID _dispid(/* LastSettlementEvent */ DISPID(27));
    OleProcedure(_dispid);
  }

  void __fastcall PrintReceiptEvent(BSTR ReceiptType)
  {
    _TDispID _dispid(/* PrintReceiptEvent */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = ReceiptType /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall JournalViewerEvent()
  {
    _TDispID _dispid(/* JournalViewerEvent */ DISPID(29));
    OleProcedure(_dispid);
  }

  void __fastcall VoidTipEvent()
  {
    _TDispID _dispid(/* VoidTipEvent */ DISPID(30));
    OleProcedure(_dispid);
  }

  void __fastcall KeyDownEvent(long KeyCode, long KeyData)
  {
    _TDispID _dispid(/* KeyDownEvent */ DISPID(31));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = KeyData /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall ShowDialogEvent()
  {
    _TDispID _dispid(/* ShowDialogEvent */ DISPID(32));
    OleProcedure(_dispid);
  }

  void __fastcall GetMerchantsEvent()
  {
    _TDispID _dispid(/* GetMerchantsEvent */ DISPID(33));
    OleProcedure(_dispid);
  }

  void __fastcall CsdReserved2()
  {
    _TDispID _dispid(/* CsdReserved2 */ DISPID(34));
    OleProcedure(_dispid);
  }

  void __fastcall UploadTipEvent()
  {
    _TDispID _dispid(/* UploadTipEvent */ DISPID(35));
    OleProcedure(_dispid);
  }

  void __fastcall AddTipEvent()
  {
    _TDispID _dispid(/* AddTipEvent */ DISPID(36));
    OleProcedure(_dispid);
  }

  void __fastcall LicenseEvent()
  {
    _TDispID _dispid(/* LicenseEvent */ DISPID(37));
    OleProcedure(_dispid);
  }

  void __fastcall CentralSettlementEvent()
  {
    _TDispID _dispid(/* CentralSettlementEvent */ DISPID(38));
    OleProcedure(_dispid);
  }

  void __fastcall SetFocusEvent()
  {
    _TDispID _dispid(/* SetFocusEvent */ DISPID(39));
    OleProcedure(_dispid);
  }

  void __fastcall SetAutoLogonTimeEvent()
  {
    _TDispID _dispid(/* SetAutoLogonTimeEvent */ DISPID(40));
    OleProcedure(_dispid);
  }

  void __fastcall CommsTestEvent()
  {
    _TDispID _dispid(/* CommsTestEvent */ DISPID(41));
    OleProcedure(_dispid);
  }

  void __fastcall TestCommsEvent()
  {
    _TDispID _dispid(/* TestCommsEvent */ DISPID(42));
    OleProcedure(_dispid);
  }

  void __fastcall GetPendingEvent()
  {
    _TDispID _dispid(/* GetPendingEvent */ DISPID(43));
    OleProcedure(_dispid);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _DENZEFT
// Flags:     (4112) Hidden Dispatchable
// GUID:      {74481918-EBF7-4D38-8D64-D2962775C529}
// *********************************************************************//
template<class T>
class _DENZEFTDispT : public TAutoDriver<_DENZEFT>
{
public:
  _DENZEFTDispT(){}

  _DENZEFTDispT(_DENZEFT *pintf)
  {
    TAutoDriver<_DENZEFT>::Bind(pintf, false);
  }

  _DENZEFTDispT(_DENZEFTPtr pintf)
  {
    TAutoDriver<_DENZEFT>::Bind(pintf, true);
  }

  _DENZEFTDispT& operator=(_DENZEFT *pintf)
  {
    TAutoDriver<_DENZEFT>::Bind(pintf, false);
    return *this;
  }

  _DENZEFTDispT& operator=(_DENZEFTPtr pintf)
  {
    TAutoDriver<_DENZEFT>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ENZEFT));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ENZEFT);
  }

  void            __fastcall AboutBox();
  void            __fastcall DoGetPending();
  void            __fastcall DoTestComms();
  void            __fastcall DoSetAutoLogonTime();
  void            __fastcall DoSetFocus(VARIANT_BOOL EnableFocus);
  void            __fastcall DoConfigMerchant();
  void            __fastcall CsdReservedMethod6();
  void            __fastcall CsdReservedMethod5();
  void            __fastcall DoAddTip();
  void            __fastcall DoUploadTip();
  void            __fastcall DoGetMerchants();
  void            __fastcall DoShowDialog(VARIANT_BOOL Show);
  void            __fastcall DoVoidTip();
  void            __fastcall DoJournalViewer();
  void            __fastcall DoSoftwareActivate();
  void            __fastcall DoSoftwareDownload();
  void            __fastcall DoLastSettlement();
  void            __fastcall DoSubTotals();
  void            __fastcall DoTransaction();
  void            __fastcall DoStatus();
  void            __fastcall DoSettlementReconcile();
  void            __fastcall DoSettlementEnquiry();
  void            __fastcall DoSettlementCutover();
  void            __fastcall DoSelfTest();
  void            __fastcall DoReprintReceiptFromTxnRef();
  void            __fastcall DoReprintReceiptFromStan();
  void            __fastcall DoReprintReceipt();
  void            __fastcall DoQueryCard();
  void            __fastcall DoLogon();
  void            __fastcall DoInvokeApplet(BSTR Applet);
  void            __fastcall DoGetReceiptFromTxnRef();
  void            __fastcall DoSearchTip();
  void            __fastcall DoGetLastTransaction();
  void            __fastcall DoGetLastReceipt();
  void            __fastcall DoDisplayStatus();
  void            __fastcall DoControlPanel();
  void            __fastcall DoChequeVerify();
  void            __fastcall DoCardSwipe();
  void            __fastcall DoReset();
  void            __fastcall set_DateSettlement(BSTR Value);
  BSTR            __fastcall get_DateSettlement();
  void            __fastcall set_EnableTip(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_EnableTip();
  void            __fastcall set_SettleTotalPurchase(CURRENCY Value);
  CURRENCY        __fastcall get_SettleTotalPurchase();
  void            __fastcall set_DialogType(BSTR Value);
  BSTR            __fastcall get_DialogType();
  void            __fastcall set_AccountType(BSTR Value);
  BSTR            __fastcall get_AccountType();
  void            __fastcall set_DialogY(long Value);
  long            __fastcall get_DialogY();
  void            __fastcall set_DialogX(long Value);
  long            __fastcall get_DialogX();
  void            __fastcall set_Aiic(BSTR Value);
  BSTR            __fastcall get_Aiic();
  void            __fastcall set_VersionMajor(long Value);
  long            __fastcall get_VersionMajor();
  void            __fastcall set_EnableErrorDialog(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_EnableErrorDialog();
  void            __fastcall set_VersionRevision(long Value);
  long            __fastcall get_VersionRevision();
  void            __fastcall set_VersionMinor(long Value);
  long            __fastcall get_VersionMinor();
  void            __fastcall set_AuthCode(BSTR Value);
  BSTR            __fastcall get_AuthCode();
  void            __fastcall set_SettleTotalRefund(CURRENCY Value);
  CURRENCY        __fastcall get_SettleTotalRefund();
  void            __fastcall set_Filename(BSTR Value);
  BSTR            __fastcall get_Filename();
  void            __fastcall set_Merchant(long Value);
  long            __fastcall get_Merchant();
  void            __fastcall set_PanSource(BSTR Value);
  BSTR            __fastcall get_PanSource();
  void            __fastcall set_ResponseCode(BSTR Value);
  BSTR            __fastcall get_ResponseCode();
  void            __fastcall set_Track2(BSTR Value);
  BSTR            __fastcall get_Track2();
  void            __fastcall set_Receipt(BSTR Value);
  BSTR            __fastcall get_Receipt();
  void            __fastcall set_Nii(BSTR Value);
  BSTR            __fastcall get_Nii();
  void            __fastcall set_Pan(BSTR Value);
  BSTR            __fastcall get_Pan();
  void            __fastcall set_ResponseText(BSTR Value);
  BSTR            __fastcall get_ResponseText();
  void            __fastcall set_TxnRef(BSTR Value);
  BSTR            __fastcall get_TxnRef();
  void            __fastcall set_DataField(BSTR Value);
  BSTR            __fastcall get_DataField();
  void            __fastcall set_PinPadSerialNumber(BSTR Value);
  BSTR            __fastcall get_PinPadSerialNumber();
  void            __fastcall set_PinPadVersion(BSTR Value);
  BSTR            __fastcall get_PinPadVersion();
  void            __fastcall set_Stan(long Value);
  long            __fastcall get_Stan();
  void            __fastcall set_TxnType(BSTR Value);
  BSTR            __fastcall get_TxnType();
  void            __fastcall set_Track1(BSTR Value);
  BSTR            __fastcall get_Track1();
  void            __fastcall set_ChqBranch(BSTR Value);
  BSTR            __fastcall get_ChqBranch();
  void            __fastcall set_PosVendor(BSTR Value);
  BSTR            __fastcall get_PosVendor();
  void            __fastcall set_ReceiptAutoPrint(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_ReceiptAutoPrint();
  void            __fastcall set_ChqAccount(BSTR Value);
  BSTR            __fastcall get_ChqAccount();
  void            __fastcall set_AmtPurchase(CURRENCY Value);
  CURRENCY        __fastcall get_AmtPurchase();
  void            __fastcall set_ChqSerialNumber(BSTR Value);
  BSTR            __fastcall get_ChqSerialNumber();
  void            __fastcall set_ResponseType(long Value);
  long            __fastcall get_ResponseType();
  void            __fastcall set_SettleTotalCredit(CURRENCY Value);
  CURRENCY        __fastcall get_SettleTotalCredit();
  void            __fastcall set_PosProductId(BSTR Value);
  BSTR            __fastcall get_PosProductId();
  void            __fastcall set_SettleTotal(CURRENCY Value);
  CURRENCY        __fastcall get_SettleTotal();
  void            __fastcall set_LicenseId(BSTR Value);
  BSTR            __fastcall get_LicenseId();
  void            __fastcall set_PosVersion(BSTR Value);
  BSTR            __fastcall get_PosVersion();
  void            __fastcall set_Ready(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Ready();
  void            __fastcall set_CardType(BSTR Value);
  BSTR            __fastcall get_CardType();
  void            __fastcall set_SettleTotalDebit(CURRENCY Value);
  CURRENCY        __fastcall get_SettleTotalDebit();
  void            __fastcall set_SettleCountRefund(long Value);
  long            __fastcall get_SettleCountRefund();
  void            __fastcall set_SettleCountCredit(long Value);
  long            __fastcall get_SettleCountCredit();
  void            __fastcall set_SettleCardTotals(BSTR Value);
  BSTR            __fastcall get_SettleCardTotals();
  void            __fastcall set_EnableManualPan(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_EnableManualPan();
  void            __fastcall set_LastTxnSuccess(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_LastTxnSuccess();
  void            __fastcall set_SettleCountPurchase(long Value);
  long            __fastcall get_SettleCountPurchase();
  void            __fastcall set_SettleCountDebit(long Value);
  long            __fastcall get_SettleCountDebit();
  void            __fastcall set_SettleTotalCash(CURRENCY Value);
  CURRENCY        __fastcall get_SettleTotalCash();
  void            __fastcall set_DialogPosition(BSTR Value);
  BSTR            __fastcall get_DialogPosition();
  void            __fastcall set_PrintJournal(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_PrintJournal();
  void            __fastcall set_EftposNetwork(BSTR Value);
  BSTR            __fastcall get_EftposNetwork();
  void            __fastcall set_MessageType(long Value);
  long            __fastcall get_MessageType();
  void            __fastcall set_SettleCount(long Value);
  long            __fastcall get_SettleCount();
  void            __fastcall set_SettleCountCash(long Value);
  long            __fastcall get_SettleCountCash();
  void            __fastcall set_Installed(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Installed();
  void            __fastcall set_CsdReservedProperty3(long Value);
  long            __fastcall get_CsdReservedProperty3();
  void            __fastcall set_TraceFileSizeLimit(long Value);
  long            __fastcall get_TraceFileSizeLimit();
  void            __fastcall set_TraceFileName(BSTR Value);
  BSTR            __fastcall get_TraceFileName();
  void            __fastcall set_CsdReservedProperty2(long Value);
  long            __fastcall get_CsdReservedProperty2();
  void            __fastcall set_CsdReservedProperty5(long Value);
  long            __fastcall get_CsdReservedProperty5();
  void            __fastcall set_field48Data(BSTR Value);
  BSTR            __fastcall get_field48Data();
  void            __fastcall set_CsdReservedProperty4(long Value);
  long            __fastcall get_CsdReservedProperty4();
  void            __fastcall set_EnableTraceSaveFiles(BSTR Value);
  BSTR            __fastcall get_EnableTraceSaveFiles();
  void            __fastcall set_Rrn(BSTR Value);
  BSTR            __fastcall get_Rrn();
  void            __fastcall set_PrintSystem(BSTR Value);
  BSTR            __fastcall get_PrintSystem();
  void            __fastcall set_EnableTaskBarIcon(BSTR Value);
  BSTR            __fastcall get_EnableTaskBarIcon();
  void            __fastcall set_CardName(BSTR Value);
  BSTR            __fastcall get_CardName();
  void            __fastcall set_EnableTraceHost(BSTR Value);
  BSTR            __fastcall get_EnableTraceHost();
  void            __fastcall set_EnableTracePos(BSTR Value);
  BSTR            __fastcall get_EnableTracePos();
  void            __fastcall set_Address(BSTR Value);
  BSTR            __fastcall get_Address();
  void            __fastcall set_CsdReservedString3(BSTR Value);
  BSTR            __fastcall get_CsdReservedString3();
  void            __fastcall set_CsdReservedBool4(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CsdReservedBool4();
  void            __fastcall set_CsdReservedBool5(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CsdReservedBool5();
  void            __fastcall set_ActiveMerchants(BSTR Value);
  BSTR            __fastcall get_ActiveMerchants();
  void            __fastcall set_Kvc(BSTR Value);
  BSTR            __fastcall get_Kvc();
  void            __fastcall set_PurchaseAnalysisData(BSTR Value);
  BSTR            __fastcall get_PurchaseAnalysisData();
  void            __fastcall set_PhoneNumber(BSTR Value);
  BSTR            __fastcall get_PhoneNumber();
  void            __fastcall set_CsdReservedBool3(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CsdReservedBool3();
  void            __fastcall set_PinPadPort(BSTR Value);
  BSTR            __fastcall get_PinPadPort();
  void            __fastcall set_DialogTitle(BSTR Value);
  BSTR            __fastcall get_DialogTitle();
  void            __fastcall set_EnableCashoutDuplicate(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_EnableCashoutDuplicate();
  void            __fastcall set_RecordsUploaded(long Value);
  long            __fastcall get_RecordsUploaded();
  void            __fastcall set_TipTrans(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_TipTrans();
  void            __fastcall set_AllowCredit(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_AllowCredit();
  void            __fastcall set_PinPadPortList(BSTR Value);
  BSTR            __fastcall get_PinPadPortList();
  void            __fastcall set_CutReceipt(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CutReceipt();
  void            __fastcall set_TotalCashCount(long Value);
  long            __fastcall get_TotalCashCount();
  void            __fastcall set_Success(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Success();
  void            __fastcall set_LoggedOn(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_LoggedOn();
  void            __fastcall set_DateExpiry(BSTR Value);
  BSTR            __fastcall get_DateExpiry();
  void            __fastcall set_PromptForTip(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_PromptForTip();
  void            __fastcall set_Timeout(long Value);
  long            __fastcall get_Timeout();
  void            __fastcall set_Catid(BSTR Value);
  BSTR            __fastcall get_Catid();
  void            __fastcall set_TotalRefundCount(long Value);
  long            __fastcall get_TotalRefundCount();
  void            __fastcall set_AmtTip(CURRENCY Value);
  CURRENCY        __fastcall get_AmtTip();
  void            __fastcall set_AmtCreditLimit(CURRENCY Value);
  CURRENCY        __fastcall get_AmtCreditLimit();
  void            __fastcall set_AmtCash(CURRENCY Value);
  CURRENCY        __fastcall get_AmtCash();
  void            __fastcall set_Time(BSTR Value);
  BSTR            __fastcall get_Time();
  void            __fastcall set_Date(BSTR Value);
  BSTR            __fastcall get_Date();
  void            __fastcall set_Caid(BSTR Value);
  BSTR            __fastcall get_Caid();
  void            __fastcall set_SvrPhoneNumber(BSTR Value);
  BSTR            __fastcall get_SvrPhoneNumber();
  void            __fastcall set_JournalFilename(BSTR Value);
  BSTR            __fastcall get_JournalFilename();
  void            __fastcall set_EnableTracePinPad(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_EnableTracePinPad();
  void            __fastcall set_PinRequired(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_PinRequired();
  void            __fastcall set_SvrTcpipAddress(BSTR Value);
  BSTR            __fastcall get_SvrTcpipAddress();
  void            __fastcall set_SvrTcpipPort(BSTR Value);
  BSTR            __fastcall get_SvrTcpipPort();
  void            __fastcall set_SvrPhonePrefix(BSTR Value);
  BSTR            __fastcall get_SvrPhonePrefix();
  void            __fastcall set_JournalDirectory(BSTR Value);
  BSTR            __fastcall get_JournalDirectory();
  void            __fastcall set_TotalPurchase(CURRENCY Value);
  CURRENCY        __fastcall get_TotalPurchase();
  void            __fastcall set_TotalPurchaseCount(long Value);
  long            __fastcall get_TotalPurchaseCount();
  void            __fastcall set_TotalRefund(CURRENCY Value);
  CURRENCY        __fastcall get_TotalRefund();
  void            __fastcall set_TotalCash(CURRENCY Value);
  CURRENCY        __fastcall get_TotalCash();
  void            __fastcall set_PinPadComPort(BSTR Value);
  BSTR            __fastcall get_PinPadComPort();
  void            __fastcall set_PrinterName(BSTR Value);
  BSTR            __fastcall get_PrinterName();
  void            __fastcall set_EnableTopmost(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_EnableTopmost();

  __property   BSTR            DateSettlement = {read = get_DateSettlement, write = set_DateSettlement};
  __property   VARIANT_BOOL    EnableTip = {read = get_EnableTip, write = set_EnableTip};
  __property   CURRENCY        SettleTotalPurchase = {read = get_SettleTotalPurchase, write = set_SettleTotalPurchase};
  __property   BSTR            DialogType = {read = get_DialogType, write = set_DialogType};
  __property   BSTR            AccountType = {read = get_AccountType, write = set_AccountType};
  __property   long            DialogY = {read = get_DialogY, write = set_DialogY};
  __property   long            DialogX = {read = get_DialogX, write = set_DialogX};
  __property   BSTR            Aiic = {read = get_Aiic, write = set_Aiic};
  __property   long            VersionMajor = {read = get_VersionMajor, write = set_VersionMajor};
  __property   VARIANT_BOOL    EnableErrorDialog = {read = get_EnableErrorDialog, write = set_EnableErrorDialog};
  __property   long            VersionRevision = {read = get_VersionRevision, write = set_VersionRevision};
  __property   long            VersionMinor = {read = get_VersionMinor, write = set_VersionMinor};
  __property   BSTR            AuthCode = {read = get_AuthCode, write = set_AuthCode};
  __property   CURRENCY        SettleTotalRefund = {read = get_SettleTotalRefund, write = set_SettleTotalRefund};
  __property   BSTR            Filename = {read = get_Filename, write = set_Filename};
  __property   long            Merchant = {read = get_Merchant, write = set_Merchant};
  __property   BSTR            PanSource = {read = get_PanSource, write = set_PanSource};
  __property   BSTR            ResponseCode = {read = get_ResponseCode, write = set_ResponseCode};
  __property   BSTR            Track2 = {read = get_Track2, write = set_Track2};
  __property   BSTR            Receipt = {read = get_Receipt, write = set_Receipt};
  __property   BSTR            Nii = {read = get_Nii, write = set_Nii};
  __property   BSTR            Pan = {read = get_Pan, write = set_Pan};
  __property   BSTR            ResponseText = {read = get_ResponseText, write = set_ResponseText};
  __property   BSTR            TxnRef = {read = get_TxnRef, write = set_TxnRef};
  __property   BSTR            DataField = {read = get_DataField, write = set_DataField};
  __property   BSTR            PinPadSerialNumber = {read = get_PinPadSerialNumber, write = set_PinPadSerialNumber};
  __property   BSTR            PinPadVersion = {read = get_PinPadVersion, write = set_PinPadVersion};
  __property   long            Stan = {read = get_Stan, write = set_Stan};
  __property   BSTR            TxnType = {read = get_TxnType, write = set_TxnType};
  __property   BSTR            Track1 = {read = get_Track1, write = set_Track1};
  __property   BSTR            ChqBranch = {read = get_ChqBranch, write = set_ChqBranch};
  __property   BSTR            PosVendor = {read = get_PosVendor, write = set_PosVendor};
  __property   VARIANT_BOOL    ReceiptAutoPrint = {read = get_ReceiptAutoPrint, write = set_ReceiptAutoPrint};
  __property   BSTR            ChqAccount = {read = get_ChqAccount, write = set_ChqAccount};
  __property   CURRENCY        AmtPurchase = {read = get_AmtPurchase, write = set_AmtPurchase};
  __property   BSTR            ChqSerialNumber = {read = get_ChqSerialNumber, write = set_ChqSerialNumber};
  __property   long            ResponseType = {read = get_ResponseType, write = set_ResponseType};
  __property   CURRENCY        SettleTotalCredit = {read = get_SettleTotalCredit, write = set_SettleTotalCredit};
  __property   BSTR            PosProductId = {read = get_PosProductId, write = set_PosProductId};
  __property   CURRENCY        SettleTotal = {read = get_SettleTotal, write = set_SettleTotal};
  __property   BSTR            LicenseId = {read = get_LicenseId, write = set_LicenseId};
  __property   BSTR            PosVersion = {read = get_PosVersion, write = set_PosVersion};
  __property   VARIANT_BOOL    Ready = {read = get_Ready, write = set_Ready};
  __property   BSTR            CardType = {read = get_CardType, write = set_CardType};
  __property   CURRENCY        SettleTotalDebit = {read = get_SettleTotalDebit, write = set_SettleTotalDebit};
  __property   long            SettleCountRefund = {read = get_SettleCountRefund, write = set_SettleCountRefund};
  __property   long            SettleCountCredit = {read = get_SettleCountCredit, write = set_SettleCountCredit};
  __property   BSTR            SettleCardTotals = {read = get_SettleCardTotals, write = set_SettleCardTotals};
  __property   VARIANT_BOOL    EnableManualPan = {read = get_EnableManualPan, write = set_EnableManualPan};
  __property   VARIANT_BOOL    LastTxnSuccess = {read = get_LastTxnSuccess, write = set_LastTxnSuccess};
  __property   long            SettleCountPurchase = {read = get_SettleCountPurchase, write = set_SettleCountPurchase};
  __property   long            SettleCountDebit = {read = get_SettleCountDebit, write = set_SettleCountDebit};
  __property   CURRENCY        SettleTotalCash = {read = get_SettleTotalCash, write = set_SettleTotalCash};
  __property   BSTR            DialogPosition = {read = get_DialogPosition, write = set_DialogPosition};
  __property   VARIANT_BOOL    PrintJournal = {read = get_PrintJournal, write = set_PrintJournal};
  __property   BSTR            EftposNetwork = {read = get_EftposNetwork, write = set_EftposNetwork};
  __property   long            MessageType = {read = get_MessageType, write = set_MessageType};
  __property   long            SettleCount = {read = get_SettleCount, write = set_SettleCount};
  __property   long            SettleCountCash = {read = get_SettleCountCash, write = set_SettleCountCash};
  __property   VARIANT_BOOL    Installed = {read = get_Installed, write = set_Installed};
  __property   long            CsdReservedProperty3 = {read = get_CsdReservedProperty3, write = set_CsdReservedProperty3};
  __property   long            TraceFileSizeLimit = {read = get_TraceFileSizeLimit, write = set_TraceFileSizeLimit};
  __property   BSTR            TraceFileName = {read = get_TraceFileName, write = set_TraceFileName};
  __property   long            CsdReservedProperty2 = {read = get_CsdReservedProperty2, write = set_CsdReservedProperty2};
  __property   long            CsdReservedProperty5 = {read = get_CsdReservedProperty5, write = set_CsdReservedProperty5};
  __property   BSTR            field48Data = {read = get_field48Data, write = set_field48Data};
  __property   long            CsdReservedProperty4 = {read = get_CsdReservedProperty4, write = set_CsdReservedProperty4};
  __property   BSTR            EnableTraceSaveFiles = {read = get_EnableTraceSaveFiles, write = set_EnableTraceSaveFiles};
  __property   BSTR            Rrn = {read = get_Rrn, write = set_Rrn};
  __property   BSTR            PrintSystem = {read = get_PrintSystem, write = set_PrintSystem};
  __property   BSTR            EnableTaskBarIcon = {read = get_EnableTaskBarIcon, write = set_EnableTaskBarIcon};
  __property   BSTR            CardName = {read = get_CardName, write = set_CardName};
  __property   BSTR            EnableTraceHost = {read = get_EnableTraceHost, write = set_EnableTraceHost};
  __property   BSTR            EnableTracePos = {read = get_EnableTracePos, write = set_EnableTracePos};
  __property   BSTR            Address = {read = get_Address, write = set_Address};
  __property   BSTR            CsdReservedString3 = {read = get_CsdReservedString3, write = set_CsdReservedString3};
  __property   VARIANT_BOOL    CsdReservedBool4 = {read = get_CsdReservedBool4, write = set_CsdReservedBool4};
  __property   VARIANT_BOOL    CsdReservedBool5 = {read = get_CsdReservedBool5, write = set_CsdReservedBool5};
  __property   BSTR            ActiveMerchants = {read = get_ActiveMerchants, write = set_ActiveMerchants};
  __property   BSTR            Kvc = {read = get_Kvc, write = set_Kvc};
  __property   BSTR            PurchaseAnalysisData = {read = get_PurchaseAnalysisData, write = set_PurchaseAnalysisData};
  __property   BSTR            PhoneNumber = {read = get_PhoneNumber, write = set_PhoneNumber};
  __property   VARIANT_BOOL    CsdReservedBool3 = {read = get_CsdReservedBool3, write = set_CsdReservedBool3};
  __property   BSTR            PinPadPort = {read = get_PinPadPort, write = set_PinPadPort};
  __property   BSTR            DialogTitle = {read = get_DialogTitle, write = set_DialogTitle};
  __property   VARIANT_BOOL    EnableCashoutDuplicate = {read = get_EnableCashoutDuplicate, write = set_EnableCashoutDuplicate};
  __property   long            RecordsUploaded = {read = get_RecordsUploaded, write = set_RecordsUploaded};
  __property   VARIANT_BOOL    TipTrans = {read = get_TipTrans, write = set_TipTrans};
  __property   VARIANT_BOOL    AllowCredit = {read = get_AllowCredit, write = set_AllowCredit};
  __property   BSTR            PinPadPortList = {read = get_PinPadPortList, write = set_PinPadPortList};
  __property   VARIANT_BOOL    CutReceipt = {read = get_CutReceipt, write = set_CutReceipt};
  __property   long            TotalCashCount = {read = get_TotalCashCount, write = set_TotalCashCount};
  __property   VARIANT_BOOL    Success = {read = get_Success, write = set_Success};
  __property   VARIANT_BOOL    LoggedOn = {read = get_LoggedOn, write = set_LoggedOn};
  __property   BSTR            DateExpiry = {read = get_DateExpiry, write = set_DateExpiry};
  __property   VARIANT_BOOL    PromptForTip = {read = get_PromptForTip, write = set_PromptForTip};
  __property   long            Timeout = {read = get_Timeout, write = set_Timeout};
  __property   BSTR            Catid = {read = get_Catid, write = set_Catid};
  __property   long            TotalRefundCount = {read = get_TotalRefundCount, write = set_TotalRefundCount};
  __property   CURRENCY        AmtTip = {read = get_AmtTip, write = set_AmtTip};
  __property   CURRENCY        AmtCreditLimit = {read = get_AmtCreditLimit, write = set_AmtCreditLimit};
  __property   CURRENCY        AmtCash = {read = get_AmtCash, write = set_AmtCash};
  __property   BSTR            Time = {read = get_Time, write = set_Time};
  __property   BSTR            Date = {read = get_Date, write = set_Date};
  __property   BSTR            Caid = {read = get_Caid, write = set_Caid};
  __property   BSTR            SvrPhoneNumber = {read = get_SvrPhoneNumber, write = set_SvrPhoneNumber};
  __property   BSTR            JournalFilename = {read = get_JournalFilename, write = set_JournalFilename};
  __property   VARIANT_BOOL    EnableTracePinPad = {read = get_EnableTracePinPad, write = set_EnableTracePinPad};
  __property   VARIANT_BOOL    PinRequired = {read = get_PinRequired, write = set_PinRequired};
  __property   BSTR            SvrTcpipAddress = {read = get_SvrTcpipAddress, write = set_SvrTcpipAddress};
  __property   BSTR            SvrTcpipPort = {read = get_SvrTcpipPort, write = set_SvrTcpipPort};
  __property   BSTR            SvrPhonePrefix = {read = get_SvrPhonePrefix, write = set_SvrPhonePrefix};
  __property   BSTR            JournalDirectory = {read = get_JournalDirectory, write = set_JournalDirectory};
  __property   CURRENCY        TotalPurchase = {read = get_TotalPurchase, write = set_TotalPurchase};
  __property   long            TotalPurchaseCount = {read = get_TotalPurchaseCount, write = set_TotalPurchaseCount};
  __property   CURRENCY        TotalRefund = {read = get_TotalRefund, write = set_TotalRefund};
  __property   CURRENCY        TotalCash = {read = get_TotalCash, write = set_TotalCash};
  __property   BSTR            PinPadComPort = {read = get_PinPadComPort, write = set_PinPadComPort};
  __property   BSTR            PrinterName = {read = get_PrinterName, write = set_PrinterName};
  __property   VARIANT_BOOL    EnableTopmost = {read = get_EnableTopmost, write = set_EnableTopmost};
};
typedef _DENZEFTDispT<_DENZEFT> _DENZEFTDisp;

// *********************************************************************//
// DispIntf:  _DENZEFTEvents
// Flags:     (4096) Dispatchable
// GUID:      {5E7AD773-28B0-4A3F-9EC8-6F21B91F662E}
// *********************************************************************//
template <class T>
class _DENZEFTEventsDispT : public TAutoDriver<_DENZEFTEvents>
{
public:
  _DENZEFTEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall SelfTestEvent();
  void            __fastcall SettlementCutoverEvent();
  void            __fastcall SettlementEnquiryEvent();
  void            __fastcall StatusEvent();
  void            __fastcall GetLastTransactionEvent();
  void            __fastcall ChequeVerifyEvent();
  void            __fastcall ConfigMerchantEvent();
  void            __fastcall DisplayStatusEvent();
  void            __fastcall LogonEvent();
  void            __fastcall QueryCardEvent();
  void            __fastcall ReprintReceiptEvent();
  void            __fastcall TransactionEvent();
  void            __fastcall CardSwipeEvent();
  void            __fastcall GetReceiptFromTxnRefEvent();
  void            __fastcall InProgress(VARIANT_BOOL InProgress);
  void            __fastcall ReprintReceiptFromTxnRefEvent();
  void            __fastcall SearchTipEvent();
  void            __fastcall ReprintReceiptFromStanEvent();
  void            __fastcall ControlPanelEvent();
  void            __fastcall GetLastReceiptEvent();
  void            __fastcall InvokeAppletEvent();
  void            __fastcall RequestCommsEvent(BSTR Port, VARIANT_BOOL Requested);
  void            __fastcall SettlementReconcileEvent();
  void            __fastcall SubTotalsEvent();
  void            __fastcall SoftwareDownloadEvent();
  void            __fastcall SoftwareActivateEvent();
  void            __fastcall LastSettlementEvent();
  void            __fastcall PrintReceiptEvent(BSTR ReceiptType);
  void            __fastcall JournalViewerEvent();
  void            __fastcall VoidTipEvent();
  void            __fastcall KeyDownEvent(long KeyCode, long KeyData);
  void            __fastcall ShowDialogEvent();
  void            __fastcall GetMerchantsEvent();
  void            __fastcall CsdReserved2();
  void            __fastcall UploadTipEvent();
  void            __fastcall AddTipEvent();
  void            __fastcall LicenseEvent();
  void            __fastcall CentralSettlementEvent();
  void            __fastcall SetFocusEvent();
  void            __fastcall SetAutoLogonTimeEvent();
  void            __fastcall CommsTestEvent();
  void            __fastcall TestCommsEvent();
  void            __fastcall GetPendingEvent();

};
typedef _DENZEFTEventsDispT<_DENZEFTEvents> _DENZEFTEventsDisp;

// *********************************************************************//
// DispIntf:  _DENZEFT
// Flags:     (4112) Hidden Dispatchable
// GUID:      {74481918-EBF7-4D38-8D64-D2962775C529}
// *********************************************************************//
template <class T> void __fastcall
_DENZEFTDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoGetPending()
{
  _TDispID _dispid(*this, OLETEXT("DoGetPending"), DISPID(159));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoTestComms()
{
  _TDispID _dispid(*this, OLETEXT("DoTestComms"), DISPID(158));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSetAutoLogonTime()
{
  _TDispID _dispid(*this, OLETEXT("DoSetAutoLogonTime"), DISPID(157));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSetFocus(VARIANT_BOOL EnableFocus)
{
  _TDispID _dispid(*this, OLETEXT("DoSetFocus"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = EnableFocus /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoConfigMerchant()
{
  _TDispID _dispid(*this, OLETEXT("DoConfigMerchant"), DISPID(155));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::CsdReservedMethod6()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedMethod6"), DISPID(154));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::CsdReservedMethod5()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedMethod5"), DISPID(152));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoAddTip()
{
  _TDispID _dispid(*this, OLETEXT("DoAddTip"), DISPID(151));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoUploadTip()
{
  _TDispID _dispid(*this, OLETEXT("DoUploadTip"), DISPID(150));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoGetMerchants()
{
  _TDispID _dispid(*this, OLETEXT("DoGetMerchants"), DISPID(149));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoShowDialog(VARIANT_BOOL Show)
{
  _TDispID _dispid(*this, OLETEXT("DoShowDialog"), DISPID(148));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoVoidTip()
{
  _TDispID _dispid(*this, OLETEXT("DoVoidTip"), DISPID(147));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoJournalViewer()
{
  _TDispID _dispid(*this, OLETEXT("DoJournalViewer"), DISPID(146));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSoftwareActivate()
{
  _TDispID _dispid(*this, OLETEXT("DoSoftwareActivate"), DISPID(145));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSoftwareDownload()
{
  _TDispID _dispid(*this, OLETEXT("DoSoftwareDownload"), DISPID(144));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoLastSettlement()
{
  _TDispID _dispid(*this, OLETEXT("DoLastSettlement"), DISPID(143));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSubTotals()
{
  _TDispID _dispid(*this, OLETEXT("DoSubTotals"), DISPID(142));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoTransaction()
{
  _TDispID _dispid(*this, OLETEXT("DoTransaction"), DISPID(141));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoStatus()
{
  _TDispID _dispid(*this, OLETEXT("DoStatus"), DISPID(140));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSettlementReconcile()
{
  _TDispID _dispid(*this, OLETEXT("DoSettlementReconcile"), DISPID(139));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSettlementEnquiry()
{
  _TDispID _dispid(*this, OLETEXT("DoSettlementEnquiry"), DISPID(138));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSettlementCutover()
{
  _TDispID _dispid(*this, OLETEXT("DoSettlementCutover"), DISPID(137));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSelfTest()
{
  _TDispID _dispid(*this, OLETEXT("DoSelfTest"), DISPID(136));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoReprintReceiptFromTxnRef()
{
  _TDispID _dispid(*this, OLETEXT("DoReprintReceiptFromTxnRef"), DISPID(135));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoReprintReceiptFromStan()
{
  _TDispID _dispid(*this, OLETEXT("DoReprintReceiptFromStan"), DISPID(134));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoReprintReceipt()
{
  _TDispID _dispid(*this, OLETEXT("DoReprintReceipt"), DISPID(133));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoQueryCard()
{
  _TDispID _dispid(*this, OLETEXT("DoQueryCard"), DISPID(132));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoLogon()
{
  _TDispID _dispid(*this, OLETEXT("DoLogon"), DISPID(131));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoInvokeApplet(BSTR Applet)
{
  _TDispID _dispid(*this, OLETEXT("DoInvokeApplet"), DISPID(130));
  TAutoArgs<1> _args;
  _args[1] = Applet /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoGetReceiptFromTxnRef()
{
  _TDispID _dispid(*this, OLETEXT("DoGetReceiptFromTxnRef"), DISPID(129));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoSearchTip()
{
  _TDispID _dispid(*this, OLETEXT("DoSearchTip"), DISPID(128));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoGetLastTransaction()
{
  _TDispID _dispid(*this, OLETEXT("DoGetLastTransaction"), DISPID(127));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoGetLastReceipt()
{
  _TDispID _dispid(*this, OLETEXT("DoGetLastReceipt"), DISPID(126));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoDisplayStatus()
{
  _TDispID _dispid(*this, OLETEXT("DoDisplayStatus"), DISPID(125));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoControlPanel()
{
  _TDispID _dispid(*this, OLETEXT("DoControlPanel"), DISPID(124));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoChequeVerify()
{
  _TDispID _dispid(*this, OLETEXT("DoChequeVerify"), DISPID(123));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoCardSwipe()
{
  _TDispID _dispid(*this, OLETEXT("DoCardSwipe"), DISPID(122));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::DoReset()
{
  _TDispID _dispid(*this, OLETEXT("DoReset"), DISPID(121));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_DateSettlement(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DateSettlement"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_DateSettlement()
{
  _TDispID _dispid(*this, OLETEXT("DateSettlement"), DISPID(13));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableTip(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableTip"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableTip()
{
  _TDispID _dispid(*this, OLETEXT("EnableTip"), DISPID(37));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleTotalPurchase(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalPurchase"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleTotalPurchase()
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalPurchase"), DISPID(63));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_DialogType(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DialogType"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_DialogType()
{
  _TDispID _dispid(*this, OLETEXT("DialogType"), DISPID(14));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_AccountType(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_AccountType()
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(15));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_DialogY(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DialogY"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_DialogY()
{
  _TDispID _dispid(*this, OLETEXT("DialogY"), DISPID(12));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_DialogX(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DialogX"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_DialogX()
{
  _TDispID _dispid(*this, OLETEXT("DialogX"), DISPID(11));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Aiic(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Aiic"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Aiic()
{
  _TDispID _dispid(*this, OLETEXT("Aiic"), DISPID(62));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_VersionMajor(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("VersionMajor"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_VersionMajor()
{
  _TDispID _dispid(*this, OLETEXT("VersionMajor"), DISPID(57));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableErrorDialog(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableErrorDialog"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableErrorDialog()
{
  _TDispID _dispid(*this, OLETEXT("EnableErrorDialog"), DISPID(60));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_VersionRevision(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("VersionRevision"), DISPID(59));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_VersionRevision()
{
  _TDispID _dispid(*this, OLETEXT("VersionRevision"), DISPID(59));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_VersionMinor(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("VersionMinor"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_VersionMinor()
{
  _TDispID _dispid(*this, OLETEXT("VersionMinor"), DISPID(58));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_AuthCode(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AuthCode"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_AuthCode()
{
  _TDispID _dispid(*this, OLETEXT("AuthCode"), DISPID(65));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleTotalRefund(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalRefund"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleTotalRefund()
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalRefund"), DISPID(64));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Filename(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Filename"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Filename()
{
  _TDispID _dispid(*this, OLETEXT("Filename"), DISPID(61));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Merchant(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Merchant"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_Merchant()
{
  _TDispID _dispid(*this, OLETEXT("Merchant"), DISPID(8));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PanSource(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PanSource"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PanSource()
{
  _TDispID _dispid(*this, OLETEXT("PanSource"), DISPID(5));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_ResponseCode(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ResponseCode"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_ResponseCode()
{
  _TDispID _dispid(*this, OLETEXT("ResponseCode"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Track2(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Track2"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Track2()
{
  _TDispID _dispid(*this, OLETEXT("Track2"), DISPID(9));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Receipt(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Receipt"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Receipt()
{
  _TDispID _dispid(*this, OLETEXT("Receipt"), DISPID(20));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Nii(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Nii"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Nii()
{
  _TDispID _dispid(*this, OLETEXT("Nii"), DISPID(7));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Pan(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Pan"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Pan()
{
  _TDispID _dispid(*this, OLETEXT("Pan"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_ResponseText(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ResponseText"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_ResponseText()
{
  _TDispID _dispid(*this, OLETEXT("ResponseText"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TxnRef(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TxnRef"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_TxnRef()
{
  _TDispID _dispid(*this, OLETEXT("TxnRef"), DISPID(16));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_DataField(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DataField"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_DataField()
{
  _TDispID _dispid(*this, OLETEXT("DataField"), DISPID(19));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PinPadSerialNumber(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PinPadSerialNumber"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PinPadSerialNumber()
{
  _TDispID _dispid(*this, OLETEXT("PinPadSerialNumber"), DISPID(18));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PinPadVersion(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PinPadVersion"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PinPadVersion()
{
  _TDispID _dispid(*this, OLETEXT("PinPadVersion"), DISPID(17));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Stan(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Stan"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_Stan()
{
  _TDispID _dispid(*this, OLETEXT("Stan"), DISPID(4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TxnType(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TxnType"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_TxnType()
{
  _TDispID _dispid(*this, OLETEXT("TxnType"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Track1(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Track1"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Track1()
{
  _TDispID _dispid(*this, OLETEXT("Track1"), DISPID(10));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_ChqBranch(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ChqBranch"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_ChqBranch()
{
  _TDispID _dispid(*this, OLETEXT("ChqBranch"), DISPID(40));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PosVendor(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PosVendor"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PosVendor()
{
  _TDispID _dispid(*this, OLETEXT("PosVendor"), DISPID(46));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_ReceiptAutoPrint(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ReceiptAutoPrint"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_ReceiptAutoPrint()
{
  _TDispID _dispid(*this, OLETEXT("ReceiptAutoPrint"), DISPID(53));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_ChqAccount(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ChqAccount"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_ChqAccount()
{
  _TDispID _dispid(*this, OLETEXT("ChqAccount"), DISPID(41));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_AmtPurchase(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AmtPurchase"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_AmtPurchase()
{
  _TDispID _dispid(*this, OLETEXT("AmtPurchase"), DISPID(120));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_ChqSerialNumber(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ChqSerialNumber"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_ChqSerialNumber()
{
  _TDispID _dispid(*this, OLETEXT("ChqSerialNumber"), DISPID(39));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_ResponseType(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ResponseType"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_ResponseType()
{
  _TDispID _dispid(*this, OLETEXT("ResponseType"), DISPID(38));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleTotalCredit(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalCredit"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleTotalCredit()
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalCredit"), DISPID(52));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PosProductId(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PosProductId"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PosProductId()
{
  _TDispID _dispid(*this, OLETEXT("PosProductId"), DISPID(47));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleTotal(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleTotal"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleTotal()
{
  _TDispID _dispid(*this, OLETEXT("SettleTotal"), DISPID(50));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_LicenseId(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LicenseId"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_LicenseId()
{
  _TDispID _dispid(*this, OLETEXT("LicenseId"), DISPID(49));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PosVersion(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PosVersion"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PosVersion()
{
  _TDispID _dispid(*this, OLETEXT("PosVersion"), DISPID(48));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Ready(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Ready"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_Ready()
{
  _TDispID _dispid(*this, OLETEXT("Ready"), DISPID(55));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CardType(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CardType"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_CardType()
{
  _TDispID _dispid(*this, OLETEXT("CardType"), DISPID(54));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleTotalDebit(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalDebit"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleTotalDebit()
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalDebit"), DISPID(51));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleCountRefund(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleCountRefund"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleCountRefund()
{
  _TDispID _dispid(*this, OLETEXT("SettleCountRefund"), DISPID(74));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleCountCredit(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleCountCredit"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleCountCredit()
{
  _TDispID _dispid(*this, OLETEXT("SettleCountCredit"), DISPID(71));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleCardTotals(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleCardTotals"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleCardTotals()
{
  _TDispID _dispid(*this, OLETEXT("SettleCardTotals"), DISPID(68));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableManualPan(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableManualPan"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableManualPan()
{
  _TDispID _dispid(*this, OLETEXT("EnableManualPan"), DISPID(75));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_LastTxnSuccess(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LastTxnSuccess"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_LastTxnSuccess()
{
  _TDispID _dispid(*this, OLETEXT("LastTxnSuccess"), DISPID(66));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleCountPurchase(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleCountPurchase"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleCountPurchase()
{
  _TDispID _dispid(*this, OLETEXT("SettleCountPurchase"), DISPID(73));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleCountDebit(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleCountDebit"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleCountDebit()
{
  _TDispID _dispid(*this, OLETEXT("SettleCountDebit"), DISPID(72));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleTotalCash(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalCash"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleTotalCash()
{
  _TDispID _dispid(*this, OLETEXT("SettleTotalCash"), DISPID(67));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_DialogPosition(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DialogPosition"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_DialogPosition()
{
  _TDispID _dispid(*this, OLETEXT("DialogPosition"), DISPID(42));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PrintJournal(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PrintJournal"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_PrintJournal()
{
  _TDispID _dispid(*this, OLETEXT("PrintJournal"), DISPID(45));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EftposNetwork(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EftposNetwork"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_EftposNetwork()
{
  _TDispID _dispid(*this, OLETEXT("EftposNetwork"), DISPID(44));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_MessageType(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MessageType"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_MessageType()
{
  _TDispID _dispid(*this, OLETEXT("MessageType"), DISPID(43));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleCount(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleCount"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleCount()
{
  _TDispID _dispid(*this, OLETEXT("SettleCount"), DISPID(70));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SettleCountCash(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SettleCountCash"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_SettleCountCash()
{
  _TDispID _dispid(*this, OLETEXT("SettleCountCash"), DISPID(69));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Installed(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Installed"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_Installed()
{
  _TDispID _dispid(*this, OLETEXT("Installed"), DISPID(56));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CsdReservedProperty3(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedProperty3"), DISPID(83));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_CsdReservedProperty3()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedProperty3"), DISPID(83));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TraceFileSizeLimit(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TraceFileSizeLimit"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_TraceFileSizeLimit()
{
  _TDispID _dispid(*this, OLETEXT("TraceFileSizeLimit"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TraceFileName(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TraceFileName"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_TraceFileName()
{
  _TDispID _dispid(*this, OLETEXT("TraceFileName"), DISPID(111));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CsdReservedProperty2(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedProperty2"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_CsdReservedProperty2()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedProperty2"), DISPID(82));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CsdReservedProperty5(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedProperty5"), DISPID(85));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_CsdReservedProperty5()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedProperty5"), DISPID(85));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_field48Data(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("field48Data"), DISPID(86));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_field48Data()
{
  _TDispID _dispid(*this, OLETEXT("field48Data"), DISPID(86));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CsdReservedProperty4(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedProperty4"), DISPID(84));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_CsdReservedProperty4()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedProperty4"), DISPID(84));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableTraceSaveFiles(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableTraceSaveFiles"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableTraceSaveFiles()
{
  _TDispID _dispid(*this, OLETEXT("EnableTraceSaveFiles"), DISPID(109));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Rrn(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Rrn"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Rrn()
{
  _TDispID _dispid(*this, OLETEXT("Rrn"), DISPID(114));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PrintSystem(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PrintSystem"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PrintSystem()
{
  _TDispID _dispid(*this, OLETEXT("PrintSystem"), DISPID(112));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableTaskBarIcon(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableTaskBarIcon"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableTaskBarIcon()
{
  _TDispID _dispid(*this, OLETEXT("EnableTaskBarIcon"), DISPID(113));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CardName(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CardName"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_CardName()
{
  _TDispID _dispid(*this, OLETEXT("CardName"), DISPID(116));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableTraceHost(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableTraceHost"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableTraceHost()
{
  _TDispID _dispid(*this, OLETEXT("EnableTraceHost"), DISPID(107));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableTracePos(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableTracePos"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableTracePos()
{
  _TDispID _dispid(*this, OLETEXT("EnableTracePos"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Address(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Address()
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(115));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CsdReservedString3(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedString3"), DISPID(88));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_CsdReservedString3()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedString3"), DISPID(88));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CsdReservedBool4(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedBool4"), DISPID(95));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_CsdReservedBool4()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedBool4"), DISPID(95));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CsdReservedBool5(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedBool5"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_CsdReservedBool5()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedBool5"), DISPID(96));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_ActiveMerchants(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ActiveMerchants"), DISPID(87));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_ActiveMerchants()
{
  _TDispID _dispid(*this, OLETEXT("ActiveMerchants"), DISPID(87));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Kvc(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Kvc"), DISPID(90));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Kvc()
{
  _TDispID _dispid(*this, OLETEXT("Kvc"), DISPID(90));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PurchaseAnalysisData(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PurchaseAnalysisData"), DISPID(91));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PurchaseAnalysisData()
{
  _TDispID _dispid(*this, OLETEXT("PurchaseAnalysisData"), DISPID(91));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PhoneNumber(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PhoneNumber"), DISPID(89));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PhoneNumber()
{
  _TDispID _dispid(*this, OLETEXT("PhoneNumber"), DISPID(89));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CsdReservedBool3(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedBool3"), DISPID(94));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_CsdReservedBool3()
{
  _TDispID _dispid(*this, OLETEXT("CsdReservedBool3"), DISPID(94));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PinPadPort(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PinPadPort"), DISPID(79));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PinPadPort()
{
  _TDispID _dispid(*this, OLETEXT("PinPadPort"), DISPID(79));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_DialogTitle(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DialogTitle"), DISPID(77));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_DialogTitle()
{
  _TDispID _dispid(*this, OLETEXT("DialogTitle"), DISPID(77));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableCashoutDuplicate(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableCashoutDuplicate"), DISPID(78));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableCashoutDuplicate()
{
  _TDispID _dispid(*this, OLETEXT("EnableCashoutDuplicate"), DISPID(78));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_RecordsUploaded(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RecordsUploaded"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_RecordsUploaded()
{
  _TDispID _dispid(*this, OLETEXT("RecordsUploaded"), DISPID(81));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TipTrans(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TipTrans"), DISPID(92));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_TipTrans()
{
  _TDispID _dispid(*this, OLETEXT("TipTrans"), DISPID(92));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_AllowCredit(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AllowCredit"), DISPID(93));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_AllowCredit()
{
  _TDispID _dispid(*this, OLETEXT("AllowCredit"), DISPID(93));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PinPadPortList(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PinPadPortList"), DISPID(80));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PinPadPortList()
{
  _TDispID _dispid(*this, OLETEXT("PinPadPortList"), DISPID(80));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_CutReceipt(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CutReceipt"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_CutReceipt()
{
  _TDispID _dispid(*this, OLETEXT("CutReceipt"), DISPID(23));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TotalCashCount(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TotalCashCount"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_TotalCashCount()
{
  _TDispID _dispid(*this, OLETEXT("TotalCashCount"), DISPID(30));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Success(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Success"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_Success()
{
  _TDispID _dispid(*this, OLETEXT("Success"), DISPID(34));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_LoggedOn(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LoggedOn"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_LoggedOn()
{
  _TDispID _dispid(*this, OLETEXT("LoggedOn"), DISPID(24));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_DateExpiry(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DateExpiry"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_DateExpiry()
{
  _TDispID _dispid(*this, OLETEXT("DateExpiry"), DISPID(25));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PromptForTip(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PromptForTip"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_PromptForTip()
{
  _TDispID _dispid(*this, OLETEXT("PromptForTip"), DISPID(22));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Timeout(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Timeout"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_Timeout()
{
  _TDispID _dispid(*this, OLETEXT("Timeout"), DISPID(21));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Catid(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Catid"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Catid()
{
  _TDispID _dispid(*this, OLETEXT("Catid"), DISPID(33));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TotalRefundCount(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TotalRefundCount"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_TotalRefundCount()
{
  _TDispID _dispid(*this, OLETEXT("TotalRefundCount"), DISPID(31));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_AmtTip(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AmtTip"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_AmtTip()
{
  _TDispID _dispid(*this, OLETEXT("AmtTip"), DISPID(119));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_AmtCreditLimit(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AmtCreditLimit"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_AmtCreditLimit()
{
  _TDispID _dispid(*this, OLETEXT("AmtCreditLimit"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_AmtCash(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AmtCash"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_AmtCash()
{
  _TDispID _dispid(*this, OLETEXT("AmtCash"), DISPID(117));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Time(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Time"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Time()
{
  _TDispID _dispid(*this, OLETEXT("Time"), DISPID(36));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Date(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Date"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Date()
{
  _TDispID _dispid(*this, OLETEXT("Date"), DISPID(35));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_Caid(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Caid"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_Caid()
{
  _TDispID _dispid(*this, OLETEXT("Caid"), DISPID(32));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SvrPhoneNumber(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SvrPhoneNumber"), DISPID(98));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_SvrPhoneNumber()
{
  _TDispID _dispid(*this, OLETEXT("SvrPhoneNumber"), DISPID(98));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_JournalFilename(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("JournalFilename"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_JournalFilename()
{
  _TDispID _dispid(*this, OLETEXT("JournalFilename"), DISPID(105));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableTracePinPad(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableTracePinPad"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableTracePinPad()
{
  _TDispID _dispid(*this, OLETEXT("EnableTracePinPad"), DISPID(106));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PinRequired(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PinRequired"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_PinRequired()
{
  _TDispID _dispid(*this, OLETEXT("PinRequired"), DISPID(97));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SvrTcpipAddress(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SvrTcpipAddress"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_SvrTcpipAddress()
{
  _TDispID _dispid(*this, OLETEXT("SvrTcpipAddress"), DISPID(100));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SvrTcpipPort(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SvrTcpipPort"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_SvrTcpipPort()
{
  _TDispID _dispid(*this, OLETEXT("SvrTcpipPort"), DISPID(101));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_SvrPhonePrefix(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SvrPhonePrefix"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_SvrPhonePrefix()
{
  _TDispID _dispid(*this, OLETEXT("SvrPhonePrefix"), DISPID(99));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_JournalDirectory(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("JournalDirectory"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_JournalDirectory()
{
  _TDispID _dispid(*this, OLETEXT("JournalDirectory"), DISPID(104));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TotalPurchase(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TotalPurchase"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_TotalPurchase()
{
  _TDispID _dispid(*this, OLETEXT("TotalPurchase"), DISPID(26));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TotalPurchaseCount(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TotalPurchaseCount"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DENZEFTDispT<T>::get_TotalPurchaseCount()
{
  _TDispID _dispid(*this, OLETEXT("TotalPurchaseCount"), DISPID(29));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TotalRefund(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TotalRefund"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_TotalRefund()
{
  _TDispID _dispid(*this, OLETEXT("TotalRefund"), DISPID(28));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_TotalCash(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TotalCash"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
_DENZEFTDispT<T>::get_TotalCash()
{
  _TDispID _dispid(*this, OLETEXT("TotalCash"), DISPID(27));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PinPadComPort(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PinPadComPort"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PinPadComPort()
{
  _TDispID _dispid(*this, OLETEXT("PinPadComPort"), DISPID(102));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_PrinterName(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PrinterName"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DENZEFTDispT<T>::get_PrinterName()
{
  _TDispID _dispid(*this, OLETEXT("PrinterName"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DENZEFTDispT<T>::set_EnableTopmost(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EnableTopmost"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DENZEFTDispT<T>::get_EnableTopmost()
{
  _TDispID _dispid(*this, OLETEXT("EnableTopmost"), DISPID(76));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  _DENZEFTEvents
// Flags:     (4096) Dispatchable
// GUID:      {5E7AD773-28B0-4A3F-9EC8-6F21B91F662E}
// *********************************************************************//
template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SelfTestEvent()
{
  _TDispID _dispid(/* SelfTestEvent */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SettlementCutoverEvent()
{
  _TDispID _dispid(/* SettlementCutoverEvent */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SettlementEnquiryEvent()
{
  _TDispID _dispid(/* SettlementEnquiryEvent */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::StatusEvent()
{
  _TDispID _dispid(/* StatusEvent */ DISPID(4));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::GetLastTransactionEvent()
{
  _TDispID _dispid(/* GetLastTransactionEvent */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::ChequeVerifyEvent()
{
  _TDispID _dispid(/* ChequeVerifyEvent */ DISPID(6));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::ConfigMerchantEvent()
{
  _TDispID _dispid(/* ConfigMerchantEvent */ DISPID(7));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::DisplayStatusEvent()
{
  _TDispID _dispid(/* DisplayStatusEvent */ DISPID(8));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::LogonEvent()
{
  _TDispID _dispid(/* LogonEvent */ DISPID(9));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::QueryCardEvent()
{
  _TDispID _dispid(/* QueryCardEvent */ DISPID(10));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::ReprintReceiptEvent()
{
  _TDispID _dispid(/* ReprintReceiptEvent */ DISPID(11));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::TransactionEvent()
{
  _TDispID _dispid(/* TransactionEvent */ DISPID(12));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::CardSwipeEvent()
{
  _TDispID _dispid(/* CardSwipeEvent */ DISPID(13));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::GetReceiptFromTxnRefEvent()
{
  _TDispID _dispid(/* GetReceiptFromTxnRefEvent */ DISPID(14));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::InProgress(VARIANT_BOOL InProgress)
{
  _TDispID _dispid(/* InProgress */ DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = InProgress /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::ReprintReceiptFromTxnRefEvent()
{
  _TDispID _dispid(/* ReprintReceiptFromTxnRefEvent */ DISPID(16));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SearchTipEvent()
{
  _TDispID _dispid(/* SearchTipEvent */ DISPID(17));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::ReprintReceiptFromStanEvent()
{
  _TDispID _dispid(/* ReprintReceiptFromStanEvent */ DISPID(18));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::ControlPanelEvent()
{
  _TDispID _dispid(/* ControlPanelEvent */ DISPID(19));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::GetLastReceiptEvent()
{
  _TDispID _dispid(/* GetLastReceiptEvent */ DISPID(20));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::InvokeAppletEvent()
{
  _TDispID _dispid(/* InvokeAppletEvent */ DISPID(21));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::RequestCommsEvent(BSTR Port, VARIANT_BOOL Requested)
{
  _TDispID _dispid(/* RequestCommsEvent */ DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = Port /*[VT_BSTR:0]*/;
  _args[2] = Requested /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SettlementReconcileEvent()
{
  _TDispID _dispid(/* SettlementReconcileEvent */ DISPID(23));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SubTotalsEvent()
{
  _TDispID _dispid(/* SubTotalsEvent */ DISPID(24));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SoftwareDownloadEvent()
{
  _TDispID _dispid(/* SoftwareDownloadEvent */ DISPID(25));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SoftwareActivateEvent()
{
  _TDispID _dispid(/* SoftwareActivateEvent */ DISPID(26));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::LastSettlementEvent()
{
  _TDispID _dispid(/* LastSettlementEvent */ DISPID(27));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::PrintReceiptEvent(BSTR ReceiptType)
{
  _TDispID _dispid(/* PrintReceiptEvent */ DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = ReceiptType /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::JournalViewerEvent()
{
  _TDispID _dispid(/* JournalViewerEvent */ DISPID(29));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::VoidTipEvent()
{
  _TDispID _dispid(/* VoidTipEvent */ DISPID(30));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::KeyDownEvent(long KeyCode, long KeyData)
{
  _TDispID _dispid(/* KeyDownEvent */ DISPID(31));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = KeyData /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::ShowDialogEvent()
{
  _TDispID _dispid(/* ShowDialogEvent */ DISPID(32));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::GetMerchantsEvent()
{
  _TDispID _dispid(/* GetMerchantsEvent */ DISPID(33));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::CsdReserved2()
{
  _TDispID _dispid(/* CsdReserved2 */ DISPID(34));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::UploadTipEvent()
{
  _TDispID _dispid(/* UploadTipEvent */ DISPID(35));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::AddTipEvent()
{
  _TDispID _dispid(/* AddTipEvent */ DISPID(36));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::LicenseEvent()
{
  _TDispID _dispid(/* LicenseEvent */ DISPID(37));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::CentralSettlementEvent()
{
  _TDispID _dispid(/* CentralSettlementEvent */ DISPID(38));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SetFocusEvent()
{
  _TDispID _dispid(/* SetFocusEvent */ DISPID(39));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::SetAutoLogonTimeEvent()
{
  _TDispID _dispid(/* SetAutoLogonTimeEvent */ DISPID(40));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::CommsTestEvent()
{
  _TDispID _dispid(/* CommsTestEvent */ DISPID(41));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::TestCommsEvent()
{
  _TDispID _dispid(/* TestCommsEvent */ DISPID(42));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DENZEFTEventsDispT<T>::GetPendingEvent()
{
  _TDispID _dispid(/* GetPendingEvent */ DISPID(43));
  OleProcedure(_dispid);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ENZEFT
// Event Interface : _DENZEFTEvents
// *********************************************************************//
template <class T>
class TEvents_ENZEFT : public IConnectionPointImpl<T,
                                                 &DIID__DENZEFTEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_SelfTestEvent(void);
  void            Fire_SettlementCutoverEvent(void);
  void            Fire_SettlementEnquiryEvent(void);
  void            Fire_StatusEvent(void);
  void            Fire_GetLastTransactionEvent(void);
  void            Fire_ChequeVerifyEvent(void);
  void            Fire_ConfigMerchantEvent(void);
  void            Fire_DisplayStatusEvent(void);
  void            Fire_LogonEvent(void);
  void            Fire_QueryCardEvent(void);
  void            Fire_ReprintReceiptEvent(void);
  void            Fire_TransactionEvent(void);
  void            Fire_CardSwipeEvent(void);
  void            Fire_GetReceiptFromTxnRefEvent(void);
  void            Fire_InProgress(VARIANT_BOOL InProgress);
  void            Fire_ReprintReceiptFromTxnRefEvent(void);
  void            Fire_SearchTipEvent(void);
  void            Fire_ReprintReceiptFromStanEvent(void);
  void            Fire_ControlPanelEvent(void);
  void            Fire_GetLastReceiptEvent(void);
  void            Fire_InvokeAppletEvent(void);
  void            Fire_RequestCommsEvent(BSTR Port, VARIANT_BOOL Requested);
  void            Fire_SettlementReconcileEvent(void);
  void            Fire_SubTotalsEvent(void);
  void            Fire_SoftwareDownloadEvent(void);
  void            Fire_SoftwareActivateEvent(void);
  void            Fire_LastSettlementEvent(void);
  void            Fire_PrintReceiptEvent(BSTR ReceiptType);
  void            Fire_JournalViewerEvent(void);
  void            Fire_VoidTipEvent(void);
  void            Fire_KeyDownEvent(long KeyCode, long KeyData);
  void            Fire_ShowDialogEvent(void);
  void            Fire_GetMerchantsEvent(void);
  void            Fire_CsdReserved2(void);
  void            Fire_UploadTipEvent(void);
  void            Fire_AddTipEvent(void);
  void            Fire_LicenseEvent(void);
  void            Fire_CentralSettlementEvent(void);
  void            Fire_SetFocusEvent(void);
  void            Fire_SetAutoLogonTimeEvent(void);
  void            Fire_CommsTestEvent(void);
  void            Fire_TestCommsEvent(void);
  void            Fire_GetPendingEvent(void);
protected:
  _DENZEFTEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ENZEFT<T>::Fire_SelfTestEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SelfTestEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SettlementCutoverEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SettlementCutoverEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SettlementEnquiryEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SettlementEnquiryEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_StatusEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StatusEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_GetLastTransactionEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetLastTransactionEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_ChequeVerifyEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ChequeVerifyEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_ConfigMerchantEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ConfigMerchantEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_DisplayStatusEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DisplayStatusEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_LogonEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LogonEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_QueryCardEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.QueryCardEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_ReprintReceiptEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ReprintReceiptEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_TransactionEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.TransactionEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_CardSwipeEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CardSwipeEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_GetReceiptFromTxnRefEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetReceiptFromTxnRefEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_InProgress(VARIANT_BOOL InProgress)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.InProgress(InProgress);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_ReprintReceiptFromTxnRefEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ReprintReceiptFromTxnRefEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SearchTipEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SearchTipEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_ReprintReceiptFromStanEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ReprintReceiptFromStanEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_ControlPanelEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ControlPanelEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_GetLastReceiptEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetLastReceiptEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_InvokeAppletEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.InvokeAppletEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_RequestCommsEvent(BSTR Port, VARIANT_BOOL Requested)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.RequestCommsEvent(Port, Requested);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SettlementReconcileEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SettlementReconcileEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SubTotalsEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SubTotalsEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SoftwareDownloadEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SoftwareDownloadEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SoftwareActivateEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SoftwareActivateEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_LastSettlementEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LastSettlementEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_PrintReceiptEvent(BSTR ReceiptType)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PrintReceiptEvent(ReceiptType);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_JournalViewerEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.JournalViewerEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_VoidTipEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.VoidTipEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_KeyDownEvent(long KeyCode, long KeyData)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDownEvent(KeyCode, KeyData);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_ShowDialogEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ShowDialogEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_GetMerchantsEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetMerchantsEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_CsdReserved2(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CsdReserved2();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_UploadTipEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.UploadTipEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_AddTipEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddTipEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_LicenseEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LicenseEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_CentralSettlementEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CentralSettlementEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SetFocusEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SetFocusEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_SetAutoLogonTimeEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SetAutoLogonTimeEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_CommsTestEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommsTestEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_TestCommsEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.TestCommsEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ENZEFT<T>::Fire_GetPendingEvent(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GetPendingEvent();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Enzeftlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Enzeftlib_tlb;
#endif

#pragma option pop

#endif // ENZEFTLib_TLBH
