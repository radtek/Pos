// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 27/03/2018 12:11:29 a.m. from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\MM_Cloud_Git\V6-Master\Runtime\FiscalIntegration.tlb (1)
// LIBID: {3789DF18-77B2-4441-AF37-74CC219EE719}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
//   (2) v2.4 mscorlib, (C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
// ************************************************************************ //
#ifndef   FiscalIntegration_TLBH
#define   FiscalIntegration_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "mscorlib_TLB.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Fiscalintegration_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_FiscalIntegration;
extern __declspec (package) const GUID DIID_IFiscalLibrary;
extern __declspec (package) const GUID CLSID_FiscalLibraryClass;
extern __declspec (package) const GUID IID__DiscountDetails;
extern __declspec (package) const GUID IID__FiscalDataDetails;
extern __declspec (package) const GUID IID__FiscalPayment;
extern __declspec (package) const GUID IID__FiscalResponseDetails;
extern __declspec (package) const GUID IID__FiscalService;
extern __declspec (package) const GUID CLSID_DiscountDetails;
extern __declspec (package) const GUID CLSID_FiscalDataDetails;
extern __declspec (package) const GUID CLSID_FiscalPayment;
extern __declspec (package) const GUID CLSID_FiscalResponseDetails;
extern __declspec (package) const GUID CLSID_FiscalService;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{F04DF0AA-C1D5-4F9E-95C8-61E6474899E2}") IFiscalLibrary;
typedef TComInterface<IFiscalLibrary, &DIID_IFiscalLibrary> IFiscalLibraryPtr;

interface DECLSPEC_UUID("{FF1F61B0-AB19-3193-BA99-D9837AE38812}") _DiscountDetails;
typedef TComInterface<_DiscountDetails, &IID__DiscountDetails> _DiscountDetailsPtr;

interface DECLSPEC_UUID("{E27E1009-FBB5-3049-94CF-88E981FB344E}") _FiscalDataDetails;
typedef TComInterface<_FiscalDataDetails, &IID__FiscalDataDetails> _FiscalDataDetailsPtr;

interface DECLSPEC_UUID("{787603D8-58E1-35D8-8627-44F30DE011C6}") _FiscalPayment;
typedef TComInterface<_FiscalPayment, &IID__FiscalPayment> _FiscalPaymentPtr;

interface DECLSPEC_UUID("{84AB6488-DADD-3865-B838-0A54F6B6C026}") _FiscalResponseDetails;
typedef TComInterface<_FiscalResponseDetails, &IID__FiscalResponseDetails> _FiscalResponseDetailsPtr;

interface DECLSPEC_UUID("{75849DFC-389B-3033-AFCA-781BBA340C85}") _FiscalService;
typedef TComInterface<_FiscalService, &IID__FiscalService> _FiscalServicePtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IFiscalLibrary FiscalLibraryClass;
typedef IFiscalLibraryPtr FiscalLibraryClassPtr;
typedef _DiscountDetails DiscountDetails;
typedef _DiscountDetailsPtr DiscountDetailsPtr;
typedef _FiscalDataDetails FiscalDataDetails;
typedef _FiscalDataDetailsPtr FiscalDataDetailsPtr;
typedef _FiscalPayment FiscalPayment;
typedef _FiscalPaymentPtr FiscalPaymentPtr;
typedef _FiscalResponseDetails FiscalResponseDetails;
typedef _FiscalResponseDetailsPtr FiscalResponseDetailsPtr;
typedef _FiscalService FiscalService;
typedef _FiscalServicePtr FiscalServicePtr;

#define LIBID_OF_FiscalLibraryClass (&LIBID_FiscalIntegration)
#define LIBID_OF_DiscountDetails (&LIBID_FiscalIntegration)
#define LIBID_OF_FiscalDataDetails (&LIBID_FiscalIntegration)
#define LIBID_OF_FiscalPayment (&LIBID_FiscalIntegration)
#define LIBID_OF_FiscalResponseDetails (&LIBID_FiscalIntegration)
#define LIBID_OF_FiscalService (&LIBID_FiscalIntegration)
// *********************************************************************//
// Interface: IFiscalLibrary
// Flags:     (4096) Dispatchable
// GUID:      {F04DF0AA-C1D5-4F9E-95C8-61E6474899E2}
// *********************************************************************//
interface IFiscalLibrary : public TDispWrapper<IDispatch>
{
  BSTR __fastcall get_InvoiceNumber()
  {
    _TDispID _dispid(/* InvoiceNumber */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_InvoiceNumber(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* InvoiceNumber */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_Date()
  {
    _TDispID _dispid(/* Date */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Date(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Date */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_Time()
  {
    _TDispID _dispid(/* Time */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Time(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Time */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_Billno()
  {
    _TDispID _dispid(/* Billno */ DISPID(4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Billno(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Billno */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_Cashno()
  {
    _TDispID _dispid(/* Cashno */ DISPID(5));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Cashno(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Cashno */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_Cashier()
  {
    _TDispID _dispid(/* Cashier */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Cashier(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Cashier */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_Source()
  {
    _TDispID _dispid(/* Source */ DISPID(7));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Source(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Source */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall PrintReceipt()
  {
    _TDispID _dispid(/* PrintReceipt */ DISPID(8));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall LoadReceiptItemInfo(long identifier/*[in]*/, BSTR InvoiceNumber/*[in]*/)
  {
    _TDispID _dispid(/* LoadReceiptItemInfo */ DISPID(9));
    TAutoArgs<2> _args;
    _args[1] = identifier /*[VT_I4:0]*/;
    _args[2] = InvoiceNumber /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall LoadReceiptPaymentInfo(long identifier/*[in]*/, BSTR InvoiceNumber/*[in]*/)
  {
    _TDispID _dispid(/* LoadReceiptPaymentInfo */ DISPID(10));
    TAutoArgs<2> _args;
    _args[1] = identifier /*[VT_I4:0]*/;
    _args[2] = InvoiceNumber /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall LoadReceiptDiscountInfo(long identifier/*[in]*/, BSTR InvoiceNumber/*[in]*/)
  {
    _TDispID _dispid(/* LoadReceiptDiscountInfo */ DISPID(11));
    TAutoArgs<2> _args;
    _args[1] = identifier /*[VT_I4:0]*/;
    _args[2] = InvoiceNumber /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall InitializeItemProperties()
  {
    _TDispID _dispid(/* InitializeItemProperties */ DISPID(12));
    OleProcedure(_dispid);
  }

  void __fastcall InitializePaymentProperties()
  {
    _TDispID _dispid(/* InitializePaymentProperties */ DISPID(13));
    OleProcedure(_dispid);
  }

  void __fastcall InitializeDiscountProperties()
  {
    _TDispID _dispid(/* InitializeDiscountProperties */ DISPID(14));
    OleProcedure(_dispid);
  }

  void __fastcall AddItemToList()
  {
    _TDispID _dispid(/* AddItemToList */ DISPID(15));
    OleProcedure(_dispid);
  }

  void __fastcall AddPaymentInfoToList()
  {
    _TDispID _dispid(/* AddPaymentInfoToList */ DISPID(16));
    OleProcedure(_dispid);
  }

  void __fastcall AddDiscountInfoToList()
  {
    _TDispID _dispid(/* AddDiscountInfoToList */ DISPID(17));
    OleProcedure(_dispid);
  }

  BSTR __fastcall PrintZReport()
  {
    _TDispID _dispid(/* PrintZReport */ DISPID(18));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall get_TerminalName()
  {
    _TDispID _dispid(/* TerminalName */ DISPID(19));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TerminalName(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* TerminalName */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_PointPurchased()
  {
    _TDispID _dispid(/* PointPurchased */ DISPID(20));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PointPurchased(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* PointPurchased */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_TabCredit()
  {
    _TDispID _dispid(/* TabCredit */ DISPID(21));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TabCredit(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* TabCredit */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_PrinterType()
  {
    _TDispID _dispid(/* PrinterType */ DISPID(22));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PrinterType(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* PrinterType */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_PrinterLogicalName()
  {
    _TDispID _dispid(/* PrinterLogicalName */ DISPID(23));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PrinterLogicalName(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* PrinterLogicalName */ DISPID(23));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall get_Saletype()
  {
    _TDispID _dispid(/* Saletype */ DISPID(24));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Saletype(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Saletype */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR __fastcall CheckPrinterAvailable()
  {
    _TDispID _dispid(/* CheckPrinterAvailable */ DISPID(25));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall OpenCashDrawer()
  {
    _TDispID _dispid(/* OpenCashDrawer */ DISPID(26));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  VARIANT_BOOL __fastcall get_OpenCD()
  {
    _TDispID _dispid(/* OpenCD */ DISPID(27));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OpenCD(VARIANT_BOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* OpenCD */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   BSTR            InvoiceNumber = {read = get_InvoiceNumber, write = set_InvoiceNumber};
  __property   BSTR            Date = {read = get_Date, write = set_Date};
  __property   BSTR            Time = {read = get_Time, write = set_Time};
  __property   BSTR            Billno = {read = get_Billno, write = set_Billno};
  __property   BSTR            Cashno = {read = get_Cashno, write = set_Cashno};
  __property   BSTR            Cashier = {read = get_Cashier, write = set_Cashier};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   BSTR            TerminalName = {read = get_TerminalName, write = set_TerminalName};
  __property   BSTR            PointPurchased = {read = get_PointPurchased, write = set_PointPurchased};
  __property   BSTR            TabCredit = {read = get_TabCredit, write = set_TabCredit};
  __property   BSTR            PrinterType = {read = get_PrinterType, write = set_PrinterType};
  __property   BSTR            PrinterLogicalName = {read = get_PrinterLogicalName, write = set_PrinterLogicalName};
  __property   BSTR            Saletype = {read = get_Saletype, write = set_Saletype};
  __property   VARIANT_BOOL    OpenCD = {read = get_OpenCD, write = set_OpenCD};
};
// *********************************************************************//
// Interface: _DiscountDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF1F61B0-AB19-3193-BA99-D9837AE38812}
// *********************************************************************//
interface _DiscountDetails  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _FiscalDataDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E27E1009-FBB5-3049-94CF-88E981FB344E}
// *********************************************************************//
interface _FiscalDataDetails  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _FiscalPayment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {787603D8-58E1-35D8-8627-44F30DE011C6}
// *********************************************************************//
interface _FiscalPayment  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _FiscalResponseDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {84AB6488-DADD-3865-B838-0A54F6B6C026}
// *********************************************************************//
interface _FiscalResponseDetails  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _FiscalService
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75849DFC-389B-3033-AFCA-781BBA340C85}
// *********************************************************************//
interface _FiscalService  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  IFiscalLibrary
// Flags:     (4096) Dispatchable
// GUID:      {F04DF0AA-C1D5-4F9E-95C8-61E6474899E2}
// *********************************************************************//
template<class T>
class IFiscalLibraryDispT : public TAutoDriver<IFiscalLibrary>
{
public:
  IFiscalLibraryDispT(){}

  IFiscalLibraryDispT(IFiscalLibrary *pintf)
  {
    TAutoDriver<IFiscalLibrary>::Bind(pintf, false);
  }

  IFiscalLibraryDispT(IFiscalLibraryPtr pintf)
  {
    TAutoDriver<IFiscalLibrary>::Bind(pintf, true);
  }

  IFiscalLibraryDispT& operator=(IFiscalLibrary *pintf)
  {
    TAutoDriver<IFiscalLibrary>::Bind(pintf, false);
    return *this;
  }

  IFiscalLibraryDispT& operator=(IFiscalLibraryPtr pintf)
  {
    TAutoDriver<IFiscalLibrary>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FiscalLibraryClass));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FiscalLibraryClass);
  }

  BSTR            __fastcall get_InvoiceNumber();
  void            __fastcall set_InvoiceNumber(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_Date();
  void            __fastcall set_Date(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_Time();
  void            __fastcall set_Time(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_Billno();
  void            __fastcall set_Billno(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_Cashno();
  void            __fastcall set_Cashno(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_Cashier();
  void            __fastcall set_Cashier(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_Source();
  void            __fastcall set_Source(BSTR Param1/*[in]*/);
  BSTR            __fastcall PrintReceipt();
  void            __fastcall LoadReceiptItemInfo(long identifier/*[in]*/, BSTR InvoiceNumber/*[in]*/);
  void            __fastcall LoadReceiptPaymentInfo(long identifier/*[in]*/, 
                                                    BSTR InvoiceNumber/*[in]*/);
  void            __fastcall LoadReceiptDiscountInfo(long identifier/*[in]*/, 
                                                     BSTR InvoiceNumber/*[in]*/);
  void            __fastcall InitializeItemProperties();
  void            __fastcall InitializePaymentProperties();
  void            __fastcall InitializeDiscountProperties();
  void            __fastcall AddItemToList();
  void            __fastcall AddPaymentInfoToList();
  void            __fastcall AddDiscountInfoToList();
  BSTR            __fastcall PrintZReport();
  BSTR            __fastcall get_TerminalName();
  void            __fastcall set_TerminalName(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_PointPurchased();
  void            __fastcall set_PointPurchased(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_TabCredit();
  void            __fastcall set_TabCredit(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_PrinterType();
  void            __fastcall set_PrinterType(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_PrinterLogicalName();
  void            __fastcall set_PrinterLogicalName(BSTR Param1/*[in]*/);
  BSTR            __fastcall get_Saletype();
  void            __fastcall set_Saletype(BSTR Param1/*[in]*/);
  BSTR            __fastcall CheckPrinterAvailable();
  BSTR            __fastcall OpenCashDrawer();
  VARIANT_BOOL    __fastcall get_OpenCD();
  void            __fastcall set_OpenCD(VARIANT_BOOL Param1/*[in]*/);

  __property   BSTR            InvoiceNumber = {read = get_InvoiceNumber, write = set_InvoiceNumber};
  __property   BSTR            Date = {read = get_Date, write = set_Date};
  __property   BSTR            Time = {read = get_Time, write = set_Time};
  __property   BSTR            Billno = {read = get_Billno, write = set_Billno};
  __property   BSTR            Cashno = {read = get_Cashno, write = set_Cashno};
  __property   BSTR            Cashier = {read = get_Cashier, write = set_Cashier};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   BSTR            TerminalName = {read = get_TerminalName, write = set_TerminalName};
  __property   BSTR            PointPurchased = {read = get_PointPurchased, write = set_PointPurchased};
  __property   BSTR            TabCredit = {read = get_TabCredit, write = set_TabCredit};
  __property   BSTR            PrinterType = {read = get_PrinterType, write = set_PrinterType};
  __property   BSTR            PrinterLogicalName = {read = get_PrinterLogicalName, write = set_PrinterLogicalName};
  __property   BSTR            Saletype = {read = get_Saletype, write = set_Saletype};
  __property   VARIANT_BOOL    OpenCD = {read = get_OpenCD, write = set_OpenCD};
};
typedef IFiscalLibraryDispT<IFiscalLibrary> IFiscalLibraryDisp;

// *********************************************************************//
// SmartIntf: TCOM_DiscountDetails
// Interface: _DiscountDetails
// *********************************************************************//
template <class T /* _DiscountDetails */ >
class TCOM_DiscountDetailsT : public TComInterface<_DiscountDetails>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DiscountDetailsT() {}
  TCOM_DiscountDetailsT(_DiscountDetails *intf, bool addRef = false) : TComInterface<_DiscountDetails>(intf, addRef) {}
  TCOM_DiscountDetailsT(const TCOM_DiscountDetailsT& src) : TComInterface<_DiscountDetails>(src) {}
  TCOM_DiscountDetailsT& operator=(const TCOM_DiscountDetailsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DiscountDetailsT<_DiscountDetails> TCOM_DiscountDetails;

// *********************************************************************//
// DispIntf:  _DiscountDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF1F61B0-AB19-3193-BA99-D9837AE38812}
// *********************************************************************//
template<class T>
class _DiscountDetailsDispT : public TAutoDriver<_DiscountDetails>
{
public:
  _DiscountDetailsDispT(){}

  _DiscountDetailsDispT(_DiscountDetails *pintf)
  {
    TAutoDriver<_DiscountDetails>::Bind(pintf, false);
  }

  _DiscountDetailsDispT(_DiscountDetailsPtr pintf)
  {
    TAutoDriver<_DiscountDetails>::Bind(pintf, true);
  }

  _DiscountDetailsDispT& operator=(_DiscountDetails *pintf)
  {
    TAutoDriver<_DiscountDetails>::Bind(pintf, false);
    return *this;
  }

  _DiscountDetailsDispT& operator=(_DiscountDetailsPtr pintf)
  {
    TAutoDriver<_DiscountDetails>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DiscountDetails));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DiscountDetails);
  }


};
typedef _DiscountDetailsDispT<_DiscountDetails> _DiscountDetailsDisp;

// *********************************************************************//
// SmartIntf: TCOM_FiscalDataDetails
// Interface: _FiscalDataDetails
// *********************************************************************//
template <class T /* _FiscalDataDetails */ >
class TCOM_FiscalDataDetailsT : public TComInterface<_FiscalDataDetails>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_FiscalDataDetailsT() {}
  TCOM_FiscalDataDetailsT(_FiscalDataDetails *intf, bool addRef = false) : TComInterface<_FiscalDataDetails>(intf, addRef) {}
  TCOM_FiscalDataDetailsT(const TCOM_FiscalDataDetailsT& src) : TComInterface<_FiscalDataDetails>(src) {}
  TCOM_FiscalDataDetailsT& operator=(const TCOM_FiscalDataDetailsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_FiscalDataDetailsT<_FiscalDataDetails> TCOM_FiscalDataDetails;

// *********************************************************************//
// DispIntf:  _FiscalDataDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E27E1009-FBB5-3049-94CF-88E981FB344E}
// *********************************************************************//
template<class T>
class _FiscalDataDetailsDispT : public TAutoDriver<_FiscalDataDetails>
{
public:
  _FiscalDataDetailsDispT(){}

  _FiscalDataDetailsDispT(_FiscalDataDetails *pintf)
  {
    TAutoDriver<_FiscalDataDetails>::Bind(pintf, false);
  }

  _FiscalDataDetailsDispT(_FiscalDataDetailsPtr pintf)
  {
    TAutoDriver<_FiscalDataDetails>::Bind(pintf, true);
  }

  _FiscalDataDetailsDispT& operator=(_FiscalDataDetails *pintf)
  {
    TAutoDriver<_FiscalDataDetails>::Bind(pintf, false);
    return *this;
  }

  _FiscalDataDetailsDispT& operator=(_FiscalDataDetailsPtr pintf)
  {
    TAutoDriver<_FiscalDataDetails>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FiscalDataDetails));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FiscalDataDetails);
  }


};
typedef _FiscalDataDetailsDispT<_FiscalDataDetails> _FiscalDataDetailsDisp;

// *********************************************************************//
// SmartIntf: TCOM_FiscalPayment
// Interface: _FiscalPayment
// *********************************************************************//
template <class T /* _FiscalPayment */ >
class TCOM_FiscalPaymentT : public TComInterface<_FiscalPayment>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_FiscalPaymentT() {}
  TCOM_FiscalPaymentT(_FiscalPayment *intf, bool addRef = false) : TComInterface<_FiscalPayment>(intf, addRef) {}
  TCOM_FiscalPaymentT(const TCOM_FiscalPaymentT& src) : TComInterface<_FiscalPayment>(src) {}
  TCOM_FiscalPaymentT& operator=(const TCOM_FiscalPaymentT& src) { Bind(src, true); return *this;}


};
typedef TCOM_FiscalPaymentT<_FiscalPayment> TCOM_FiscalPayment;

// *********************************************************************//
// DispIntf:  _FiscalPayment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {787603D8-58E1-35D8-8627-44F30DE011C6}
// *********************************************************************//
template<class T>
class _FiscalPaymentDispT : public TAutoDriver<_FiscalPayment>
{
public:
  _FiscalPaymentDispT(){}

  _FiscalPaymentDispT(_FiscalPayment *pintf)
  {
    TAutoDriver<_FiscalPayment>::Bind(pintf, false);
  }

  _FiscalPaymentDispT(_FiscalPaymentPtr pintf)
  {
    TAutoDriver<_FiscalPayment>::Bind(pintf, true);
  }

  _FiscalPaymentDispT& operator=(_FiscalPayment *pintf)
  {
    TAutoDriver<_FiscalPayment>::Bind(pintf, false);
    return *this;
  }

  _FiscalPaymentDispT& operator=(_FiscalPaymentPtr pintf)
  {
    TAutoDriver<_FiscalPayment>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FiscalPayment));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FiscalPayment);
  }


};
typedef _FiscalPaymentDispT<_FiscalPayment> _FiscalPaymentDisp;

// *********************************************************************//
// SmartIntf: TCOM_FiscalResponseDetails
// Interface: _FiscalResponseDetails
// *********************************************************************//
template <class T /* _FiscalResponseDetails */ >
class TCOM_FiscalResponseDetailsT : public TComInterface<_FiscalResponseDetails>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_FiscalResponseDetailsT() {}
  TCOM_FiscalResponseDetailsT(_FiscalResponseDetails *intf, bool addRef = false) : TComInterface<_FiscalResponseDetails>(intf, addRef) {}
  TCOM_FiscalResponseDetailsT(const TCOM_FiscalResponseDetailsT& src) : TComInterface<_FiscalResponseDetails>(src) {}
  TCOM_FiscalResponseDetailsT& operator=(const TCOM_FiscalResponseDetailsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_FiscalResponseDetailsT<_FiscalResponseDetails> TCOM_FiscalResponseDetails;

// *********************************************************************//
// DispIntf:  _FiscalResponseDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {84AB6488-DADD-3865-B838-0A54F6B6C026}
// *********************************************************************//
template<class T>
class _FiscalResponseDetailsDispT : public TAutoDriver<_FiscalResponseDetails>
{
public:
  _FiscalResponseDetailsDispT(){}

  _FiscalResponseDetailsDispT(_FiscalResponseDetails *pintf)
  {
    TAutoDriver<_FiscalResponseDetails>::Bind(pintf, false);
  }

  _FiscalResponseDetailsDispT(_FiscalResponseDetailsPtr pintf)
  {
    TAutoDriver<_FiscalResponseDetails>::Bind(pintf, true);
  }

  _FiscalResponseDetailsDispT& operator=(_FiscalResponseDetails *pintf)
  {
    TAutoDriver<_FiscalResponseDetails>::Bind(pintf, false);
    return *this;
  }

  _FiscalResponseDetailsDispT& operator=(_FiscalResponseDetailsPtr pintf)
  {
    TAutoDriver<_FiscalResponseDetails>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FiscalResponseDetails));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FiscalResponseDetails);
  }


};
typedef _FiscalResponseDetailsDispT<_FiscalResponseDetails> _FiscalResponseDetailsDisp;

// *********************************************************************//
// SmartIntf: TCOM_FiscalService
// Interface: _FiscalService
// *********************************************************************//
template <class T /* _FiscalService */ >
class TCOM_FiscalServiceT : public TComInterface<_FiscalService>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_FiscalServiceT() {}
  TCOM_FiscalServiceT(_FiscalService *intf, bool addRef = false) : TComInterface<_FiscalService>(intf, addRef) {}
  TCOM_FiscalServiceT(const TCOM_FiscalServiceT& src) : TComInterface<_FiscalService>(src) {}
  TCOM_FiscalServiceT& operator=(const TCOM_FiscalServiceT& src) { Bind(src, true); return *this;}


};
typedef TCOM_FiscalServiceT<_FiscalService> TCOM_FiscalService;

// *********************************************************************//
// DispIntf:  _FiscalService
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75849DFC-389B-3033-AFCA-781BBA340C85}
// *********************************************************************//
template<class T>
class _FiscalServiceDispT : public TAutoDriver<_FiscalService>
{
public:
  _FiscalServiceDispT(){}

  _FiscalServiceDispT(_FiscalService *pintf)
  {
    TAutoDriver<_FiscalService>::Bind(pintf, false);
  }

  _FiscalServiceDispT(_FiscalServicePtr pintf)
  {
    TAutoDriver<_FiscalService>::Bind(pintf, true);
  }

  _FiscalServiceDispT& operator=(_FiscalService *pintf)
  {
    TAutoDriver<_FiscalService>::Bind(pintf, false);
    return *this;
  }

  _FiscalServiceDispT& operator=(_FiscalServicePtr pintf)
  {
    TAutoDriver<_FiscalService>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FiscalService));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FiscalService);
  }


};
typedef _FiscalServiceDispT<_FiscalService> _FiscalServiceDisp;

// *********************************************************************//
// DispIntf:  IFiscalLibrary
// Flags:     (4096) Dispatchable
// GUID:      {F04DF0AA-C1D5-4F9E-95C8-61E6474899E2}
// *********************************************************************//
template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_InvoiceNumber()
{
  _TDispID _dispid(*this, OLETEXT("InvoiceNumber"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_InvoiceNumber(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvoiceNumber"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_Date()
{
  _TDispID _dispid(*this, OLETEXT("Date"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_Date(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Date"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_Time()
{
  _TDispID _dispid(*this, OLETEXT("Time"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_Time(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Time"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_Billno()
{
  _TDispID _dispid(*this, OLETEXT("Billno"), DISPID(4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_Billno(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Billno"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_Cashno()
{
  _TDispID _dispid(*this, OLETEXT("Cashno"), DISPID(5));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_Cashno(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cashno"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_Cashier()
{
  _TDispID _dispid(*this, OLETEXT("Cashier"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_Cashier(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cashier"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_Source()
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(7));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_Source(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::PrintReceipt()
{
  _TDispID _dispid(*this, OLETEXT("PrintReceipt"), DISPID(8));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::LoadReceiptItemInfo(long identifier/*[in]*/, BSTR InvoiceNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadReceiptItemInfo"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = identifier /*[VT_I4:0]*/;
  _args[2] = InvoiceNumber /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::LoadReceiptPaymentInfo(long identifier/*[in]*/, BSTR InvoiceNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadReceiptPaymentInfo"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = identifier /*[VT_I4:0]*/;
  _args[2] = InvoiceNumber /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::LoadReceiptDiscountInfo(long identifier/*[in]*/, BSTR InvoiceNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadReceiptDiscountInfo"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = identifier /*[VT_I4:0]*/;
  _args[2] = InvoiceNumber /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::InitializeItemProperties()
{
  _TDispID _dispid(*this, OLETEXT("InitializeItemProperties"), DISPID(12));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::InitializePaymentProperties()
{
  _TDispID _dispid(*this, OLETEXT("InitializePaymentProperties"), DISPID(13));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::InitializeDiscountProperties()
{
  _TDispID _dispid(*this, OLETEXT("InitializeDiscountProperties"), DISPID(14));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::AddItemToList()
{
  _TDispID _dispid(*this, OLETEXT("AddItemToList"), DISPID(15));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::AddPaymentInfoToList()
{
  _TDispID _dispid(*this, OLETEXT("AddPaymentInfoToList"), DISPID(16));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::AddDiscountInfoToList()
{
  _TDispID _dispid(*this, OLETEXT("AddDiscountInfoToList"), DISPID(17));
  OleProcedure(_dispid);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::PrintZReport()
{
  _TDispID _dispid(*this, OLETEXT("PrintZReport"), DISPID(18));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_TerminalName()
{
  _TDispID _dispid(*this, OLETEXT("TerminalName"), DISPID(19));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_TerminalName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TerminalName"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_PointPurchased()
{
  _TDispID _dispid(*this, OLETEXT("PointPurchased"), DISPID(20));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_PointPurchased(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointPurchased"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_TabCredit()
{
  _TDispID _dispid(*this, OLETEXT("TabCredit"), DISPID(21));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_TabCredit(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabCredit"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_PrinterType()
{
  _TDispID _dispid(*this, OLETEXT("PrinterType"), DISPID(22));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_PrinterType(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrinterType"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_PrinterLogicalName()
{
  _TDispID _dispid(*this, OLETEXT("PrinterLogicalName"), DISPID(23));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_PrinterLogicalName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrinterLogicalName"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::get_Saletype()
{
  _TDispID _dispid(*this, OLETEXT("Saletype"), DISPID(24));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_Saletype(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Saletype"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::CheckPrinterAvailable()
{
  _TDispID _dispid(*this, OLETEXT("CheckPrinterAvailable"), DISPID(25));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
IFiscalLibraryDispT<T>::OpenCashDrawer()
{
  _TDispID _dispid(*this, OLETEXT("OpenCashDrawer"), DISPID(26));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> VARIANT_BOOL __fastcall
IFiscalLibraryDispT<T>::get_OpenCD()
{
  _TDispID _dispid(*this, OLETEXT("OpenCD"), DISPID(27));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IFiscalLibraryDispT<T>::set_OpenCD(VARIANT_BOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCD"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_DiscountDetails
// Interface: _DiscountDetails
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _DiscountDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF1F61B0-AB19-3193-BA99-D9837AE38812}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_FiscalDataDetails
// Interface: _FiscalDataDetails
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _FiscalDataDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E27E1009-FBB5-3049-94CF-88E981FB344E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_FiscalPayment
// Interface: _FiscalPayment
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _FiscalPayment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {787603D8-58E1-35D8-8627-44F30DE011C6}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_FiscalResponseDetails
// Interface: _FiscalResponseDetails
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _FiscalResponseDetails
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {84AB6488-DADD-3865-B838-0A54F6B6C026}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM_FiscalService
// Interface: _FiscalService
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _FiscalService
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75849DFC-389B-3033-AFCA-781BBA340C85}
// *********************************************************************//
// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FiscalLibraryClass
// Interface: IFiscalLibraryDisp
// *********************************************************************//
typedef TCoClassCreatorT<IFiscalLibraryDisp, IFiscalLibrary, &CLSID_FiscalLibraryClass, &DIID_IFiscalLibrary> CoFiscalLibraryClass;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DiscountDetails
// Interface: TCOM_DiscountDetails
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DiscountDetails, _DiscountDetails, &CLSID_DiscountDetails, &IID__DiscountDetails> CoDiscountDetails;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FiscalDataDetails
// Interface: TCOM_FiscalDataDetails
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_FiscalDataDetails, _FiscalDataDetails, &CLSID_FiscalDataDetails, &IID__FiscalDataDetails> CoFiscalDataDetails;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FiscalPayment
// Interface: TCOM_FiscalPayment
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_FiscalPayment, _FiscalPayment, &CLSID_FiscalPayment, &IID__FiscalPayment> CoFiscalPayment;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FiscalResponseDetails
// Interface: TCOM_FiscalResponseDetails
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_FiscalResponseDetails, _FiscalResponseDetails, &CLSID_FiscalResponseDetails, &IID__FiscalResponseDetails> CoFiscalResponseDetails;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FiscalService
// Interface: TCOM_FiscalService
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_FiscalService, _FiscalService, &CLSID_FiscalService, &IID__FiscalService> CoFiscalService;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Fiscalintegration_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Fiscalintegration_tlb;
#endif

#pragma option pop

#endif // FiscalIntegration_TLBH
