//---------------------------------------------------------------------------

#ifndef LoyaltyMateUtilitiesH
#define LoyaltyMateUtilitiesH

#include "LogsDB.h"
#include "MM_DBCore.h"
#include "DeviceRealTerminal.h"
#include "ContactPoints.h"
#include "DBTierLevel.h"
#include "ManagerSyndCode.h"
#include "MMContactInfo.h"
//---------------------------------------------------------------------------

struct TLoyaltyMateTransaction
{
    public:
        int TransactionNumber;
        int ContactKey;
        AnsiString CloudUUID;
        TSyndCode SyndicateCode;
        Currency PointsBalance;
        Currency PointsDelta;
        TDateTime OccurredDate;
        int PointsType;
        AnsiString InvoiceNumber;
};

enum MMLoyaltyResponseCode
{
  Successful,
  AuthenticationFailed,
  CreateMemberFailed,
  UpdateMemberFailed,
  DeleteMemberFailed,
  GetMemberFailed,
  PostTransactionFailed,
  MemberNotExist,
  CompanySyncFailed,
  InvalidGiftVoucher,
  InvalidPocketVoucher,
  TransactionFailed,
  GetGiftCardFailed,
  GetPocketVoucherFailed,
  MenuSyncingFailed,
  TaxSettingSyncingFailed,
  UpdateOnlineOrderStatusFailed,
  PostOnlineOrderInvoiceInfoFailed,
  MultipleGUIDExist,
  GUIDNotFound,
  FailedDueToException,
};
class MMLoyaltyServiceResponse
{
    public:
        bool                  IsSuccesful;
        AnsiString            Message;
        AnsiString            Description;
        MMLoyaltyResponseCode ResponseCode;
        AnsiString            UUID;
        AnsiString            MemberCode;
        MMLoyaltyServiceResponse(bool  inSuccess,AnsiString inMessage,AnsiString  inDescription,MMLoyaltyResponseCode inResponseCode,AnsiString inUUID)
            : IsSuccesful(inSuccess),Message(inMessage),Description(inDescription),ResponseCode(inResponseCode),UUID(inUUID)
        {
        }
};
//---------------------------------------------------------------------------
class TLoyaltyMateMemberOperation
{
    public:
        TSyndCode SyndicateCode;
        TMMContactInfo MemberInfo;

        TLoyaltyMateMemberOperation(TSyndCode syndicateCode,TMMContactInfo memberInfo):
                                    SyndicateCode(syndicateCode),MemberInfo(memberInfo){}
};
//---------------------------------------------------------------------------
class TLoyaltyMateUtilities
{
public:
    static int DeleteTransaction(int contactKey,int transactionNumber);
    static void SetTransaction(Database::TDBTransaction &DBTransaction,TLoyaltyMateTransaction transaction);
    static std::vector<int> GetAllContactsWithPendingTransactions();
    static std::vector<TLoyaltyMateTransaction> GetPendingTransactionForContact(int contactKey);
    static bool GetContactByCloudUUID(Database::TDBTransaction &DBTransaction,UnicodeString uuid,int &contactKey,int &siteId);
    static UnicodeString GetMemberCloudIdIfRegistered(Database::TDBTransaction &DBTransaction,int contactKey,int siteId);
    static bool SetMemberCloudId(Database::TDBTransaction &DBTransaction,int contactKey,int siteId,UnicodeString uuid,UnicodeString activationToken="");
    static bool IsLoyaltyMateEnabledGUID(UnicodeString uuid);
    static UnicodeString GetLoyaltyMateDisabledCloudUUID();
    static int GetPointsType(TPointsTransactionType pointType);
    static void SetLoyaltymateTransactions(Database::TDBTransaction &DBTransaction,int contactKey,TSyndCode syndicateCode,
      TContactPoints PointsToLoad,AnsiString inInvoiceNumber);
    static UnicodeString GetMemberCloudId(Database::TDBTransaction &DBTransaction,int contactKey);
    static AnsiString GetAutoGeneratedMemberEmail(Database::TDBTransaction &DBTransaction);
    static AnsiString GetAutoGeneratedGiftCardEmail(Database::TDBTransaction &DBTransaction);
    static AnsiString GetUniqueNumber(Database::TDBTransaction &DBTransaction);
    static bool HasPendingTransactions(Database::TDBTransaction &DBTransaction,int inContactKey);
    int StreamCheckCRC(AnsiString value);
    TBytes CreateByteArray( const char* inBuffer, __int32 inBufferSize );
    static void UpdatePendingTransactions(Database::TDBTransaction &DBTransaction, int inContactKey, UnicodeString paramValue);
    static void UpdateUUID(Database::TDBTransaction &DBTransaction, int inContactKey, UnicodeString uuid);
    static void MakeAllPendingTransactionsAvailable(UnicodeString paramValue);
    static bool IsUUIDExist(Database::TDBTransaction &DBTransaction,UnicodeString uuid);
};
//---------------------------------------------------------------------------

#endif
